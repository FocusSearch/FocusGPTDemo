(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[28],{

/***/ "../src-v5/assets/js/charts.system.basic/pie/systemPieChart.js":
/*!*********************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.basic/pie/systemPieChart.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/d3v7Export */ \"../src-v5/assets/js/d3v7Export.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pc/assets/js/charts.components/TranslateDataComponent */ \"../src-v5/assets/js/charts.components/TranslateDataComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pc/assets/js/charts.components/LegendComponent */ \"../src-v5/assets/js/charts.components/LegendComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pc/assets/js/charts.components/TitleComponent */ \"../src-v5/assets/js/charts.components/TitleComponent.js\");\n\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n// 数据处理组件[ 解析XY轴配置组的数据 ]\n\n// 画图例列表的组件\n\n// 画标题组件\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  // [*必填项] 图姓唯一标识\n  chartType: \"pie\",\n  // [*必填项] 图形名称中英文Key\n  chartDisplayNameKey: \"chart_pie\",\n  // [*必填项] 图形描述中英文Key\n  chartDescriptionKey: \"chart_pie_tooltip\",\n  // [*必填项] 图轴配置元素 ( X轴一个以上 ，Y轴一个 )\n  needAxis: {\n    xAxis: {},\n    yAxis: {\n      defaultYAxisNumber: 1\n    }\n  },\n  // [*必填项] 搜索数据是否支持该图形 ( 至少一个属性列，一个数值列，允许图例 )\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    if (!searchResultStatistic || !searchResultStatistic.aggregatedFlag) return false;\n    if (searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.measureColumns.length >= 1 && searchResultStatistic.attributeColumns.length >= 1) {\n        satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  /**\r\n   * [选填] 获取当前图形各个needAxis中可选择的配置列\r\n   * @return\r\n   *      {\r\n   *          // 依据needAxis结构返回各个可选列的index\r\n   *          xAxis: [1,2,3] ,\r\n   *          yAxis: [4,5] ,\r\n   *      }\r\n   * */\n  getSatisfiedChartAxis: function (searchResultStatistic) {\n    let self = this; //  是当前_DataFocusChartTypes中的对象\n\n    const needAxis = self.needAxis || {};\n    if (!needAxis || !searchResultStatistic) return false;\n    let theAxisObj = {};\n    // xAxis / yAxis\n    // X轴的可选项\n    if (needAxis.xAxis) {\n      theAxisObj.xAxis = searchResultStatistic.attributeColumns && searchResultStatistic.attributeColumns.map(function (h) {\n        return h.idx;\n      });\n    }\n    // Y轴的可选项\n    if (needAxis.yAxis) {\n      theAxisObj.yAxis = searchResultStatistic.measureColumns && searchResultStatistic.measureColumns.map(function (h) {\n        return h.idx;\n      });\n    }\n    if (_DataFocusMethod.isObjEmpty(theAxisObj)) {\n      return false;\n    } else {\n      theAxisObj.name = self.name;\n      theAxisObj.type = self.name;\n      return theAxisObj;\n    }\n  },\n  /**\r\n   * [选填] 在图形没有图轴配置的情况下，从getSatisfiedChartAxis中图轴可选项中初始化画图配置\r\n   *\r\n   * 初始化规则：\r\n   * 1. 如果当前数据中有两个以上数值列，则默认X轴是数值列，Y轴是一个数值列\r\n   * 2. 如果当前数据只有一个数值列，则默认X轴是属性列，Y轴是数值列\r\n   *\r\n   * // 依据needAxis生成初始的图轴配置值，及各个轴的配置可选项\r\n   *    返回对象名字规则: 可选项是needAxis中各项名字 + Area ； 当前配置项是 cur + needAxis中各项名字\r\n   * @return chartAxis\r\n   *          {\r\n   *              xAxisArea: [  {col_id , index ...} , {} ] ,\r\n   *              curXAxis: [ {col_id , index ...} ]\r\n   *              yAxisArea: [ {col_id , index , min , max ...} , {} ] ,\r\n   *              curYAxis: [ {col_id , index , min , max ...} ] ,\r\n   *          }\r\n   *\r\n   * */\n  initChartAxisConfig: function (options) {\n    options = options || {};\n    if (!options.tableData || !options.tableData.headers) return false;\n    let self = this,\n      //  是当前_DataFocusChartTypes中的对象\n      tableData = options.tableData,\n      headers = tableData.headers,\n      columns = tableData.columns;\n\n    // charts是依据各个图形中的getSatisfiedChartAxis生成的\n    let theMatchedChart = tableData.charts && tableData.charts.find(function (chart) {\n        return (chart.name || chart.type) === self.name;\n      }),\n      chartAxis = {};\n    if (!theMatchedChart) {\n      console.log(\"当前数据不适合饼图\");\n      return chartAxis;\n    }\n    let getIdIndexInHeader = function (colIdx, headers) {\n      // 目前charts返回的都是索引\n      if (colIdx < headers.length) return colIdx;\n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i].col_id === colIdx) return i;\n      }\n      return -1;\n    };\n\n    // 获取XAxis列及可选数组\n    if (self.needAxis && self.needAxis.xAxis) {\n      chartAxis.xAxisArea = [];\n      theMatchedChart.xAxis && theMatchedChart.xAxis.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = $.extend({}, headers[curColumnIndex]);\n        obj.header = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        chartAxis.xAxisArea.push(obj);\n      });\n\n      // 赋值默认的X轴，默认X轴与图例列不能重叠\n      let xAxisArea = chartAxis.xAxisArea.filter(function (xAxis) {\n        return !(chartAxis.curLegend && xAxis.index === chartAxis.curLegend.index);\n      });\n      // 如果指令了属性列的数量\n      let defaultXAxisNumber = _DataFocusMethod.isPureNumber(self.needAxis.xAxis.defaultXAxisNumber) ? self.needAxis.xAxis.defaultXAxisNumber : -1;\n      let withoutSortX = xAxisArea && xAxisArea.filter(function (head) {\n        return !head.isSortNoFlag;\n      });\n      // 如果没有排序列的属性列足够分配需要的X轴，则优先使用非排序列的属性列\n      if (defaultXAxisNumber < 0) {\n        chartAxis.curXAxis = withoutSortX.length ? withoutSortX : xAxisArea;\n      } else {\n        if (withoutSortX.length >= defaultXAxisNumber) {\n          chartAxis.curXAxis = withoutSortX.slice(0, defaultXAxisNumber);\n        } else {\n          chartAxis.curXAxis = xAxisArea.slice(0, defaultXAxisNumber);\n        }\n      }\n    }\n\n    // 获取YAxis列及可选数组 [ 必须计算yAxis的最大值与最小值，计算刻度使用 ]\n    if (self.needAxis && self.needAxis.yAxis) {\n      chartAxis.yAxisArea = [];\n      theMatchedChart.yAxis && theMatchedChart.yAxis.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = $.extend({}, headers[curColumnIndex]);\n        obj.header = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        obj.direction = \"left\";\n        let min = obj.statistics && obj.statistics.min,\n          max = obj.statistics && obj.statistics.max;\n        // 如果min/max中存在Infinity这类的无穷数据 或者 存在非法数字时，需要从原始数据中重新获取合法数值\n        if (!isFinite(min + max) || !_DataFocusMethod.isPureNumber(min) || !_DataFocusMethod.isPureNumber(max)) {\n          let theMin = Infinity,\n            theMax = -Infinity;\n          columns && columns.forEach(function (d) {\n            if (_DataFocusMethod.isPureNumber(d[curColumnIndex]) && isFinite(d[curColumnIndex])) {\n              theMin = Math.min(theMin, d[curColumnIndex]);\n              theMax = Math.max(theMax, d[curColumnIndex]);\n            }\n          });\n          min = theMin;\n          max = theMax;\n          // 如果theMin是Infinity, 说明数据表中没有合法的数值，则将其设置成0\n          if (Math.abs(theMin) === Infinity) {\n            min = 0;\n            max = 0;\n          }\n        }\n        // 如果min是undefined 说明，数据表头中没有统计 且 返回数据中没有合法的数值，则默认设置为0\n        if (min === undefined) {\n          min = 0;\n          max = 0;\n        }\n        obj.min = min;\n        obj.max = min === max && max === 0 && min === 0 ? 1 : max;\n        chartAxis.yAxisArea.push(obj);\n      });\n      let yAxisArea = chartAxis.yAxisArea;\n      let defaultYAxisNumber = _DataFocusMethod.isPureNumber(self.needAxis.yAxis.defaultYAxisNumber) ? self.needAxis.yAxis.defaultYAxisNumber : 1;\n      // 如果默认Y轴< 0 ， 说明剩下所有可用Y轴全部是默认Y轴\n      if (defaultYAxisNumber < 0) {\n        chartAxis.curYAxis = yAxisArea;\n      } else {\n        chartAxis.curYAxis = yAxisArea.slice(0, defaultYAxisNumber);\n        let defaultRightYAxisNumber = _DataFocusMethod.isPureNumber(self.needAxis.yAxis.defaultRightYAxisNumber) ? self.needAxis.yAxis.defaultRightYAxisNumber : 0;\n        let rightYAxis = yAxisArea.slice(defaultYAxisNumber, defaultYAxisNumber + defaultRightYAxisNumber);\n        if (rightYAxis && rightYAxis.length) {\n          rightYAxis && rightYAxis.forEach(function (yAxis) {\n            yAxis.direction = 'right';\n          });\n          chartAxis.curYAxis = chartAxis.curYAxis.concat(rightYAxis);\n        }\n      }\n    }\n    return chartAxis;\n  },\n  /***\r\n   * [*必填项] 图轴配置是否合法\r\n   *      - X轴不允许为空\r\n   *      - Y轴不允许为空\r\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '',\n      i,\n      yyids;\n    if (!theAxisConfig) return chartErrorMsg;\n\n    // X轴为必填选项\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      chartErrorMsg = 'chart_modify_x_not_null';\n      return chartErrorMsg;\n    }\n\n    // Y轴不允许为空\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      chartErrorMsg = 'chart_modify_y_not_null';\n      return chartErrorMsg;\n    }\n    return chartErrorMsg;\n  },\n  // [* 必填项]画图方法\n  drawChart: function (options, pieArcColors) {\n    options = options || {};\n    function isNumber(num) {\n      return num === +num;\n    }\n    function sortBy(attr, rev) {\n      if (rev == undefined) {\n        rev = 1;\n      } else {\n        rev = rev ? 1 : -1;\n      }\n      return function (a, b) {\n        a = Math.abs(a[attr]);\n        b = Math.abs(b[attr]);\n        if (a < b) {\n          return rev * 1;\n        }\n        if (a > b) {\n          return rev * -1;\n        }\n        return 0;\n      };\n    }\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    if (!options.datas.columns || !options.datas.columns.length) {\n      options.container.innerHTML = '';\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n    let self = this,\n      container = options.container,\n      chartAxis = options.chartAxis,\n      currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      chartConfigures = options.chartConfigures || {};\n    const hideCategories = conf.hideCategories || [];\n\n    // 获取图形的字体大小配置\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 10,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    chartFontSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].translateFontSizeConfigure(chartFontSize) || 10;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n    }\n    if (chartFontSize) {\n      container.style.fontSize = chartFontSize + 'px';\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n    pieArcColors = pieArcColors || chartAxis.pieArcColors || {};\n    let curXAxis = chartAxis.curXAxis,\n      curYAxis = chartAxis.curYAxis,\n      maxSlicesNum = 12,\n      sortDataFlag = true,\n      startRadiusPercent = 0,\n      negativeFlag = false,\n      labelFontSize = chartFontSize,\n      labelDistanceWithCircle = 10,\n      labelStrSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getStrSizeByCanvas('string', 'ssdddd'),\n      theLabelHeight = 0,\n      radius = Math.min(container.offsetWidth, container.offsetHeight - theLabelHeight) * 0.5,\n      arcListPercent = 0,\n      radiusPercent = 1,\n      radiusPercentConfig = 1,\n      //  配置圈半径占自适应半径的比例\n      allowOverlap = false,\n      //  数据标签是否允许重叠\n      roseMode,\n      //  玫瑰模式下的画图模式   radius - 半径模式,通过当前值控制半径与角度大小  ;   area  -   面积模式,通过当前值控制半径大小,角度平均\n      arcListFlexFlag = false,\n      //  图形左侧列表与图形是否是自适应区域\n      relativeOffset = 0,\n      chartCustomLegend;\n    let legendPosition = 'left';\n    let legendWidthPercent = 100;\n    let enableCarouselAnimation = false; // 是否开启轮播动画\n    let animateFlag = !chartConfigures.animation_forbidden; //  是否禁止动画的标志\n    let showLabel = false;\n    let cornerRadius = 0,\n      padAngle = 0;\n    let gap = 10;\n    if (_DataFocusMethod.isPureNumber(chartConfigures.pie_container_gap)) {\n      gap = parseInt(chartConfigures.pie_container_gap);\n    }\n\n    // 当前画图区域的缩放比例【会影响到获取字体高度的计算】\n    if (_DataFocusMethod.isPureNumber(chartConfigures._DF_SYS_TRANSFORM_SCALE)) {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].transformScale = chartConfigures._DF_SYS_TRANSFORM_SCALE;\n    }\n\n    // 1. 解析数据为当前画图数据\n    let translateData = _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].translateXYLegendBasicData({\n      tableData: conf.datas,\n      chartAxis: chartAxis,\n      xLabelType: chartConfigures.x_axis_draw_type === 'option_select_x_axis_dot_line' ? 'dotLine' : 'auto',\n      language: systemLanguage\n    });\n    if (!translateData || !translateData.datas) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n    if (conf.chartConfigures) {\n      if (conf.chartConfigures.pie_legend_width) {\n        legendWidthPercent = parseInt(conf.chartConfigures.pie_legend_width);\n      }\n      if (conf.chartConfigures.legend_position) {\n        switch (conf.chartConfigures.legend_position) {\n          case \"option_position_right\":\n            legendPosition = 'right';\n            break;\n          case \"option_position_top\":\n            legendPosition = 'top';\n            break;\n          case \"option_position_bottom\":\n            legendPosition = 'bottom';\n            break;\n          case \"option_position_left\":\n          default:\n            legendPosition = 'left';\n            break;\n        }\n      }\n      if (conf.chartConfigures.pie_slices_without_sort) {\n        sortDataFlag = false;\n      }\n      if (parseInt(conf.chartConfigures.pie_slices_before_others) >= 0) {\n        maxSlicesNum = parseInt(conf.chartConfigures.pie_slices_before_others);\n        maxSlicesNum = Math.min(maxSlicesNum, 100);\n      }\n      if (parseInt(conf.chartConfigures.pie_start_radius) >= 0) {\n        startRadiusPercent = Math.min(parseInt(conf.chartConfigures.pie_start_radius), 100);\n        startRadiusPercent = startRadiusPercent / 100;\n      }\n      if (parseInt(conf.chartConfigures.pie_radius) >= 0) {\n        radiusPercentConfig = Math.min(parseInt(conf.chartConfigures.pie_radius), 100);\n        radiusPercentConfig = radiusPercentConfig / 100;\n      }\n\n      // 用户自定义的颜色\n      if (conf.chartConfigures.chart_custom_legend) {\n        chartCustomLegend = conf.chartConfigures.chart_custom_legend;\n      }\n      if (conf.chartConfigures.label_text_allow_overlap) {\n        allowOverlap = true;\n      }\n      if (conf.chartConfigures.pie_chart_mode) {\n        if (conf.chartConfigures.pie_chart_mode === \"option_pie_chart_mode_rose\") {\n          roseMode = \"radius\";\n          if (conf.chartConfigures.pie_chart_rose_mode === \"option_pie_chart_rose_mode_area\") {\n            roseMode = \"area\";\n          }\n        }\n      }\n      if (conf.chartConfigures.pie_flex_flag) {\n        arcListFlexFlag = true;\n      }\n      // 只有在自适应的情况下，才可以适配两边的距离\n      if (arcListFlexFlag && conf.chartConfigures.pie_relative_position_offset) {\n        relativeOffset = parseFloat(conf.chartConfigures.pie_relative_position_offset);\n        if (isNaN(relativeOffset)) relativeOffset = 0;\n      }\n      if (conf.chartConfigures.enable_carousel_animation !== undefined) {\n        enableCarouselAnimation = Boolean(conf.chartConfigures.enable_carousel_animation);\n      }\n      if (conf.chartConfigures.label_text_visible) {\n        showLabel = true;\n      }\n      if (_DataFocusMethod.isPureNumber(chartConfigures.pie_corner_radius)) {\n        cornerRadius = parseInt(chartConfigures.pie_corner_radius);\n      }\n      if (_DataFocusMethod.isPureNumber(chartConfigures.pie_pad_angle)) {\n        padAngle = parseFloat(chartConfigures.pie_pad_angle);\n      }\n    }\n    if (!curYAxis || !curYAxis.length) {\n      console.log(\"- 【CHART】画饼状图未找到Y轴\");\n      return;\n    }\n    //绘制图形\n    if (!translateData.datas) {\n      console.log(\"- 【CHART】画饼状图数据变更\");\n      return;\n    }\n    const chartContainer = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(container);\n    const isChartExisted = !!container.querySelector('.arc-container');\n\n    // 原始数据\n    const originalRows = translateData.datas.filter(row => !hideCategories.includes(row.x0));\n    const totalY = originalRows.reduce((sum, curRow) => {\n      return sum + Math.abs(curRow.y0);\n    }, 0);\n    for (const row of originalRows) {\n      if (row.y0 < 0) {\n        negativeFlag = true;\n      }\n      row.percent = Math.abs(row.y0) / totalY * 100;\n\n      // 设置颜色\n      let theColor;\n      // 图例自定义颜色\n      if (chartCustomLegend && chartCustomLegend.length) {\n        let theMatchedColor = chartCustomLegend.find(function (theLegend) {\n          return row.x0 && theLegend.legend === row.x0;\n        });\n        if (theMatchedColor && theMatchedColor.color) {\n          theColor = theMatchedColor.color;\n        }\n      }\n      const yAxis = curYAxis[0];\n      const d = row;\n      let colorFormats = yAxis.header && yAxis.header.colorFormattings;\n      // 用户手动配置的颜色\n      if (pieArcColors[d['x0']]) theColor = pieArcColors[d['x0']];\n      if (pieArcColors[encodeURIComponent(d['x0'])]) theColor = pieArcColors[encodeURIComponent(d['x0'])];\n      // 如果用户配置了自定义颜色，需要依据当前刻度值在自定义图例颜色中找对应的颜色\n\n      // 颜色规则计算的颜色\n      if (!theColor && isNumber(d['y' + 0]) && colorFormats && colorFormats.length > 0) {\n        let curColor = _DataFocusMethod.calcTheColor(d['y' + 0], colorFormats, {\n          rowData: d.rowData\n        });\n        if (curColor) theColor = curColor;\n      }\n      row.color = theColor;\n    }\n\n    // 排序处理后的数据\n    const sortedRows = sortDataFlag ? originalRows.sort(sortBy('y0')) : originalRows;\n    // 分片后的数据\n    const slicedRows = (() => {\n      // 超过分入”其他“的条数切片\n      if (sortedRows.length > maxSlicesNum) {\n        const mainRows = sortedRows.slice(0, maxSlicesNum);\n        const otherRows = sortedRows.slice(maxSlicesNum);\n\n        // 生成“其他”的数据\n        const otherRow = otherRows.reduce((otherRow, curRow) => {\n          otherRow.y0 += Math.abs(curRow.y0);\n          return otherRow;\n        }, {\n          x0: conf.curLanguage && conf.curLanguage('chart_pie_others') || \"others\",\n          y0: 0,\n          otherRows: otherRows\n        });\n        if (pieArcColors[otherRow['x0']]) otherRow.color = pieArcColors[otherRow['x0']];\n        if (pieArcColors[encodeURIComponent(otherRow['x0'])]) otherRow.color = pieArcColors[encodeURIComponent(otherRow['x0'])];\n        otherRow.percent = otherRow.y0 / totalY * 100;\n        return [...mainRows, otherRow];\n      } else {\n        return sortedRows;\n      }\n    })();\n\n    // 最终绘图的数据\n    const chartRows = (() => {\n      // 是否全部是0数据\n      const pieSum = slicedRows.reduce((sum, curRow) => sum + curRow['y0'], 0);\n      return pieSum === 0 ? [{\n        x0: 'vacuum',\n        y0: 0,\n        percent: 0\n      }] : slicedRows;\n    })();\n    function dataConfigure(data, curY, index) {\n      return _DataFocusMethod.formatData(data['y' + index], {\n        decimalPoint: curY.decimalPoint,\n        currencyType: curY.currencyType,\n        formatType: curY.formatType,\n        numberType: curY.numberType,\n        percentType: curY.percentType\n      });\n    }\n    function createInnerStr(data, labelStyle) {\n      let innerStr = '';\n      data.forEach(function (curPieData, index) {\n        if (curPieData.show !== false) {\n          let color = curPieData.color || conf.colors(index);\n          innerStr += '<li class=\"mt5 legend-item\" style=\"' + (labelStyle || '') + '\" pieValue=\"' + encodeURIComponent(curPieData['x0']) + '\">' + '<span class=\"arc-color ' + (!conf.action || conf.inPinboard ? '' : 'cursor-pointer') + ' mr5\" color=\"' + color + '\" style=\"background-color:' + color + ';\"></span>';\n\n          // 左侧列表标签需要显示转义后的文字【 主要是日期列 】\n          let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[curPieData.x0];\n          let theLabelText = theXLabelMapping && theXLabelMapping.text || curPieData.x0;\n          if (options.arcListFlexFlag) {\n            innerStr += '<span style=\"max-width:100%\" class=\"arc-text arc-text-2\" title=\"' + _DataFocusMethod.translateIllegalStr(curPieData['x0']) + '\">' + _DataFocusMethod.translateIllegalStr(theLabelText, {\n              showUnicodeFlag: true\n            }) + '</span>';\n          } else {\n            innerStr += '<span class=\"arc-text arc-text-2\" title=\"' + _DataFocusMethod.translateIllegalStr(curPieData['x0']) + '\">' + _DataFocusMethod.translateIllegalStr(theLabelText, {\n              showUnicodeFlag: true\n            }) + '</span>';\n          }\n          chartAxis.curYAxis.forEach(function (yAxis, index) {\n            let tempConfigValue = dataConfigure(curPieData, yAxis, index);\n            innerStr += '<span class=\"arc-data text-clip ml10\" title=\"' + _DataFocusMethod.translateIllegalStr(tempConfigValue) + '\">' + _DataFocusMethod.translateIllegalStr(tempConfigValue, {\n              showUnicodeFlag: true\n            }) + '</span>';\n          });\n          innerStr += '</li>';\n        }\n      });\n      return innerStr;\n    }\n\n    // 分割容器\n    const {\n      svg,\n      hideLegend,\n      hideDetail\n    } = (() => {\n      // pie info layer 右侧信息\n      const pieInfoLayerStyle = 'position:absolute;inset:0; width:100%;height:100%;display:flex;align-items: center;justify-content: center';\n      const pieInfoLayer = chartContainer.selectAll('.pie-info-layer').data([true]).join(enter => enter.append('div').classed('pie-info-layer', true).attr('style', pieInfoLayerStyle).style('gap', gap + 'px'), update => update.attr('style', pieInfoLayerStyle).style('gap', gap + 'px'), exit => exit.remove());\n      if (legendPosition === 'right') {\n        pieInfoLayer.style('flex-direction', 'row-reverse');\n      }\n      if (legendPosition === 'top') {\n        pieInfoLayer.style('flex-direction', 'column');\n      }\n      if (legendPosition === 'bottom') {\n        pieInfoLayer.style('flex-direction', 'column-reverse');\n      }\n\n      // 是否有负数\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].drawNegativeMsg({\n        container: pieInfoLayer.node(),\n        negativeFlag: negativeFlag,\n        negativeMessage: conf.curLanguage && conf.curLanguage('chart_negative_tip') || \"Warning:Data contains negative numbers\"\n      });\n\n      // 图例\n      const arcLegendContentStyle = 'width:0;padding:10px;overflow:hidden; height: 100%; flex: 1 1 30%;display: flex;align-items: center';\n      const arcLegendContent = pieInfoLayer.selectAll('.pie-legend-content').data([true]).join(enter => enter.append('div').classed('pie-legend-content', true).attr('style', arcLegendContentStyle).style('border', 'solid 0px #ff7d00'), update => update.attr('style', arcLegendContentStyle), exit => exit.remove());\n      if (legendPosition === 'top' || legendPosition === 'bottom') {\n        arcLegendContent.style('width', '100%').style('flex', '1 1 20%').style('height', 0);\n      }\n\n      // 中间svg\n      const pieSvgContainerStyle = 'width:0;height:100%;flex: 1 1 40%;z-index:1;overflow:visible;max-width: 60%';\n      const pieSvgContainer = pieInfoLayer.selectAll('.pie-svg-container').data([true]).join(enter => enter.append('svg').classed('pie-svg-container', true)\n      // svg-dom 在看板中可以使子元素继承颜色\n      .classed('svg-dom', true).attr('style', pieSvgContainerStyle).style('border', 'solid 0px #cc18cc'), update => update.attr('style', pieSvgContainerStyle), exit => exit.remove());\n      if (legendPosition === 'top' || legendPosition === 'bottom') {\n        pieSvgContainer.style('width', '100%').style('flex', '1 1 40%').style('max-height', '60%').style('max-width', '100%');\n      }\n      if (chartFontColor) {\n        pieSvgContainer.style('color', chartFontColor).style('fill', chartFontColor);\n      }\n\n      // 详情内容\n      const detailContentStyle = 'width:100%;padding:10px;overflow:hidden; height: 100%; flex: 1 1 30%;display: flex;align-items: center';\n      const arcDetailContent = pieInfoLayer.selectAll('.pie-detail-content').data([true]).join(enter => enter.append('div').classed('pie-detail-content', true).attr('style', detailContentStyle).style('border', 'solid 0px #23c343'), update => update.attr('style', detailContentStyle), exit => exit.remove());\n      if (legendPosition === 'top' || legendPosition === 'bottom') {\n        arcDetailContent.style('width', '100%').style('flex', '1 1 30%').style('max-height', '30%');\n      }\n      let hideLegend = chartConfigures.pie_hide_legend === true;\n      let hideDetail = chartConfigures.pie_hide_detail === true;\n\n      // 总容器的宽度\n      const containerWidth = container.offsetWidth;\n      const containerHeight = container.offsetHeight;\n      if (legendPosition === 'left' || legendPosition === 'right') {\n        // 应用水平方向上的适应规则\n        const isBigWidthContainer = containerWidth / containerHeight > 1.5 && containerWidth > 550;\n        const isMediumWidthContainer = containerWidth / containerHeight > 1 || containerHeight > 350 || containerWidth > 250;\n        if (!hideLegend && !hideDetail) {\n          // 用户配置都没有隐藏\n\n          if (isBigWidthContainer) {\n            // 大尺寸，全部显示\n            hideLegend = false;\n            hideDetail = false;\n          } else if (isMediumWidthContainer && containerWidth > 250) {\n            // 中等尺寸，隐藏右侧 [ #tongtong 增加 如果小于250时是小尺寸 ]\n            hideLegend = false;\n            hideDetail = true;\n          } else {\n            // 小尺寸，左右全部隐藏\n            hideLegend = true;\n            hideDetail = true;\n          }\n        }\n        if (hideLegend && !hideDetail) {\n          // 用户配置了只隐藏图例\n\n          if (isBigWidthContainer) {\n            hideDetail = false;\n          } else if (isMediumWidthContainer && containerWidth > 250) {\n            // 中等尺寸，隐藏右侧 [ #tongtong 增加 如果小于250时是小尺寸 ]\n            hideDetail = false;\n          } else {\n            hideDetail = true;\n          }\n        }\n        if (!hideLegend && hideDetail) {\n          // 用户配置了只隐藏详情\n\n          if (isBigWidthContainer) {\n            hideLegend = false;\n          } else if (isMediumWidthContainer && containerWidth > 250) {\n            // 中等尺寸，隐藏右侧 [ #tongtong 增加 如果小于250时是小尺寸 ]\n            hideLegend = false;\n          } else {\n            hideLegend = true;\n          }\n        }\n      } else {\n        // 应用竖直方向上的适应规则\n        const isBigHeightContainer = containerHeight / containerWidth > 1.5 && containerWidth > 500;\n        const isMediumHeightContainer = containerHeight / containerWidth > 1 || containerHeight > 200;\n        if (!hideLegend && !hideDetail) {\n          // 用户配置都没有隐藏\n          if (isBigHeightContainer) {\n            // 大尺寸，全部显示\n            hideLegend = false;\n            hideDetail = false;\n          } else if (isMediumHeightContainer && containerHeight > 200) {\n            // 中等尺寸，隐藏右侧 [ #tongtong 增加 如果小于200时是小尺寸 ]\n            hideLegend = false;\n            hideDetail = true;\n          } else {\n            // 小尺寸，左右全部隐藏\n            hideLegend = true;\n            hideDetail = true;\n          }\n        }\n        if (hideLegend && !hideDetail) {\n          // 用户配置了只隐藏图例\n\n          if (isBigHeightContainer) {\n            hideDetail = false;\n          } else if (isMediumHeightContainer && containerHeight > 250) {\n            // 中等尺寸，隐藏右侧 [ #tongtong 增加 如果小于250时是小尺寸 ]\n            hideDetail = false;\n          } else {\n            hideDetail = true;\n          }\n        }\n        if (!hideLegend && hideDetail) {\n          // 用户配置了只隐藏详情\n\n          if (isBigHeightContainer) {\n            hideLegend = false;\n          } else if (isMediumHeightContainer && containerHeight > 250) {\n            // 中等尺寸，隐藏右侧 [ #tongtong 增加 如果小于250时是小尺寸 ]\n            hideLegend = false;\n          } else {\n            hideLegend = true;\n          }\n        }\n      }\n\n      // 只隐藏左侧图例\n      if (hideLegend && !hideDetail) {\n        arcLegendContent.style('display', 'none');\n        if (legendPosition === 'left' || legendPosition === 'right') {\n          pieSvgContainer.attr('style', 'width:60%;height:100%;flex: 0 1 60%;z-index:1;overflow:visible;max-width: 60%');\n          arcDetailContent.attr('style', 'width:30%;padding:10px;overflow:visible; height: 100%; flex: 0 1 30%;display: flex;align-items: center');\n        }\n      }\n\n      // 只隐藏右侧详情\n      if (!hideLegend && hideDetail) {\n        arcDetailContent.style('display', 'none');\n        if (legendPosition === 'left' || legendPosition === 'right') {\n          arcLegendContent.attr('style', 'width:30%;padding:10px;overflow:visible; height: 100%; flex: 0 1 30%;display: flex;align-items: center');\n          pieSvgContainer.attr('style', 'width:60%;height:100%;flex: 0 1 60%;z-index:1;overflow:visible;max-width: 60%');\n        }\n      }\n\n      // 两侧内容都隐藏\n      if (hideLegend && hideDetail) {\n        arcLegendContent.style('display', 'none');\n        arcDetailContent.style('display', 'none');\n        pieSvgContainer.attr('style', 'width:100%;height:100%;flex: 1 1 80%;z-index:1;overflow:visible;max-width: 100%');\n      }\n\n      // 图例宽度自适应\n      if (chartConfigures.pie_flex_flag) {\n        // 左侧图例自适应宽度\n        pieInfoLayer.style('justify-content', 'flex-start');\n        if (legendPosition === 'left' || legendPosition === 'right') {\n          arcLegendContent.style('width', 'auto').style('flex', '0 0 auto');\n        } else {\n          arcLegendContent.style('height', 'auto').style('flex', '0 0 auto');\n        }\n\n        // 因为宽度是自适应，所以首先添加图例列表内容。\n        (() => {\n          let arcListDom = document.createElement(\"ul\"),\n            innerStr = \"\";\n          arcListDom.className = \"pie-arc-list\";\n          let labelStyle = \"\";\n          // 如果字体小于正常浏览器显示字体，则使用transform:scale的方式缩小字体\n          if (chartFontSize < 10) {\n            labelStyle = 'transform:scale(' + chartFontSize / 10 + ');transform-origin:0 0;';\n          }\n          innerStr = createInnerStr(chartRows, labelStyle);\n          arcListDom.innerHTML = innerStr;\n\n          // 在左侧容器中添加图例列表内容\n          arcLegendContent.html(arcListDom.outerHTML);\n        })();\n        if (!hideLegend && hideDetail) {\n          // if (isMediumContainer){\n          //     pieSvgContainer.style('max-width', '45%').style('flex', '1 1 60%')\n          // }\n\n          if (legendPosition === 'left' || legendPosition === 'right') {\n            arcLegendContent.style('max-width', '50%');\n            const arcLegendContentWidth = arcLegendContent.node().offsetWidth + gap;\n            const arcLegendContentPercent = arcLegendContentWidth / containerWidth;\n            const restPercent = (1 - arcLegendContentPercent) * 100;\n            pieSvgContainer.style('flex', '1 1 60%').style('max-width', restPercent + '%');\n          } else {\n            arcLegendContent.style('max-height', '50%');\n            const arcLegendContentHeight = arcLegendContent.node().offsetHeight + gap;\n            const arcLegendContentPercent = arcLegendContentHeight / containerHeight;\n            const restPercent = (1 - arcLegendContentPercent) * 100;\n            pieSvgContainer.style('flex', '1 0 50%').style('max-height', restPercent + '%');\n            pieSvgContainer.style('flex', '1 0 50%').style('max-height', '100%');\n          }\n        }\n      }\n      return {\n        svg: pieSvgContainer,\n        hideLegend,\n        hideDetail\n      };\n    })();\n\n    // 当饼状图中左右两个均有,则图形区域占整个宽度的40%\n    if (!chartConfigures.pie_hide_detail && !chartConfigures.pie_hide_legend) {\n      // 左侧图例和右侧详情都存在\n      arcListPercent = 0.3;\n    } else if (!chartConfigures.pie_hide_legend) {\n      // 只有左侧图例\n      // 如果只有左侧列表,则图形区域只占整个宽度的50% ;\n      arcListPercent = 0.5;\n    } else {\n      radius = Math.min(container.offsetWidth, container.offsetHeight - theLabelHeight - labelDistanceWithCircle * 2) * 0.5;\n    }\n    const width = svg.node().clientWidth;\n    const height = svg.node().clientHeight;\n    const svgRect = {\n      width,\n      height\n    };\n    radius = Math.min(svgRect.width, svgRect.height) * 0.5;\n\n    // 完全自适应容器100%的半径\n    let fullRadius;\n    if (enableCarouselAnimation) {\n      fullRadius = Math.min(svgRect.width, svgRect.height) * 0.5 * 0.8;\n    } else {\n      fullRadius = Math.min(svgRect.width, svgRect.height) * 0.5;\n    }\n\n    // 根据配置缩放后的半径\n    const outerRadius = fullRadius * radiusPercentConfig;\n    const innerRadius = outerRadius * startRadiusPercent;\n\n    // 将图形半径调整为配置的半径占自适应半径的百分比\n    radius = radius * radiusPercentConfig;\n\n    // 生成饼图文字标签的内容\n    function generateLabelTextFunc(d, regex) {\n      if (!d) return false;\n      if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n        let theLabelTextConfig = regex || chartConfigures.label_text_regex || '';\n        if (!theLabelTextConfig.trim()) theLabelTextConfig = \"%_VALUE\";\n        let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n        return self.chartConfigureAdvanced.translateMacro(theLabelTextConfig, {\n          type: 'label',\n          xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n          xLabelIndex: theXLabelMapping && theXLabelMapping.index,\n          xLabelTotal: theXLabelMapping && theXLabelMapping.total,\n          xLabelNumber: theXLabelMapping && theXLabelMapping.number,\n          yValue: d['y' + 0],\n          yAxis: curYAxis[0],\n          legend: null,\n          legendIndex: 0,\n          legendTotal: translateData.datas.legendTotal0,\n          rowData: d.rowData,\n          headers: options.datas && options.datas.headers\n        });\n      }\n      return _DataFocusMethod.formatData(d['y' + 0], curYAxis[0]);\n    }\n    if (roseMode === 'radius' || roseMode === 'area') {\n      // 计算每个弧的outer占最大值的百分比\n      const maxYValue = chartRows.reduce((max, curRow) => Math.max(max, curRow.y0), Number.NEGATIVE_INFINITY);\n      for (const row of chartRows) {\n        row.percentOfMax = row.y0 / maxYValue;\n      }\n    }\n    function doDetailHighlight(row) {\n      const curArcData = row;\n      const arcHoverDetail = chartContainer.select('.pie-hover-detail');\n      const divider = arcHoverDetail.select('.divider');\n      divider.transition().ease(_pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].easeCubicOut).duration(300).style('transform', 'scaleX(0)').transition().duration(800).style('transform', 'scaleX(1)');\n      const xColor = arcHoverDetail.select('.hover-arc-x .arc-color');\n      xColor.transition().delay(300).duration(200).style('background', () => {\n        if (curArcData.x0 === \"vacuum\") return \"rgba(198,200,200,0.3)\";\n        return curArcData.color;\n      });\n      const xText = arcHoverDetail.select('.hover-arc-x .arc-text');\n      xText.transition().duration(300).textTween(function () {\n        const previousText = this.innerText;\n        return t => {\n          const chartCount = Math.round((1 - t) * previousText.length);\n          return previousText.slice(0, chartCount);\n        };\n      }).transition().duration(500).textTween(() => {\n        let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[curArcData['x0']];\n        const targetXString = _DataFocusMethod.translateIllegalStr(theXLabelMapping && theXLabelMapping.text || curArcData['x0'], {\n          showUnicodeFlag: true\n        });\n        return t => {\n          const chartCount = Math.round(t * targetXString.length);\n          return targetXString.slice(0, chartCount);\n        };\n      });\n      const yRawValue = arcHoverDetail.select('.hover-arc-y .val-ori');\n      yRawValue.transition().duration(300).style('opacity', 0).transition().duration(800).style('opacity', 1).textTween(() => {\n        const yAxis = curYAxis[0];\n        const targetVal = curArcData['y' + 0];\n        let i;\n        if (Number.isInteger(targetVal)) {\n          i = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].interpolateRound(targetVal * 0.8, targetVal);\n        } else {\n          i = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].interpolateNumber(targetVal * 0.8, targetVal);\n        }\n        return t => {\n          return _DataFocusMethod.formatData(i(t), {\n            decimalPoint: yAxis.decimalPoint,\n            formatType: yAxis.formatType,\n            currencyType: yAxis.currencyType,\n            numberType: yAxis.numberType,\n            percentType: yAxis.percentType\n          });\n        };\n      });\n      const yPercentValue = arcHoverDetail.select('.hover-arc-y .val-percent');\n      yPercentValue.transition().duration(300).style('opacity', 0).transition().duration(800).style('opacity', 1).textTween(() => {\n        const targetVal = curArcData['percent'];\n        const i = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].interpolate(targetVal * 0.8, targetVal);\n        return t => ' / ' + i(t).toFixed(1) + '%';\n      });\n    }\n\n    // 绘制中间的Svg饼图\n    const pieData = (() => {\n      const pieSvgContainer = svg;\n      const getPieGroupTranslate = () => {\n        const width = pieSvgContainer.node().clientWidth;\n        const height = pieSvgContainer.node().clientHeight;\n        return {\n          x: width / 2,\n          y: height / 2\n        };\n      };\n      const pieChartGroupTranslate = getPieGroupTranslate();\n      const pieArcContainer = pieSvgContainer.selectAll('g.arc-container').data([true]).join(enter => enter.append('g').classed('arc-container', true).classed('chartset', true).attr(\"transform\", `translate(${pieChartGroupTranslate.x}, ${pieChartGroupTranslate.y})`).on('mouseleave.hideHoverDetail', function () {\n        // 鼠标移出饼图时隐藏右侧悬浮详情\n        if (enableCarouselAnimation) return;\n        chartContainer.select('.pie-hover-detail').style('display', 'none');\n      }), update => update.attr(\"transform\", `translate(${pieChartGroupTranslate.x}, ${pieChartGroupTranslate.y})`), exit => exit.remove());\n      let pieValueAccessor;\n      if (roseMode === 'area') {\n        // 面积模式下，所有弧的角度范围相同\n        pieValueAccessor = d => 1;\n      } else {\n        pieValueAccessor = d => Math.abs(d.y0);\n      }\n      const pieGenerator = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pie().sort(null).value(pieValueAccessor).startAngle(0).endAngle(Math.PI * 2).padAngle(padAngle);\n      const arcGenerator = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].arc().innerRadius(innerRadius).outerRadius(outerRadius).cornerRadius(cornerRadius).padAngle(padAngle);\n      const pieData = pieGenerator(chartRows);\n\n      // 绘制每个圆弧group\n      const pieArcGroups = pieArcContainer.selectAll('g.arc-item-group').data(pieData).join(enter => enter.append('g').classed('arc-item-group', true).classed('pie-arc', true).attr('transform', 'scale(1)').attr(\"data-drilldown-flag\", function (d) {\n        const {\n          data: curRow\n        } = d;\n        return !!curRow.otherRows;\n      }), update => update.attr('transform', 'scale(1)').attr(\"data-drilldown-flag\", function (d) {\n        const {\n          data: curRow\n        } = d;\n        return !!curRow.otherRows;\n      }), exit => exit.remove());\n      function setForArcAttrColor(arc, arcIndex) {\n        arc.attr('data-color', function (d) {\n          const {\n            data: curRow\n          } = d;\n          let color;\n          if (curRow.x0 === 'vacuum') {\n            // 全为空数据时的颜色\n            color = \"rgba(198, 200, 200, 0.3)\";\n          } else {\n            color = curRow.color || conf.colors(arcIndex);\n          }\n          return color;\n        });\n      }\n      // 绘制弧\n      function setForArc(arc, arcIndex) {\n        arc.attr(\"alarm-status\", function (d) {\n          const {\n            data: curRow\n          } = d;\n          return curRow.alarm0;\n        }).attr('stroke-width', '2').attr(\"stroke\", \"none\").attr('data-pie-value', function (d) {\n          const {\n            data: curRow\n          } = d;\n          return encodeURIComponent(curRow.x0);\n        }).attr('data-arc-index', arcIndex).attr(\"fill\", function (d) {\n          return _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this).attr('data-color');\n        });\n        // .attr(\"idx\", function (d, i) {\n        //     return \"circle\" + i;\n        // })\n      }\n\n      // 饼图动画\n      function tweenPie(b, prevArcParam) {\n        // 将每个弧的开始角度和结束角度都设置为0\n        // 然后向他们原始的角度（b）开始过渡\n        let startAngle, endAngle;\n        if (!prevArcParam) {\n          if (isChartExisted) {\n            // 新增弧时，从二分之一处展开\n            startAngle = (b.startAngle + b.endAngle) / 2;\n            endAngle = (b.startAngle + b.endAngle) / 2;\n          } else {\n            // 首次绘图，所有圆弧从0 bounce 到目的地址\n            startAngle = 0;\n            endAngle = 0;\n          }\n        } else {\n          startAngle = prevArcParam.startAngle;\n          endAngle = prevArcParam.endAngle;\n        }\n        const start = {\n          startAngle: startAngle,\n          endAngle: endAngle\n        };\n        ;\n        let i = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].interpolate(start, b);\n        return function (t) {\n          if (roseMode === 'radius' || roseMode === 'area') {\n            arcGenerator.outerRadius(b.endRadius);\n          }\n          return arcGenerator(i(t));\n        };\n      }\n\n      // 轮播定时器动画\n      const {\n        pauseTimer,\n        setTimer\n      } = (() => {\n        // 当前高亮的arc[ 从最后一个开始高亮 ]\n        let highlightArcIndex = chartRows.length - 1;\n        let previousRotate = 0; // 当前已经旋转的角度\n        const chartContainer = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(conf.container);\n        const pieGroup = chartContainer.select('.chartset');\n        function doHighlight() {\n          const curArc = pieData[highlightArcIndex];\n          const curArcCenterAngle = (curArc.startAngle + curArc.endAngle) / 2;\n          // 当前弧线中线的角度\n          const degreeAngle = curArcCenterAngle * 180 / Math.PI;\n          // 弧线中线与右对齐的差值角度\n          const diffDegreeAngle = degreeAngle < 90 ? 90 - degreeAngle : 360 + 90 - degreeAngle;\n          // 中间动画\n          (() => {\n            // 整体旋转\n            const pieChartGroupTranslate = getPieGroupTranslate();\n            pieGroup.transition('carousel-rotate').ease(_pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].easeCubicOut).duration(300).attr('transform', `translate(${pieChartGroupTranslate.x}, ${pieChartGroupTranslate.y}) rotate(${diffDegreeAngle})`);\n\n            // 将高亮的圆弧⌒放大\n            const pieArcGroup = pieGroup.selectAll('.arc-item-group').transition().delay((d, i) => i === highlightArcIndex ? 300 : 0).ease(_pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].easeCubicOut).duration((d, i) => i === highlightArcIndex ? 200 : 80).attr('transform', (d, i) => {\n              return i === highlightArcIndex ? 'scale(1.15)' : '';\n            });\n            // 将圆弧下的标签位置摆正\n            pieArcGroup.each(function (d, i) {\n              const textLabel = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this).select('text.labels');\n              if (!textLabel.empty()) {\n                // 此处不需要要过渡动画，否则初始化时标签会乱飞\n                textLabel\n                // .transition()\n                // .ease(d3v7.easeCubicOut)\n                // .duration(300)\n                .attr('transform', function () {\n                  const curText = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n                  const originalTranslateX = curText.attr('data-x');\n                  const originalTranslateY = curText.attr('data-y');\n                  const originalRotate = curText.attr('data-rotate');\n                  if (i === highlightArcIndex) {\n                    return `translate(${originalTranslateX},${originalTranslateY}) rotate(${-diffDegreeAngle})`;\n                  } else {\n                    let theNewRotate = parseFloat(originalRotate);\n                    if (theNewRotate + diffDegreeAngle > 90 && theNewRotate + diffDegreeAngle < 270) {\n                      theNewRotate -= 180;\n                    }\n                    return `translate(${originalTranslateX},${originalTranslateY}) rotate(${theNewRotate})`;\n                  }\n                });\n              }\n            });\n          })();\n\n          // 图例动画\n          (() => {\n            const legendContentContainer = chartContainer.select('.pie-legend-content');\n            const legendList = legendContentContainer.select('.pie-arc-list');\n            if (legendList.empty()) return;\n            const legendItem = legendList.selectAll('li');\n            if (legendItem.empty()) return;\n            setTimeout(() => {\n              legendItem.classed('filter-grey', function () {\n                return _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this).attr('pieValue') !== encodeURIComponent(curArc.data.x0);\n              });\n            }, 300);\n          })();\n\n          // 详情动画\n          doDetailHighlight(chartRows[highlightArcIndex]);\n          highlightArcIndex--;\n          previousRotate = diffDegreeAngle;\n          if (highlightArcIndex === -1) {\n            highlightArcIndex = chartRows.length - 1;\n          }\n        }\n        function setTimer() {\n          pauseTimer();\n          conf.timer = setInterval(() => doHighlight(), 3000);\n        }\n        function pauseTimer() {\n          clearInterval(conf.timer);\n        }\n        if (enableCarouselAnimation) {\n          pauseTimer();\n          setTimeout(doHighlight, 0);\n          setTimer();\n          pieGroup.on('mouseenter.timer', pauseTimer).on('mouseleave.timer', setTimer);\n        } else {\n          pauseTimer();\n        }\n        return {\n          setTimer,\n          pauseTimer\n        };\n      })();\n\n      // 鼠标移入弧\n      function mouseoverAndTouchstart(event, d) {\n        // 如果正在开启轮播动画，则不允许鼠标交互\n        if (enableCarouselAnimation) {\n          pauseTimer();\n        }\n        if (!conf.mouseViewAction) return;\n        const jqueryObj = $(this);\n        chartContainer.selectAll(\"path.arcs\").attr(\"fill\", \"rgba(198,200,200,0.3)\");\n        chartContainer.selectAll(\".labels\").attr(\"fill\", \"rgba(198,200,200,0.3)\");\n        const currentArc = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n        const arcIndex = parseInt(currentArc.attr('data-arc-index'));\n        const {\n          data: curRow\n        } = d;\n        if (curRow.x0 === \"vacuum\") return;\n        currentArc.attr(\"fill\", function () {\n          if (curRow.x0 === 'vacuum') {\n            // 全为空数据时的颜色\n            return \"rgba(198, 200, 200, 0.3)\";\n          } else {\n            return curRow.color || conf.colors(arcIndex);\n          }\n        });\n        jqueryObj.siblings(\"text\").attr(\"fill\", \"\").css(\"stroke\", \"inherit\");\n\n        // 鼠标移入”其他“的弧，展开图例列表中的其他详细列表。\n        // 如果高亮事件触发自图例，则不展开其他详细列表。\n        if (!hideLegend && event.detail !== 'fromLegend') {\n          if (curRow.otherRows) {\n            $(container).find(\".pie-arc-list\").hide();\n            if (legendPosition === 'left' || legendPosition === 'right') {\n              $(container).find(\".pie-others-list\")[0].style.display = 'block';\n            } else {\n              $(container).find(\".pie-others-list\")[0].style.display = 'flex';\n            }\n          }\n        }\n        if (!hideDetail) {\n          chartContainer.select('.pie-hover-detail').style('display', 'block');\n          doDetailHighlight(curRow);\n        }\n        const hoverTextContent = generateLabelTextFunc(curRow, \"%_NAME : %_PERCENT_OF_TOTAL\");\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positionChartPrompt(event, hoverTextContent);\n      }\n\n      // 鼠标移出弧\n      function mouseoutArc() {\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n        if (enableCarouselAnimation) {\n          setTimer();\n        }\n        if (!conf.mouseViewAction) return;\n        const pieArc = chartContainer.selectAll(\"path.arcs\");\n        // 恢复圆弧的颜色\n        pieArc.each(function () {\n          const arc = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n          arc.attr(\"fill\", function () {\n            return _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this).attr('data-color');\n          });\n        });\n        if (!chartConfigures.pie_hide_legend) {\n          $(container).find(\".pie-arc-list\").show();\n          $(container).find(\".pie-others-list\").hide();\n        }\n        if (!chartConfigures.pie_hide_detail) {} else {\n          let obj = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this),\n            promptWin = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(\".df-chart-prompt-win\");\n          obj.attr(\"transform\", \"\");\n          svg.selectAll(\"use\").remove();\n          promptWin.html(\"\").style(\"display\", \"none\");\n        }\n      }\n      function mousedownArc(event, arcData) {\n        const {\n          data: d\n        } = arcData;\n        let theDataColumnIdx = [];\n        chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n          theDataColumnIdx.push(xAxis.idx);\n        });\n        if (chartAxis && chartAxis.curLegend) {\n          theDataColumnIdx.push(chartAxis.curLegend.idx);\n        }\n        typeof options.mousedownCallback === 'function' && options.mousedownCallback.call(this, event, {\n          dataColumnIndex: theDataColumnIdx,\n          dataRowIndex: d.rowIndex,\n          theHideCategoryValue: d.x0\n        });\n      }\n      pieArcGroups.each(function (arcData, arcIndex) {\n        const currentPieArcGroup = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n        function generateArcParams(d) {\n          const {\n            data: curRow\n          } = d;\n          let arcParam;\n          if (curRow.x0 === 'vaccum') {\n            arcParam = {\n              startAngle: 0,\n              endAngle: Math.PI * 2,\n              startRadius: innerRadius,\n              endRadius: outerRadius\n            };\n          } else {\n            arcParam = {\n              startAngle: d.startAngle,\n              endAngle: d.endAngle,\n              startRadius: innerRadius,\n              endRadius: roseMode === 'radius' || roseMode === 'area' ? curRow.percentOfMax * outerRadius : outerRadius\n            };\n          }\n          return arcParam;\n        }\n        currentPieArcGroup.selectAll('path.arcs').data([arcData]).join(enter => enter.append('path').classed('arcs', true).call(setForArcAttrColor, arcIndex).call(setForArc, arcIndex).on('mouseover', null).on('mouseout', null).on('mousedown', null).on(\"mouseover\", mouseoverAndTouchstart).on(\"mouseout\", mouseoutArc).on('mousedown', mousedownArc).transition().ease(isChartExisted ? _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].easeCubicOut : _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].easeBounceOut).duration(isChartExisted ? 300 : 1500).attrTween('d', function (d) {\n          return tweenPie(generateArcParams(d));\n        }).attr('data-previous-arc', function (d) {\n          return JSON.stringify(generateArcParams(d));\n        }), update => update.on('mouseover', null).on('mouseout', null).on('mousedown', null).on(\"mouseover\", mouseoverAndTouchstart).on(\"mouseout\", mouseoutArc).on('mousedown', mousedownArc).call(setForArcAttrColor, arcIndex).transition().duration(300).call(setForArc, arcIndex).attrTween('d', function (d) {\n          const prevArcParam = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this).attr('data-previous-arc');\n          return tweenPie(generateArcParams(d), JSON.parse(prevArcParam));\n        }).attr('data-previous-arc', function (d) {\n          return JSON.stringify(generateArcParams(d));\n        }), exit => exit.remove());\n      });\n\n      // 绘制文字标签\n      function setForLabel(text) {\n        text.attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').attr('fill', 'none').attr('transform', function (d) {\n          // 圆弧的中心点\n          const {\n            data: curRow\n          } = d;\n          const currentOutRadius = roseMode === 'radius' || roseMode === 'area' ? curRow.percentOfMax * outerRadius : outerRadius;\n          const arcGeneratorForPositionLabel = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].arc().startAngle(function (d) {\n            return d.startAngle;\n          }).endAngle(function (d) {\n            return d.endAngle;\n          }).innerRadius((innerRadius + currentOutRadius) / 2).outerRadius(currentOutRadius).padAngle(padAngle);\n          let [translateX, translateY] = arcGeneratorForPositionLabel.centroid(d);\n          const centerAngle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n          let rotateNum = centerAngle / (Math.PI * 2) * 360 - 90;\n          if (rotateNum < 0) {\n            translateX += labelFontSize / 3;\n          } else if (rotateNum > 0 && rotateNum < 45) {\n            translateX += labelFontSize / 3;\n            translateY += labelFontSize / 3;\n          } else if (rotateNum > 45 && rotateNum < 90) {\n            translateX -= labelFontSize / 5;\n            translateY += labelFontSize / 3;\n          } else if (rotateNum >= 90 && rotateNum < 135) {\n            translateX += labelFontSize / 3;\n          } else if (rotateNum >= 135 && rotateNum < 180) {\n            translateY += labelFontSize / 3;\n          } else if (rotateNum >= 180) {\n            translateX -= labelFontSize / 5;\n          }\n          // 所以角度是 - 90 ~ 90\n          if (rotateNum > 90) {\n            rotateNum = rotateNum - 180;\n          }\n          // 当前饼是360度时的时候，不再旋转了\n          if (rotateNum === 90 && !d.startAngle) {\n            translateY = translateX;\n            translateX = 0;\n            rotateNum = 0;\n          }\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this).attr('data-x', translateX).attr('data-y', translateY).attr('data-rotate', rotateNum);\n          return `translate(${translateX} ${translateY}) rotate(${rotateNum})`;\n        }).style('pointer-events', 'none').text(d => {\n          const {\n            data: curRow\n          } = d;\n          const currentOutRadius = roseMode === 'radius' || roseMode === 'area' ? curRow.percentOfMax * outerRadius : outerRadius;\n          const checkIsNotOverlap = () => {\n            if (!_DataFocusMethod.isPureNumber(d.startAngle) || !_DataFocusMethod.isPureNumber(d.endAngle)) return false;\n            let overlapFlag = false;\n\n            // 通过饼图的所占角度份额及宽度标签的宽度来显示标签\n            const posA = d.endAngle - d.startAngle;\n            const theRadius = currentOutRadius - innerRadius;\n            if (posA < Math.PI / 2 && Math.abs(theRadius * Math.sin(posA)) < chartFontSize * 2.5) {\n              overlapFlag = true;\n            }\n            if (allowOverlap || !overlapFlag) {\n              return true;\n            }\n          };\n          const isNotOverlap = checkIsNotOverlap();\n          if (!isNotOverlap) return '';\n          if (curRow.x0 === \"vacuum\" || curRow.y0 === 0) {\n            return \"\";\n          } else {\n            return generateLabelTextFunc(curRow);\n          }\n        });\n\n        // 处理换行\n        // 文字内容中如果有\\n换行，则使用 tspan\n        text.each(function () {\n          const textItem = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n          const textContextArr = textItem.text().split(\"\\n\").map(text => text.trim()).filter(Boolean);\n          if (textContextArr.length <= 1) return;\n\n          // 清空原先的所有文字内容\n          textItem.text(\"\");\n          const offset = (chartFontSize + 2) / 2 - textContextArr.length * (chartFontSize + 2) / 2;\n          textItem.selectAll('tspan').data(textContextArr).join(enter => enter.append('tspan').attr('x', 0).attr('y', (d, i) => i * (chartFontSize + 2) + offset).text(d => d), update => update.text(d => d), exit => exit.remove());\n        });\n      }\n      const pieTexts = pieArcGroups.selectAll('text').data(showLabel ? parentData => [parentData] : []).join(enter => enter.append('text').classed('labels', true).call(setForLabel), update => update.call(setForLabel), exit => exit.transition().duration(300).attr('opacity', 0).remove());\n      return pieData;\n    })();\n\n    // 绘制右侧的详情\n    (() => {\n      let self = this,\n        chartAxis = conf.chartAxis,\n        headers = conf.datas.headers,\n        pieDetailTitle = conf.curLanguage && conf.curLanguage('total') || \"Total\",\n        peiDetailAggregationType = \"sum\";\n\n      // 如果隐藏了右侧详情，则不再显示\n      if (!!chartConfigures.pie_hide_detail) return false;\n      if (conf.chartConfigures) {\n        if (conf.chartConfigures.suspend_legend_title) {\n          pieDetailTitle = conf.chartConfigures.suspend_legend_title;\n        }\n        if (conf.chartConfigures.suspend_legend_value) {\n          switch (conf.chartConfigures.suspend_legend_value) {\n            case \"option_suspend_legend_min\":\n              peiDetailAggregationType = \"min\";\n              break;\n            case \"option_suspend_legend_max\":\n              peiDetailAggregationType = \"max\";\n              break;\n            case \"option_suspend_legend_avg\":\n              peiDetailAggregationType = \"average\";\n              break;\n            default:\n              peiDetailAggregationType = \"sum\";\n              break;\n          }\n        }\n      }\n      const yDetails = chartAxis.curYAxis.map(yAxis => {\n        const matchedHeader = headers.find(header => header.col_id === yAxis.col_id);\n        return {\n          id: yAxis.col_id,\n          name: _DataFocusMethod.getTransColumn(conf.language, yAxis.displayName || yAxis.col_name, conf.aggregationFlag ? _DataFocusMethod.addAggregates[peiDetailAggregationType] || 'sum' : '') || '',\n          total: matchedHeader && (matchedHeader.statistics[peiDetailAggregationType] || matchedHeader.statistics.sum) || 0\n        };\n      });\n      const yTotalValueHTML = yDetails.map(yDetail => {\n        const oriTotal = yDetail.total;\n        const total = isNumber(oriTotal) ? parseFloat(oriTotal.toFixed(1)) : oriTotal;\n        const name = _DataFocusMethod.translateIllegalStr(yDetail.name.trim(), {\n          showUnicodeFlag: true\n        });\n        return `<li class=\"total-val\" style=\"font-size: ${chartFontSize + 4}px\"><span>${name}</span> <span title=\"${total}\">${total}</span></li>`;\n      }).join('');\n      const totalTitle = `<li class=\"total\" style=\"font-size: ${chartFontSize + 20}px\">${_DataFocusMethod.translateIllegalStr(pieDetailTitle, {\n        showUnicodeFlag: true\n      })}</li>`;\n      const arcDetailContentContainer = chartContainer.select('.pie-detail-content');\n      // 初始化 pie detail + total 信息\n      arcDetailContentContainer.html(`<div class=\"pie-arc-detail\"><ul class=\"pie-total\">${totalTitle} ${yTotalValueHTML}</ul></div>`);\n      if (legendPosition === 'top' || legendPosition === 'bottom') {\n        const detail = arcDetailContentContainer.select('.pie-arc-detail');\n        detail.style('display', 'flex').style('flex-direction', 'column').style('justify-content', 'center').style('align-items', 'center');\n      }\n      const arcHoverDom = document.createElement(\"ul\");\n      arcHoverDom.className = \"pie-hover-detail\";\n      if (!enableCarouselAnimation) arcHoverDom.style.display = 'none';\n      const dividerContent = `<div class=\"divider\"></div>`;\n      const xColor = `<span class=\"arc-color\"></span>`;\n      const xText = `<span class=\"arc-text\"> </span>`;\n      const xContent = `<li class=\"hover-arc-x mt5\" style=\"font-size:${chartFontSize + 8}px\">${xColor}${xText}</li>`;\n      // y轴名称\n      const yName = `<span class=\"arc-y-name\" style=\"font-size:${chartFontSize + 4}px\">${_DataFocusMethod.getDisplayOperateColumn(conf.language, curYAxis[0])}</span>`;\n      // y值原始值\n      const yRawValue = `<span class=\"val-ori\"></span>`;\n      // y值占比\n      const yPercentValue = `<span class=\"val-percent\"></span>`;\n      // Y值合并\n      const yValueString = `<div class=\"arc-y-val\" style=\"font-size:${chartFontSize + 8}px\">${yRawValue} ${yPercentValue}</div>`;\n      // Y显示内容\n      const yContent = `<li class=\"hover-arc-y\"><div class=\"arc-y\">${yName}:${yValueString}</div></li>`;\n      arcHoverDom.innerHTML = dividerContent + xContent + yContent;\n      if (legendPosition === 'top' || legendPosition === 'bottom') {\n        // d3v7.select(arcHoverDom).style('flex-direction', 'column');\n        // d3v7.select(arcHoverDom).style('margin-left', '20px').style('margin-top', '0').style('padding-top', '0').style('padding-left', '18px');\n        // d3v7.select(arcHoverDom).select('.divider').style('height','100%').style('width','2px').style('left', '0')\n      }\n      const pieArcDetail = container.querySelector('.pie-arc-detail');\n      pieArcDetail.append(arcHoverDom);\n    })();\n\n    // 绘制左侧的图例\n    (options => {\n      options = options || {};\n      if (!options.svg) return false;\n      if (!_DataFocusMethod.isPureNumber(options.arcListPercent) || !_DataFocusMethod.isPureNumber(options.radiusPercent) || !_DataFocusMethod.isPureNumber(options.radius)) return false;\n      let self = this,\n        chartAxis = conf.chartAxis,\n        curYAxis = chartAxis.curYAxis,\n        pieArcColors = chartAxis.pieArcColors || {},\n        others = conf.curLanguage && conf.curLanguage('chart_pie_others') || \"others\",\n        more = conf.curLanguage && conf.curLanguage('chart_pie_more') || \"more...\",\n        maxSlicesNum = 12,\n        sortDataFlag = true,\n        chartCustomLegend;\n      if (!conf.container) {\n        console.log(\"- 【CHART】画图坐标title时，未找到图标容器\");\n        return;\n      }\n      $(container).find(\".pie-arc-list\").remove();\n      $(container).find(\".pie-others-list\").remove();\n      if (!!chartConfigures.pie_hide_legend) return false;\n      if (conf.chartConfigures) {\n        if (parseInt(conf.chartConfigures.pie_slices_before_others) > 0) {\n          maxSlicesNum = parseInt(conf.chartConfigures.pie_slices_before_others);\n          maxSlicesNum = Math.min(maxSlicesNum, 100);\n        }\n        if (conf.chartConfigures.pie_slices_without_sort) {\n          sortDataFlag = false;\n        }\n\n        // 用户自定义的颜色\n        if (conf.chartConfigures.chart_custom_legend) {\n          chartCustomLegend = conf.chartConfigures.chart_custom_legend;\n        }\n      }\n      (() => {\n        let labelStyle = \"\";\n\n        // 如果字体小于正常浏览器显示字体，则使用transform:scale的方式缩小字体\n        if (chartFontSize < 10) {\n          labelStyle = 'transform:scale(' + chartFontSize / 10 + ');transform-origin:0 0;';\n        }\n\n        // 生成左侧列表\n        if (!chartConfigures.pie_hide_legend) {\n          let arcListDom = document.createElement(\"ul\"),\n            innerStr = \"\";\n          arcListDom.className = \"pie-arc-list\";\n          innerStr = createInnerStr(chartRows, labelStyle);\n          arcListDom.innerHTML = innerStr;\n          if (legendPosition === 'top' || legendPosition === 'bottom') {\n            arcListDom.setAttribute('style', 'display: flex; justify-content: center; flex-wrap: wrap;column-gap:20px;row-gap: 3px;overflow: hidden;margin:0 auto');\n          }\n          arcListDom.style.width = legendWidthPercent + '%';\n\n          // 在左侧容器中添加图例列表内容\n          const legendContentContainer = chartContainer.select('.pie-legend-content');\n          legendContentContainer.html(arcListDom.outerHTML);\n          conf.arcListDom = $(arcListDom);\n          const legendItems = legendContentContainer.selectAll('.legend-item');\n          legendItems.on('mouseenter', null);\n          legendItems.on('mouseenter', function (e) {\n            const legendItem = e.target.closest('.legend-item');\n            if (!legendItem) return;\n            const pieValue = legendItem.getAttribute('pieValue');\n            const matchedArc = chartContainer.select(`path.arcs[data-pie-value='${pieValue}']`);\n            if (!matchedArc) return;\n            matchedArc.dispatch('mouseover', {\n              detail: 'fromLegend'\n            });\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n          });\n          legendItems.on('mouseleave', null);\n          legendItems.on('mouseleave', function (e) {\n            const legendItem = e.target.closest('.legend-item');\n            if (!legendItem) return;\n            const pieValue = legendItem.getAttribute('pieValue');\n            const matchedArc = chartContainer.select(`path.arcs[data-pie-value='${pieValue}']`);\n            if (!matchedArc) return;\n            matchedArc.dispatch('mouseout', {\n              detail: 'fromLegend'\n            });\n            chartContainer.select('g.arc-container').dispatch('mouseleave');\n          });\n        }\n\n        // 生成其他列表\n        const hasOthers = sortedRows.length > maxSlicesNum;\n        if (hasOthers && !chartConfigures.pie_hide_legend) {\n          const otherRows = chartRows[chartRows.length - 1].otherRows;\n          let innerStr = '<p><span class=\"arc-color mr5\" style=\"background: ' + conf.colors(maxSlicesNum) + '\"></span><span class=\"arc-text\">' + others + '</span></p>';\n          const othersListDom = document.createElement(\"ul\");\n          othersListDom.className = \"pie-others-list\";\n          othersListDom.style.display = 'none'; // 初始时不展示，移入\"其他\"arc 时才展示\n\n          if (otherRows.length > maxSlicesNum) {\n            // “其他”的显示条数只取分片数\n            innerStr += createInnerStr(otherRows.slice(0, maxSlicesNum), labelStyle);\n            innerStr += '<li class=\"mt5\" style=\"' + labelStyle + '\">' + more + '</li>';\n          } else {\n            innerStr += createInnerStr(otherRows, labelStyle);\n          }\n          if (legendPosition === 'top' || legendPosition === 'bottom') {\n            othersListDom.setAttribute('style', 'justify-content: center; flex-wrap: wrap;column-gap:20px;row-gap: 3px;overflow: auto;margin: 0 auto;');\n          }\n          othersListDom.style.width = legendWidthPercent + '%';\n          othersListDom.innerHTML = innerStr;\n\n          // 在左侧容器中添加图例列表其他\n          const legendContentContainer = chartContainer.select('.pie-legend-content');\n          legendContentContainer.node().insertAdjacentElement('beforeend', othersListDom);\n          conf.othersListDom = $(othersListDom);\n\n          // 如果配置了自适应接近，给列表增加left\n          if (_DataFocusMethod.isPureNumber(options.relativeOffset) && options.relativeOffset > 0) {\n            let theArcListWidth = conf.othersListDom.outerWidth() + 10;\n            // 计算左侧列表与中间图形的所占区域的空白区域宽度的一半\n            let theLeftOffsetWidth = (conf.width * (options.arcListPercent + options.radiusPercent) - options.radius * 2 - theArcListWidth) / 2;\n\n            // 左侧列表的往中间的偏移值\n            let theLeftValue = theLeftOffsetWidth * options.relativeOffset / 100;\n            conf.othersListDom.css('left', theLeftValue + 'px');\n\n            // 计算图形的往中间的偏移值\n            let theSvgRightValue = (conf.width * options.radiusPercent - options.radius * 2) / 2;\n            options.svg.style('left', theSvgRightValue - theLeftValue + 'px');\n          } else {\n            conf.othersListDom.css('left', '');\n            options.svg.style('left', '');\n          }\n        }\n        if (!chartConfigures.pie_hide_legend) {\n          let flag = !!(conf.width / conf.height > 1.5 && conf.width > 800),\n            flag2 = !!(conf.width / conf.height > 1 || conf.width > 400);\n          let otherPie = $(container).find(\".pie-others-list\");\n          if (!flag && flag2) {\n            $(container).find(\".pie-arc-list\").addClass(\"pie-arc-list-middle\");\n            if (otherPie) {\n              otherPie.addClass(\"pie-arc-list-middle\");\n            }\n          } else {\n            $(container).find(\".pie-arc-list\").removeClass(\"pie-arc-list-middle\");\n            if (otherPie) {\n              otherPie.removeClass(\"pie-arc-list-middle\");\n            }\n          }\n        }\n      })();\n      if (!chartConfigures.pie_hide_legend) {\n        $(container).off(conf.wxFlag ? \"touchstart\" : \"mouseover\", \".pie-arc-list\").on(conf.wxFlag ? \"touchstart\" : \"mouseover\", \".pie-arc-list\", function () {\n          var self = $(this);\n          self.css(\"overflow-y\", \"auto\");\n        }).off(conf.wxFlag ? \"touchend\" : \"mouseout\", \".pie-arc-list\").on(conf.wxFlag ? \"touchend\" : \"mouseout\", \".pie-arc-list\", function () {\n          var self = $(this);\n          self.css(\"overflow-y\", \"hidden\");\n        });\n        pieArcListEvent();\n      }\n    })({\n      svg: svg,\n      arcListFlexFlag: arcListFlexFlag,\n      relativeOffset: relativeOffset,\n      radius: radius,\n      arcListPercent: arcListPercent,\n      radiusPercent: radiusPercent\n    });\n\n    // 绑定交互事件\n    (() => {\n      // 如果饼图环图中有负数，则显示负数提示语\n      if (negativeFlag) {\n        $(container).find(\".neg-warning\").show();\n      } else {\n        $(container).find(\".neg-warning\").hide();\n      }\n    })();\n\n    // 饼图/环图左右列表得选择颜色事件\n    function pieArcListEvent() {\n      if (!conf.action || conf.inPinboard) return;\n      $(container).find(\".pie-arc-list li .arc-color\").each(function () {\n        if (conf.wxFlag) return;\n        var obj = $(this),\n          parent = obj.parent(),\n          theColor = obj.attr('color'),\n          pieValue = parent.attr(\"pieValue\");\n        if (obj.hasClass(\"disable\")) return;\n        if (typeof obj.spectrum === \"function\") {\n          obj.spectrum({\n            color: theColor,\n            allowEmpty: true,\n            showInput: true,\n            containerClassName: \"full-spectrum\",\n            showInitial: true,\n            showPalette: false,\n            showSelectionPalette: false,\n            showAlpha: true,\n            maxPaletteSize: 10,\n            preferredFormat: \"hex\",\n            localStorageKey: \"spectrum.demo\",\n            cancelText: conf.curLanguage && conf.curLanguage('color_picker_cancel_btn') || \"Cancel\",\n            chooseText: conf.curLanguage && conf.curLanguage('color_picker_choose_btn') || \"Choose\",\n            change: function (color) {\n              obj.css(\"background-color\", color);\n              if (pieValue && conf.chartAxis) {\n                if (!conf.chartAxis.pieArcColors) conf.chartAxis.pieArcColors = {};\n                if (color) {\n                  // 因为20210619的时候pieArcColors中保存的是decodeURIComponent的值，所以将原始的值清除 ；\n                  delete conf.chartAxis.pieArcColors[decodeURIComponent(pieValue)];\n\n                  // 因为pieValue存在编码与编码后一致的情况，所以赋值在后面\n                  conf.chartAxis.pieArcColors[pieValue] = color.toString();\n                } else {\n                  delete conf.chartAxis.pieArcColors[pieValue];\n                }\n                self.drawChart(options, conf.chartAxis.pieArcColors);\n              }\n            }\n          });\n        }\n      });\n    }\n  },\n  // [*必填项]图表配置列表，其中的require条件不仅可以使用以下配置项的key，也可以使用drawChart中返回的chartAutoConfigures中的值\n  // drawChart返回的chartAutoConfigures是图形返回给图形配置组件的信息，用于开发者可以控制配置的显示与隐藏\n  /**\r\n   * [\r\n   *      key: 'category_name' ,\r\n   *      title: \"category_display_name_key\" ,\r\n   *      require: \"\" ,\r\n   *      options: [\r\n   *          {\r\n   *              key: 'configure_name'\r\n   *              title: 'configure_display_name_key'\r\n   *              description: 'configure_description_key'\r\n   *              require: '' ,\r\n   *              type: 'theme / select / input ... '\r\n   *          }\r\n   *      ]\r\n   *\r\n   * ]\r\n   *\r\n   * */\n  chartConfigureList: [\n  // 通用 ： 字体大小，动画，最小柱宽，\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"theme\",\n      selection: [\"option_chart_theme_eight\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"],\n      defaultValue: \"option_chart_theme_one\"\n    },\n    //自定义主题颜色\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    // 图形字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      }\n    }, {\n      key: \"hidden_chart_title\",\n      title: \"option_hidden_chart_title\",\n      description: \"option_hidden_chart_title_desc\",\n      type: \"checkbox\"\n    },\n    // 隐藏聚合方式 [ 图例的聚合方式 ]\n    {\n      key: \"hide_operator_label\",\n      title: \"option_hide_operator_label\",\n      description: \"option_hide_operator_label_desc\",\n      type: \"checkbox-prev\"\n    }, {\n      key: \"animation_forbidden\",\n      title: \"option_animation_forbidden\",\n      description: \"option_animation_forbidden_desc\",\n      type: \"checkbox\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }, {\n    key: \"category_animation_config\",\n    title: \"category_animation_config\"\n  },\n  // 饼设置\n  {\n    key: \"category_pie\",\n    title: \"category_pie\",\n    options: [{\n      key: \"pie_chart_mode\",\n      title: \"option_pie_chart_mode\",\n      description: \"option_pie_chart_mode_desc\",\n      type: \"select\",\n      selection: [\"option_pie_chart_mode_normal\", \"option_pie_chart_mode_rose\"]\n    }, {\n      key: \"pie_chart_rose_mode\",\n      title: \"option_pie_chart_rose_mode\",\n      description: \"option_pie_chart_rose_mode_desc\",\n      type: \"select\",\n      require: \"pie_chart_mode=option_pie_chart_mode_rose\",\n      selection: [\"option_pie_chart_rose_mode_radius\", \"option_pie_chart_rose_mode_area\"]\n    },\n    // 饼环图的半径\n    {\n      key: \"pie_radius\",\n      title: \"option_pie_radius\",\n      description: \"option_pie_radius_desc\",\n      type: \"input\",\n      defaultNumber: 100,\n      min: 0,\n      max: 100\n    },\n    // 半径起点\n    {\n      key: \"pie_start_radius\",\n      title: \"option_pie_start_radius\",\n      description: \"option_pie_start_radius_desc\",\n      descriptions: [\"option_pie_start_radius_desc\", \"option_circle_start_radius_desc\"],\n      type: \"input\",\n      min: 0,\n      max: 100,\n      defaultNumber: 0\n    }, {\n      key: \"pie_slices_before_others\",\n      title: \"option_pie_slices_before_others\",\n      description: \"option_pie_slices_before_others_desc\",\n      type: \"input\"\n    }, {\n      key: \"pie_slices_without_sort\",\n      title: \"option_pie_slices_without_sort\",\n      description: \"option_pie_slices_without_sort_desc\",\n      type: \"checkbox\"\n    },\n    // 圆角\n    {\n      key: \"pie_corner_radius\",\n      title: \"option_pie_corner_radius\",\n      description: \"option_pie_corner_radius_desc\",\n      type: \"input\",\n      defaultNumber: 0,\n      min: 0,\n      max: 30\n    },\n    // 间距角度\n    {\n      key: \"pie_pad_angle\",\n      title: \"option_pie_pad_angle\",\n      description: \"option_pie_pad_angle_desc\",\n      type: \"input\",\n      defaultNumber: 0,\n      min: 0,\n      max: 0.1,\n      step: 0.01\n    }]\n  },\n  // 布局设置\n  {\n    key: \"category_layout\",\n    title: \"category_layout\",\n    options: [\n    // 隐藏左侧图例\n    {\n      key: \"pie_hide_legend\",\n      title: \"option_pie_hide_legend\",\n      description: \"option_pie_hide_legend_desc\",\n      type: \"checkbox\"\n    },\n    // 隐藏右侧信息\n    {\n      key: \"pie_hide_detail\",\n      title: \"option_pie_hide_detail\",\n      description: \"option_pie_hide_detail_desc\",\n      type: \"checkbox\"\n    },\n    // 饼图内部各容器的间隔\n    {\n      key: 'pie_container_gap',\n      title: 'option_pie_container_gap',\n      description: \"option_pie_container_gap_desc\",\n      type: 'input',\n      defaultNumber: 10,\n      min: 0,\n      max: 100,\n      withoutSlider: true\n    },\n    // 图例占据自适应宽度的百分比\n    {\n      key: 'pie_legend_width',\n      title: 'option_pie_legend_width',\n      description: \"option_pie_legend_width_desc\",\n      type: 'input',\n      defaultNumber: 100,\n      min: 0,\n      max: 100,\n      withoutSlider: true,\n      require: '!pie_flex_flag'\n    },\n    // 图例自适应大小\n    {\n      key: \"pie_flex_flag\",\n      title: \"option_pie_flex_flag\",\n      description: \"option_pie_flex_flag_desc\",\n      type: \"checkbox\"\n    },\n    // 图例位置\n    {\n      key: \"legend_position\",\n      title: \"option_legend_position\",\n      description: \"option_legend_position_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_position_left\", \"option_position_right\", \"option_position_top\", \"option_position_bottom\"]\n    }]\n  },\n  // 悬浮图例设置[ 饼图及环图右侧悬浮文本配置 ]\n  // 轮播配置\n  {\n    key: \"category_carousel_config\",\n    title: \"category_carousel_config\",\n    options: [\n    // 开启轮播动画\n    {\n      key: \"enable_carousel_animation\",\n      title: \"option_enable_carousel_animation\",\n      description: \"option_enable_carousel_animation_desc\",\n      type: \"checkbox\"\n    }\n    // 动画效果\n    // {\n    //     key: \"legend_shape_type\",\n    //     title: \"option_legend_shape_type\",\n    //     charts: [\n    //         _DataFocusMethod.chartTypes.pie,\n    //     ],\n    //     description: \"option_legend_shape_type_desc\",\n    //     type: \"select\",\n    //     selection: [\n    //         \"option_default_value\",\n    //         \"option_legend_shape_type_circle\",\n    //         \"option_legend_shape_type_three\",\n    //         \"option_legend_shape_type_four\",\n    //         \"option_legend_shape_type_rect\",\n    //         \"option_legend_shape_type_five\",\n    //         \"option_legend_shape_type_diamond\",\n    //         \"option_legend_shape_type_loop\"\n    //     ],\n    //     require: \"!enable_carousel_animation\"\n    // },\n    ]\n  }, {\n    key: \"category_suspend_legend\",\n    title: \"category_suspend_legend\",\n    options: [{\n      key: \"suspend_legend_title\",\n      title: \"option_suspend_legend_title\",\n      description: \"option_suspend_legend_title_desc\",\n      type: \"text\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    }, {\n      key: \"suspend_legend_value\",\n      title: \"option_suspend_legend_value\",\n      description: \"option_suspend_legend_value_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_suspend_legend_total\", \"option_suspend_legend_min\", \"option_suspend_legend_max\", \"option_suspend_legend_avg\"]\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    // 是否显示数据标签\n    {\n      key: \"label_text_visible\",\n      title: \"option_label_text_visible\",\n      description: \"option_label_text_visible_desc\",\n      type: 'checkbox-prev'\n    },\n    // 数据标签的内容\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      require: 'label_text_visible',\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    // 是否允许标签重叠\n    {\n      key: \"label_text_allow_overlap\",\n      title: \"option_label_text_allow_overlap\",\n      description: \"option_label_text_allow_overlap_desc\",\n      type: \"checkbox\",\n      require: 'label_text_visible'\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  /**\r\n   * 图形配置的辅助对象：当前图形定义的宏列表 及 宏 解析方法 ； 适配之前图形配置值的方法 ；\r\n   *\r\n   * 当前图形提供的宏列表[ 宏名的命名规则： 开头是%_ 用_连接的大写字符字符串 ]\r\n   * 供自定义数据标签 及 悬浮文本使用，可以让用户配置显示内容\r\n   * 键值对  MacroName : MacroDisplayNameKey\r\n   * {\r\n   *     [Array]chartMacroList: [{key , nameKey , descriptionKey}] ,  供用户配置的自定义宏列表\r\n   *     [Func]translateMacro                                         解析用使用宏配置的字符串\r\n   *     [Func]compatibleHistoryConfigure                             适配之前的配置为最新的配置\r\n   *\r\n   * }\r\n   * */\n  chartConfigureAdvanced: {\n    // 根据宏配置列表，已足够外部组件将 %_NAME:%_VALUE 翻译成 [属性]：[值] 显示给用户\n    // 如果当前图形支持换行的宏，则输入时允许输入换行符 ； 否则编辑时也不支持换行符 ；\n    chartMacroList: [{\n      key: '%_NAME',\n      nameKey: '%_NAME',\n      descriptionKey: '%_NAME_desc'\n    }, {\n      key: '%_VALUE',\n      nameKey: '%_VALUE',\n      descriptionKey: '%_VALUE_desc'\n    }, {\n      key: '%_PERCENT_OF_TOTAL',\n      nameKey: '%_PERCENT_OF_TOTAL',\n      descriptionKey: '%_PERCENT_OF_TOTAL_desc'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR',\n      descriptionKey: '%_BR_desc'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type        -\r\n     *\r\n     *              xLabel       -   图形单元对应的属性值 用于实现%_NAME %_CATEGORY_NAME\r\n     *              xLabelIndex  -   图形单元对应的属性索引，用于实现 %_CATEGORY_NUMBER\r\n     *              xLabelTotal  -   图形单元对应的属性上所有值的总和用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              xLabelNumber -   图形单元对应的属性上所有值的个数用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              yValue       -   图形单元对应的值 用于实现 %_VALUE\r\n     *              yAxis        -   图形单元对应的值列 用于实现 %_VALUE_NAME  %_SERIES_NAME\r\n     *              legend       -   图形单元对应的图例名(为空时说明是多Y轴) 用于实现 %_SERIES_NAME\r\n     *              legendIndex  -   图形单元对应的图例索引 用于实现 %_SERIES_NUMBER\r\n     *              legendTotal  -   图形单元对应的图例上所有值的总和,用于实现 %_PERCENT_OF_TOTAL\r\n     *              rowData -  图形单元对应的一整行数据 用于实现%_COLUMN_N的宏\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case \"%_X_VALUE_NAME\":\n            if (options.xAxis) {\n              theMatchedTextValue += options.xAxis.displayName || options.xAxis.col_name || '';\n            }\n            break;\n          case \"%_X_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.xValue, options.xAxis) || '';\n            break;\n          case \"%_Y_VALUE_NAME\":\n            if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_Y_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.yValue, options.yAxis) || '';\n            break;\n          case \"%_NAME\":\n          case \"%_CATEGORY_NAME\":\n            theMatchedTextValue += options.xLabel || _DataFocusMethod.formatData(options.xValue, options.xAxis) || '';\n            break;\n          case \"%_SERIES_NAME\":\n            theMatchedTextValue += options.legend || '';\n            break;\n          case \"%_SERIES_NUMBER\":\n            theMatchedTextValue += options.legendIndex || '';\n            break;\n          case \"%_VALUE_NAME\":\n            if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.yValue, options.yAxis) || '';\n            break;\n          case \"%_CATEGORY_TOTAL\":\n            theMatchedTextValue += options.xLabelTotal || '';\n            break;\n          case \"%_CATEGORY_AVERAGE\":\n            let theAverage = options.xLabelTotal / (options.xLabelNumber || 1);\n            if (!isNaN(theAverage)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theAverage, 2);\n            }\n            break;\n          case \"%_PERCENT_OF_CATEGORY\":\n            let theCPercent = options.yValue / (options.xLabelTotal || 1);\n            if (!isNaN(theCPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theCPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_PERCENT_OF_TOTAL\":\n            let theTPercent = options.yValue / (options.legendTotal || 1);\n            if (!isNaN(theTPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theTPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            // if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n            //     let theColumnN = parseInt(theMatchStr.substring(9));\n            //     if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN <= options.rowData.length) {\n            //         theMatchedTextValue += options.rowData[theColumnN - 1];\n            //     }\n            // }\n            if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n              let theColumnN = parseInt(theMatchStr.substring(9));\n              const matchedHeader = options.headers[theColumnN - 1];\n              if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN <= options.rowData.length) {\n                theMatchedTextValue += _DataFocusMethod.formatData(options.rowData[theColumnN - 1], matchedHeader) || '';\n              }\n            }\n            break;\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    },\n    // 如果当前图形配置在上线后需要更新配置，需要兼容行为，则在此处处理[ 不同图形兼容方法不一样 ]\n    /**\r\n     * @param   chartConfigure  -   图表配置对象\r\n     * @param   options\r\n     *          {\r\n     *              tableData   -   当前搜索的数据表详情\r\n     *              yAxisColors     -   202306之前保存的问答的y轴配置的颜色(用户通过图形中的图例列表修改颜色，没有统一到配置中导致需要兼容)\r\n     *              legendColors    -   202306之前保存的问答的图例配置的颜色(用户通过图形中的图例列表修改颜色，没有统一到配置中导致需要兼容)\r\n     *          }\r\n     *\r\n     * 将图形中的操作全部作用到图表配置中\r\n     * */\n    compatibleHistoryConfigure: function (chartConfigure, options) {\n      if (!chartConfigure) return false;\n      options = options || {};\n      if (chartConfigure.pie_hide_all) {\n        // 左右两侧隐藏\n        chartConfigure.pie_hide_legend = true;\n        chartConfigure.pie_hide_detail = true;\n        delete chartConfigure.pie_hide_all;\n      }\n\n      // 图形字体大小修改了值结构\n      if (_DataFocusMethod.isPureNumber(chartConfigure.font_size_label)) {\n        let theFontSize = parseInt(chartConfigure.font_size_label);\n        chartConfigure.font_size_label = {\n          fontSize: theFontSize\n        };\n      }\n      // 旋转角度 变了名字\n      if (chartConfigure.attribute_label_rotate !== undefined) {\n        chartConfigure.x_axis_label_dot_line_rotation_value = chartConfigure.attribute_label_rotate;\n        chartConfigure.attribute_label_rotate = undefined;\n      }\n      // 刻度间隔 变了名字\n      if (chartConfigure.attribute_label_space_width !== undefined) {\n        chartConfigure.x_axis_label_dot_line_space_width = chartConfigure.attribute_label_space_width;\n        chartConfigure.attribute_label_space_width = undefined;\n      }\n      // 最大高度限制 变了名字\n      if (chartConfigure.attribute_label_max_height !== undefined) {\n        chartConfigure.x_axis_label_max_height_percent = chartConfigure.attribute_label_max_height * 100;\n        chartConfigure.attribute_label_max_height = undefined;\n      }\n\n      // 图形标题隐藏配置调整为两个配置值 [ 新的柱状图 ]\n      if (chartConfigure.hidden_chart_title) {\n        chartConfigure.x_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.y_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.hidden_chart_title = undefined;\n      }\n\n      // 属性图例颜色 与 Y轴颜色只会存在其中一个\n      // 图例配置列表配置了属性图例的颜色\n      if (!chartConfigure.chart_legend_list) {\n        // 图例配置列表配置了属性图例的颜色\n        if (chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.length || options.legendColors && options.legendColors.length) {\n          let theLegendList = [],\n            theLegendIdObj = {};\n          chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.forEach(function (legend) {\n            if (legend.legend !== undefined && legend.color) {\n              let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].generateLegendId(\"legendAxis\", legend.legend);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: legend.legend,\n                  color: legend.color,\n                  shape: legend.shape,\n                  dash: legend.dash,\n                  shadow: legend.shadow\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_custom_legend_new = undefined;\n\n          // 继承之前保存的legendColors配置\n          options.legendColors && options.legendColors.forEach(function (legend) {\n            if (legend.legend !== undefined && legend.color) {\n              let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].generateLegendId(\"legendAxis\", legend.legend);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: legend.legend,\n                  color: legend.color,\n                  shape: legend.shape,\n                  dash: legend.dash,\n                  shadow: legend.shadow\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_legend_list = theLegendList;\n        }\n        // 图例配置列表配置了Y轴的颜色\n        if (chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.length || options.yAxisColors && options.yAxisColors.length) {\n          let theLegendList = [],\n            theLegendIdObj = {};\n          chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.forEach(function (configLeg) {\n            let theLegendNameObj = configLeg.options && configLeg.options.find(function (obj) {\n                return obj.title === 'option_chart_legend_measure_name';\n              }),\n              theLegendName = theLegendNameObj && theLegendNameObj.value || '',\n              theLegendColorObj = configLeg.options && configLeg.options.find(function (obj) {\n                return obj.title === 'option_chart_legend_color';\n              }),\n              theLegendColor = theLegendColorObj && theLegendColorObj.value || '';\n            theLegendName = theLegendName.replace(\"-y-axis-\", \"\");\n            let theYAxisArray = theLegendName.split('-'),\n              theColIdx = theYAxisArray[0],\n              theColName = theYAxisArray[1],\n              theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].generateLegendId('YAxis', theColIdx);\n            if (theLegendName && theLegendColor) {\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: theColName,\n                  color: theLegendColor\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_custom_legend_new_measure = undefined;\n\n          // 继承之前保存的yAxisColors配置\n          console.log('---------------yAxisColors------------');\n          options.yAxisColors && options.yAxisColors.forEach(function (yAxis) {\n            if (yAxis.col_id !== undefined && yAxis.color) {\n              if (options.tableData && options.tableData.headers) {\n                let theMatchedHeader = options.tableData.headers.find(function (head) {\n                  return yAxis.col_id === head.col_id || head.idx + '' === yAxis.col_id + '';\n                });\n                if (theMatchedHeader) yAxis.col_id = theMatchedHeader.idx;\n              }\n              let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].generateLegendId(\"YAxis\", yAxis.col_id);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: yAxis.name,\n                  color: yAxis.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_legend_list = theLegendList;\n        }\n      }\n\n      // 隐藏网格线调整了显示网格线的名字\n      if (chartConfigure.grid_hide_all_line) {\n        chartConfigure.grid_show_all_line = false;\n        chartConfigure.grid_hide_all_line = undefined;\n      }\n      // 零线颜色及零线粗细调整了配置名\n      if (chartConfigure.grid_zero_color || chartConfigure.grid_zero_width) {\n        chartConfigure.grid_zero_line_style = {\n          lineColor: chartConfigure.grid_zero_color,\n          lineWidth: chartConfigure.grid_zero_width\n        };\n        chartConfigure.grid_zero_color = undefined;\n        chartConfigure.grid_zero_width = undefined;\n      }\n      // 标度增加了显示与隐藏的配置\n      if (chartConfigure.scale_y_visible === undefined && chartConfigure.scale_y_range && chartConfigure.scale_y_range.length) {\n        chartConfigure.scale_y_visible = true;\n        chartConfigure.scale_y_range && chartConfigure.scale_y_range.forEach(function (theScaleYItem) {\n          // 以前标度类型默认值是default, 现在默认的类型是直线，所以得将之前的配置转换为具体值\n          let theTypeOption = theScaleYItem.options && theScaleYItem.options.find(function (option) {\n            return option.title === \"option_scale_config_type\";\n          });\n          if (!theTypeOption) {\n            theScaleYItem.options = theScaleYItem.options || [];\n            theScaleYItem.options.push({\n              title: \"option_scale_config_type\",\n              value: \"option_default_value\"\n            });\n          } else if (theTypeOption && !theTypeOption.value) theTypeOption.value = 'option_default_value';\n\n          // 以前直线的粗细是类型，目前调整为数值\n          let theThickness = theScaleYItem.options && theScaleYItem.options.find(function (option) {\n            return option.title === \"option_scale_config_value_thickness\";\n          });\n          if (theThickness && theThickness.value) {\n            switch (theThickness.value) {\n              case \"option_thickness_line_medium\":\n                theThickness.value = 2;\n                break;\n              case \"option_thickness_line_heavy\":\n                theThickness.value = 3;\n                break;\n            }\n          }\n        });\n      }\n      // 显示图例改了名字\n      if (chartConfigure.hide_legend && chartConfigure.show_legend === undefined) {\n        chartConfigure.show_legend = false;\n        chartConfigure.hide_legend = undefined;\n      }\n    }\n  },\n  // [*必填项]图轴及图表自定义的中英文\n  /**\r\n   * {\r\n   *     chinese: {\"category_x_axis\": \"X轴\" ... } ,\r\n   *     english: {\"category_x_axis\": \"X Axis\" ...}\r\n   * }\r\n   * */\n  i18nObj: {\n    chinese: {\n      \"option_pie_hide_all\": \"隐藏左右两侧信息\",\n      \"option_pie_hide_all_desc\": \"设置后如果当前图形中有左右两侧信息，将会被隐藏\",\n      \"option_pie_hide_legend\": \"隐藏图例\",\n      \"option_pie_hide_legend_desc\": \"设置后将会隐藏图例\",\n      \"option_pie_hide_detail\": \"隐藏详情\",\n      \"option_pie_hide_detail_desc\": \"设置后如果当前图形中有详情部分，将会被隐藏\",\n      \"option_pie_slices_before_others\": \"“其他”前的最大切片数\",\n      \"option_pie_slices_before_others_desc\": \"分到“其他”切片中前的最大切片数(0~100) , 默认是取12条以后的切片数放入“其他”切片中\",\n      \"option_legend_position\": \"图例位置\",\n      \"option_legend_position_desc\": \"设置图例在视图中的显示位置。“左侧”是图例的默认位置\",\n      \"option_pie_legend_width\": \"图例宽度比例\",\n      \"option_pie_legend_width_desc\": \"设置图例内容占自适应宽度的百分比\",\n      \"option_axis_label_visible\": \"轴标签\",\n      \"option_axis_title_visible\": \"轴标题\",\n      \"option_axis_title_visible_desc\": \"自动情况下，会在详情页面显示标题，看板中隐藏标题\",\n      \"option_title_visible_show\": \"显示\",\n      \"option_title_visible_hide\": \"隐藏\",\n      \"option_axis_title_content\": \"标题内容\",\n      \"option_axis_title_content_desc\": \"默认会使用X轴的列名\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"旋转角度\",\n      \"option_x_axis_label_dot_line_space_width\": \"刻度间距\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"X轴刻度是单层散点模式下，刻度之间的最小间距，默认是50（即每50px显示一个刻度）\",\n      \"option_x_axis_label_max_height_percent\": \"最大高度(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"X轴是单层散点模式下，超出最大高度百分比时，截取字符串显示；其他模式下，超出最大高度时，将不显示X轴刻度\",\n      \"option_font_style\": \"字体\",\n      \"option_font_alignment\": \"对齐方式\",\n      \"category_y_axis\": \"Y轴\",\n      \"option_y_axis_label_max_width_percent\": \"最大宽度(%)\",\n      \"option_measure_configure\": \"格式配置\",\n      \"option_chart_column_minimum_width\": \"自适应最小刻度宽\",\n      \"option_chart_column_minimum_width_desc\": \"默认情况下，依据画图区域及画图数据自适应的刻度宽值，默认最小值是5px\",\n      \"category_pie\": \"饼配置\",\n      \"category_layout\": \"布局配置\",\n      \"category_carousel_config\": \"轮播配置\",\n      \"option_enable_carousel_animation\": \"轮播\",\n      \"option_enable_carousel_animation_desc\": \"是否开启轮播效果\",\n      \"option_pie_container_gap\": \"容器间隔\",\n      \"option_pie_container_gap_desc\": \"控制画布中图例、饼、详情间的间距\",\n      \"option_pie_corner_radius\": \"圆角半径\",\n      \"option_pie_corner_radius_desc\": \"设置弧的圆角半径\",\n      \"option_pie_pad_angle\": \"饼间距\",\n      \"option_pie_pad_angle_desc\": \"设置弧之间的距离，单位为deg\",\n      \"option_suspend_text_regex_desc\": \"要显示的文本。有以下替换宏可用：<br /> \" + \"<span class='mr3'>[值]</span> - 对应的Y轴的数值 <br />\" + \"<span class='mr3'>[属性]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[刻度]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[类别]</span> - 对应的图例的类别值<br /> \" + \"<span class='mr3'>[类别索引]</span> - 对应的图例的类别顺序索引<br /> \" + \"<span class='mr3'>[刻度总和]</span> - 可显示X轴为某个值时所有Y轴的数值之和 <br /> \" + \"<span class='mr3'>[刻度平均值]</span> - 可显示X轴为某个值时所有Y轴的平均值<br /> \" + \"<span class='mr3'>[类别百分比]</span> - X轴的刻度上Y值占所有Y值总和的百分比 <br />\" + \"<span class='mr3'>[刻度百分比]</span> - X轴的刻度上Y值占该X刻度上所有Y值总和的百分比 <br /> \" + \"<span class='mr3'>[(列N)]</span> - 第N列的数值 <br /> \" + \"<span class='mr3'>[换行]</span> - 换行符\",\n      \"%_X_VALUE_NAME\": \"X轴名称\",\n      \"%_X_VALUE\": \"X刻度\",\n      \"%_Y_VALUE_NAME\": \"Y轴名称\",\n      \"%_Y_VALUE\": \"Y刻度\",\n      \"%_LEGEND_VALUE\": \"图例\",\n      \"%_NAME\": \"属性\",\n      \"%_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_VALUE\": \"值\",\n      \"%_VALUE_desc\": \"对应的Y轴的数值\",\n      \"%_VALUE_NAME\": \"值名称\",\n      \"%_VALUE_NAME_desc\": \"对应的Y轴的名称\",\n      \"%_SERIES_NAME\": \"类别\",\n      \"%_SERIES_NAME_desc\": \"对应的图例的类别值\",\n      \"%_SERIES_NUMBER\": \"类别索引\",\n      \"%_SERIES_NUMBER_desc\": \"对应的图例的类别顺序索引\",\n      \"%_CATEGORY_NAME\": \"刻度\",\n      \"%_CATEGORY_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_CATEGORY_NUMBER\": \"刻度索引\",\n      \"%_CATEGORY_NUMBER_desc\": \"对应的X轴的刻度顺序索引\",\n      \"%_CATEGORY_TOTAL\": \"刻度总和\",\n      \"%_CATEGORY_TOTAL_desc\": \"各个X轴刻度上所有Y轴值的总和\",\n      \"%_CATEGORY_AVERAGE\": \"刻度平均值\",\n      \"%_CATEGORY_AVERAGE_desc\": \"各个X轴刻度上所有Y轴值的平均值\",\n      \"%_PERCENT_OF_TOTAL\": \"类别百分比\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"X轴的刻度上Y值占所有Y值总和的百分比\",\n      \"%_PERCENT_OF_CATEGORY\": \"刻度百分比\",\n      \"%_PERCENT_OF_CATEGORY_desc\": \"X轴的刻度上Y值占该X刻度上所有Y值总和的百分比\",\n      \"%_BR\": \"换行\"\n    },\n    english: {\n      \"option_pie_hide_all\": \"Hide left and right\",\n      \"option_pie_hide_all_desc\": \"After setting, the left and right infomation will be hidden if the chart have.\",\n      \"option_pie_hide_legend\": \"Hide legend\",\n      \"option_pie_hide_legend_desc\": \"After setting, the legend will be hidden.\",\n      \"option_pie_hide_detail\": \"Hide detail\",\n      \"option_pie_hide_detail_desc\": \"After setting, the detail will be hidden if the chart have.\",\n      \"option_pie_slices_before_others\": \"Maximum slices before Others\",\n      \"option_pie_slices_before_others_desc\": \"The maximum number (0 ~ 100) of slices in front of the other slices\",\n      \"option_legend_position\": \"Legend Position\",\n      \"option_legend_position_desc\": \"Sets the display position of the legend in the view. \\\"Left\\\" is the default position for the legend\",\n      \"option_pie_legend_width\": \"Legend Width\",\n      \"option_pie_legend_width_desc\": \"Set the percentage of the legend content to the adaptive width\",\n      \"option_axis_label_visible\": \"Axis Label\",\n      \"option_axis_title_visible\": \"Axis Title\",\n      \"option_axis_title_visible_desc\": \"In automatic mode, the title will be displayed on the answer detail page and hidden in the pinboard\",\n      \"option_title_visible_show\": \"Show\",\n      \"option_title_visible_hide\": \"Hidden\",\n      \"option_axis_title_content\": \"Title Content\",\n      \"option_axis_title_content_desc\": \"By default, column names on the axis will be used\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"Rotate\",\n      \"option_x_axis_label_dot_line_space_width\": \"Label Spacing\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"The scale is the minimum spacing between labels in single level axis, with a default of 50 (i.e. one scale displayed every 50px)\",\n      \"option_x_axis_label_max_height_percent\": \"Max height(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"The axis is in single level, and when the maximum height percentage is exceeded, the string is truncated and displayed; In other modes, when the maximum height is exceeded, the scale will not be displayed\",\n      \"option_font_style\": \"Font\",\n      \"option_font_alignment\": \"Alignment\",\n      \"category_y_axis\": \"Y Axis\",\n      \"option_y_axis_label_max_width_percent\": \"Max Width(%)\",\n      \"option_measure_configure\": \"Data Format\",\n      \"option_chart_column_minimum_width\": \"Adaptive minimum column width\",\n      \"option_chart_column_minimum_width_desc\": \"By default, the column width value is adaptively adjusted based on the drawing area and data. The default minimum value is 5px. After setting the fixed width of the scale, this value is invalid\",\n      \"option_chart_column_width\": \"Fixed column width\",\n      \"option_chart_column_width_desc\": \"By default, the width is adaptive based on the width of the drawing area. After setting a fixed scale width, the scale width is fixed, with a minimum value of 5px\",\n      \"category_pie\": \"Pie Configuration\",\n      \"category_layout\": \"Layout Configuration\",\n      \"category_carousel_config\": \"Carousel Config\",\n      \"option_enable_carousel_animation\": \"Carousel\",\n      \"option_enable_carousel_animation_desc\": \"Whether to enable the carousel effect\",\n      \"option_pie_container_gap\": \"Element Spacing\",\n      \"option_pie_container_gap_desc\": \"Controls the spacing between legends, pie charts, and details in the canvas.\",\n      \"option_suspend_text_regex_desc\": \"The text to be displayed. The following replacement macros are available:<br /> \" + \"<span class='mr3'>[Value]</span> - The corresponding value of the Y-axis <br />\" + \"<span class='mr3'>[Attribute]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Label]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Series]</span> - The series value of the corresponding legend<br /> \" + \"<span class='mr3'>[Series Index]</span> - The series order of the corresponding legend<br /> \" + \"<span class='mr3'>[Label Total]</span> - Can display the sum of all Y-axis values when the X-axis is a certain value <br /> \" + \"<span class='mr3'>[Label AVG]</span> - Can display the average value of all Y-axes when the X-axis is a certain value<br /> \" + \"<span class='mr3'>[Series Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on the legend<br />\" + \"<span class='mr3'>[Label Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on that scale <br /> \" + \"<span class='mr3'>[(ColumnN)]</span> - Value in column N <br /> \" + \"<span class='mr3'>[Wrap]</span> - Line break\",\n      \"%_NAME\": \"Attribute\",\n      \"%_NAME_desc\": \"The displayed numerical labels are the corresponding X-axis values\",\n      \"%_VALUE\": \"Value\",\n      \"%_VALUE_desc\": \"The corresponding value of the Y-axis\",\n      \"%_VALUE_NAME\": \"Value Name\",\n      \"%_VALUE_NAME_desc\": \"The corresponding y-axis column name\",\n      \"%_SERIES_NAME\": \"Series\",\n      \"%_SERIES_NAME_desc\": \"The category value of the corresponding legend\",\n      \"%_SERIES_NUMBER\": \"Series Index\",\n      \"%_SERIES_NUMBER_desc\": \"Category order index of the corresponding legend\",\n      \"%_CATEGORY_NAME\": \"Label\",\n      \"%_CATEGORY_NAME_desc\": \"Corresponding X-axis scale value\",\n      \"%_CATEGORY_NUMBER\": \"Label Index\",\n      \"%_CATEGORY_NUMBER_desc\": \"The corresponding X-axis tick order index\",\n      \"%_CATEGORY_TOTAL\": \"Label Total\",\n      \"%_CATEGORY_TOTAL_desc\": \"The sum of all Y-axis values on each X-axis scale\",\n      \"%_CATEGORY_AVERAGE\": \"Label AVG\",\n      \"%_CATEGORY_AVERAGE_desc\": \"The average of all Y-axis values on each X-axis scale\",\n      \"%_PERCENT_OF_TOTAL\": \"Series Percentage\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"The percentage of the Y value on the X-axis scale to the sum of all Y values\",\n      \"%_PERCENT_OF_CATEGORY\": \"Label Percentage\",\n      \"%_PERCENT_OF_CATEGORY_desc\": \"The percentage of the Y value on the X-axis scale to the sum of all Y values on the X-axis\",\n      \"%_BR\": \"Wrap\"\n    }\n  },\n  // [*必填项]生成当前图表类型的模板数据\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.basic/pie/systemPieChart.js?");

/***/ })

}]);
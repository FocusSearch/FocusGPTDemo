(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../src-v5/assets/js/charts.components/LegendComponent.js":
/*!****************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/LegendComponent.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n// 画图例的组件: 解析图例位置的配置值，解析图例形状的配置值 ；画图例 ...\n\nlet LegendComponent = {\n  /**\r\n   * 生成图例ID的规则\r\n   * @param type  -   图例类型    legendAxis： 图例列的各个图例 ； yAxis： 多个数值列的各个图例\r\n   * @param value -   图例唯一标识值\r\n   *\r\n   * @return legendId\r\n   * */\n  generateLegendId: function (type, value) {\n    if (!type || value === undefined) return false;\n    if (type === 'legendAxis') {\n      // 图例列中值可能包含空格\n      return \"column-value-\" + encodeURIComponent(value);\n    } else {\n      return \"measure-column-id-\" + value;\n    }\n  },\n  // 转换图例位置配置值的内容，将长的内容调整为规整的 例： 将option_position_top 调整为top值\n  translateLegendConfigure: function (legendPosition) {\n    let thePosition = '';\n    switch (legendPosition) {\n      case \"option_position_left\":\n        thePosition = 'left';\n        break;\n      case \"option_position_top\":\n        thePosition = 'top';\n        break;\n      case \"option_position_bottom\":\n        thePosition = 'bottom';\n        break;\n      case \"option_position_right_top\":\n        thePosition = 'rightTop';\n        break;\n      case \"option_position_right\":\n      case \"option_default_value\":\n      default:\n        thePosition = 'right';\n        break;\n    }\n    return thePosition || 'right';\n  },\n  // 转换图例形状配置值的内容，将长的内容调整为规整的\n  translateLegendShapeConfigure: function (legendShape, defaultShape) {\n    let theLegendShape;\n    switch (legendShape) {\n      case \"option_legend_shape_type_three\":\n      case \"three\":\n        theLegendShape = 'three';\n        break;\n      case \"option_legend_shape_type_four\":\n      case \"four\":\n        theLegendShape = 'four';\n        break;\n      case \"option_legend_shape_type_rect\":\n      case \"rect\":\n        theLegendShape = 'rect';\n        break;\n      case \"option_legend_shape_type_five\":\n      case \"five\":\n        theLegendShape = 'five';\n        break;\n      case \"option_legend_shape_type_diamond\":\n      case \"diamond\":\n        theLegendShape = 'diamond';\n        break;\n      case \"option_legend_shape_type_add\":\n      case \"add\":\n        theLegendShape = 'add';\n        break;\n      case \"option_legend_shape_type_cross\":\n      case \"cross\":\n        theLegendShape = 'cross';\n        break;\n      case \"option_legend_shape_type_loop\":\n      case \"loop\":\n        theLegendShape = 'loop';\n        break;\n      case \"option_legend_shape_type_circle\":\n      case \"circle\":\n      case \"option_default_value\":\n        theLegendShape = 'circle';\n        break;\n      case \"funnel\":\n      case \"option_legend_shape_type_funnel\":\n        theLegendShape = 'funnel';\n        break;\n      default:\n        theLegendShape = defaultShape || legendShape;\n        break;\n    }\n    return theLegendShape || 'circle';\n  },\n  /**\r\n   * 图形以前可以通过图表配置，也可以通过图形中配置chart_custom_legend_new / chart_custom_legend_new_measure，\r\n   * 最终修改到了applyAction中的legendColors ， yAxisColors中\r\n   * 导致图形的图例颜色配置只需要很多兼容，目前全部统一到chartConfigure中来\r\n   *\r\n   * 此处是对以前配置的一个兼容，生成一个最新的结构供图形 及 图表配置使用\r\n   * @param options\r\n   *          {\r\n   *              legendColors\r\n   *              yAxisColors\r\n   *              configureLegendList\r\n   *          }\r\n   * */\n  translateLegendColor: function (options) {\n    options = options || {};\n    let self = this,\n      theLegendList = [],\n      theLegendIdMap = {};\n    if (options.legendColors && options.legendColors.length) {\n      options.legendColors.forEach(function (theLegend) {\n        if (theLegend.legend !== undefined && theLegend.color) {\n          let theObj = {\n            id: self.generateLegendId(\"legendAxis\", theLegend.legend),\n            legend: theLegend.legend,\n            color: theLegend.color\n          };\n          theLegendIdMap[theObj.id] = {\n            index: theLegendList.length\n          };\n          theLegendList.push(theObj);\n        }\n      });\n    }\n    if (options.yAxisColors && options.curYAxis && options.curYAxis.length && options.yAxisColors.length) {\n      options.yAxisColors.forEach(function (theYAxis) {\n        if (theYAxis.col_id !== undefined && theYAxis.color) {\n          let theMatchedYAxis = options.curYAxis.find(function (yAxis) {\n            return yAxis.col_id === theYAxis.col_id || yAxis.idx + '' === theYAxis.col_id + '';\n          });\n          if (!theMatchedYAxis) return false;\n          let theObj = {\n            id: self.generateLegendId(\"yAxis\", theMatchedYAxis.idx),\n            legend: theYAxis.name,\n            color: theYAxis.color\n          };\n          theLegendIdMap[theObj.id] = {\n            index: theLegendList.length\n          };\n          theLegendList.push(theObj);\n        }\n      });\n    }\n    if (options.configureLegendList && options.configureLegendList.length) {\n      options.configureLegendList.forEach(function (theLegend) {\n        if (theLegendIdMap[theLegend.id]) {\n          theLegendList[theLegendIdMap[theLegend.id].index] = theLegend;\n        } else {\n          theLegendIdMap[theLegend.id] = {\n            index: theLegendList.length\n          };\n          theLegendList.push(theLegend);\n        }\n      });\n    }\n    return theLegendList;\n  },\n  /**\r\n   * 画图中 属性：颜色 的图例列表\r\n   * @param options\r\n   *          {\r\n   *              container           -    画图例的容器\r\n   *              chartWidth           -    画图区域的整体宽度 [ 主要用于横向分页 ；纵向限制图例宽度 ]\r\n   *              chartHeight          -    画图区域的整体高度 [ 主要用于纵向分页 ；横向显示高度 ]\r\n   *              legendPosition      -    图例的位置\r\n   *              legendMaxWidthInVertical    -   图例在水平方向时，每个图例项的最大宽度\r\n   *              legendMaxWidth      -   图例区域的最大宽度\r\n   *              legendWidth         -    图例区域的宽度\r\n   *              legendShapeType     -    图里颜色块的形状 [ 圆/三角形/菱形... ]\r\n   *              legendFontSize      -    图例字体大小\r\n   *              legendOffsetSpace   -    图例的边距[ 居上时与下面的图形的间隔 ； 居右侧时与左侧图形的间隔； 居底部时与上面图形的间距]\r\n   *              legendIntervalSpace -    图例之间的间隔\r\n   *              legendValueList     -    属性图例列表\r\n   *                  {\r\n   *                      type        -   图例类型[ 属性值 或 多Y轴的 ]\r\n   *                      legend      -   图例显示名\r\n   *                      id          -   临时生成，主要用于鼠标移入后的事件操作\r\n   *                      index       -   图例的顺序\r\n   *                      shape       -   图例颜色块的形状\r\n   *                      color       -   图例颜色，如果不传入，则使用系统分配的颜色\r\n   *                  }\r\n   *              drawValueKeyList[Array]    -   需要在图例中显示值的部分的值的key列表\r\n   *              mouseoverEventCallback  -   鼠标移入单个图例的事件响应\r\n   *              mouseoutEventCallback   -   鼠标移出单个图例的事件响应\r\n   *              mousedownEventCallback  -   鼠标点击单个图例的事件响应\r\n   *          }\r\n   * */\n  drawAttributeLegend: function (options) {\n    options = options || {};\n    if (!options.legendValueList || !options.legendValueList.length || !options.chartWidth || !options.chartHeight) return false;\n    let self = this,\n      legendShapeType = options.legendShapeType || 'circle',\n      legendPosition = options.legendPosition || 'right',\n      legendFontSize = parseInt(options.legendFontSize) || 10,\n      legendFontColor = options.legendFontColor,\n      legendBoldStyle = options.legendBoldStyle === undefined ? 'inherit' : options.legendBoldStyle ? 'bold' : 500,\n      legendItalicStyle = options.legendItalicStyle === undefined ? 'inherit' : options.legendItalicStyle ? 'italic' : 'normal',\n      legendOffsetSpace = parseInt(options.legendOffsetSpace) >= 0 ? parseInt(options.legendOffsetSpace) : 5,\n      //  与图形的间距默认是5\n      legendIntervalSpace = parseInt(options.legendIntervalSpace) >= 0 ? parseInt(options.legendIntervalSpace) : 0,\n      //  图例项之间的间隔，横向默认是10，纵向默认是0\n      legendMaxWidthInVertical = parseInt(options.legendMaxWidthInVertical) || 80,\n      //  图例在水平方向时，每个图例项的最大宽度\n      legendMaxWidth = parseInt(options.legendMaxWidth) || 0,\n      //  图例区域的最大宽度\n      legendLoopArrayList = options.legendShapeArrayList || ['circle', 'three', 'four', 'rect', 'five', 'diamond'];\n    // 根据图例的位置，来调整图例容器的样式 及 图例项的样式\n    let theLegendContainerStyle = '',\n      theLegendItemStyle = '',\n      withPageDirection = '',\n      legendStrSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getStrSizeByCanvas('string', '图例列', {\n        fontSize: legendFontSize\n      });\n    let hasLegendPageFlag = false,\n      //  图例是否存在翻页\n      legendPageSize = 0; //  图例每页的个数\n    switch (legendPosition) {\n      case \"top\":\n        // 图例在顶部，高度只占一行  水平摆放时默认间隔是10\n        let maxTopHeight = Math.min(options.chartHeight * 0.2, 50);\n        // 如果图例高度区域过于小，放不完整一行图例时，则不显示\n        if (maxTopHeight < legendStrSize.height) {\n          $(options.container).empty();\n          return false;\n        }\n        theLegendContainerStyle = 'display:flex;flex-direction:row;justify-content:center;align-items:center;width:100%;max-height:' + maxTopHeight + 'px;margin:0 auto ' + legendOffsetSpace + 'px auto;';\n        theLegendItemStyle = 'display:flex;flex-direction:row;justify-content:flex-start;align-items:center;cursor:pointer;margin-right:' + (legendIntervalSpace || 10) + 'px;min-height:20px;max-width:' + legendMaxWidthInVertical + 'px;';\n        withPageDirection = 'horizontal';\n\n        // [水平方向翻页第一次计算]水平方向按照每项图例最大宽度模糊计算是否有翻页\n        hasLegendPageFlag = Math.floor(options.chartWidth / (legendMaxWidthInVertical + (legendIntervalSpace || 10))) < options.legendValueList.length;\n        legendPageSize = Math.floor(options.chartWidth / (legendMaxWidthInVertical + (legendIntervalSpace || 10)), options.legendValueList.length);\n        break;\n      case \"bottom\":\n        // 图例在底部，高度只占一行  水平摆放时默认间隔是10\n        let maxBottomHeight = Math.min(options.chartHeight * 0.2, 50);\n        // 如果图例高度区域过于小，放不完整一行图例时，则不显示\n        if (maxBottomHeight < legendStrSize.height) {\n          $(options.container).empty();\n          return false;\n        }\n        theLegendContainerStyle = 'display:flex;flex-direction:row;justify-content:center;align-items:center;width:100%;max-height:' + maxBottomHeight + 'px;margin:' + legendOffsetSpace + 'px auto 0 auto;';\n        theLegendItemStyle = 'display:flex;flex-direction:row;justify-content:flex-start;align-items:center;cursor:pointer;margin-right:' + (legendIntervalSpace || 10) + 'px;min-height:20px;max-width:' + legendMaxWidthInVertical + 'px;';\n        withPageDirection = 'horizontal';\n\n        // [水平方向翻页第一次计算]水平方向按照每项图例最大宽度模糊计算是否有翻页\n        hasLegendPageFlag = Math.floor(options.chartWidth / (legendMaxWidthInVertical + (legendIntervalSpace || 10))) < options.legendValueList.length;\n        legendPageSize = Math.floor(options.chartWidth / (legendMaxWidthInVertical + (legendIntervalSpace || 10)), options.legendValueList.length);\n        break;\n      case \"rightTop\":\n        // 图例在右上角，最大宽度不能超出图形的40%；最多放三行数据；  垂直摆放时默认间隔是0\n        let maxRightTopWidth = Math.min(options.chartWidth * 0.3, 350);\n        // 如果图例高度区域过于小，放不完整一列图例时，则不显示\n        if (maxRightTopWidth < 50) {\n          $(options.container).empty();\n          return false;\n        }\n        theLegendContainerStyle = 'display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;align-items:center;max-height:100%;width:' + maxRightTopWidth + 'px;';\n        theLegendItemStyle = 'display:flex;flex-direction:row;justify-content:flex-start;align-items:center;cursor:pointer;margin-bottom:' + (legendIntervalSpace || 0) + 'px;min-height:20px;';\n        withPageDirection = 'NVertical';\n\n        // 至少一列\n        let theNNumber = Math.floor(maxRightTopWidth / (legendMaxWidthInVertical + (legendIntervalSpace || 0))) || 1;\n        theLegendItemStyle += 'width:' + 1 / theNNumber * 100 + '%;';\n        hasLegendPageFlag = theNNumber * 3 < options.legendValueList.length;\n        // 最多N列3行数据\n        legendPageSize = Math.min(theNNumber * 3, options.legendValueList.length);\n        break;\n      case \"right\":\n      default:\n        // 图例在右侧，最大宽度不能超过画图区域宽度的30% ；  垂直摆放时默认间隔是5\n        let maxWidth = Math.min(options.chartWidth * 0.2, 200);\n        if (legendMaxWidth && !isNaN(legendMaxWidth)) {\n          maxWidth = legendMaxWidth;\n        }\n        // 如果图例区域过于小，则不显示\n        if (maxWidth < 50) {\n          $(options.container).empty();\n          return false;\n        }\n        theLegendContainerStyle = 'max-height:100%;max-width:' + maxWidth + 'px;margin-left:' + legendOffsetSpace + 'px;';\n        if (options.legendWidth && _DataFocusMethod.isPureNumber(options.legendWidth)) theLegendContainerStyle += 'width:' + options.legendWidth + 'px;';\n        theLegendItemStyle = 'display:flex;flex-direction:row;justify-content:flex-start;align-items:center;cursor:pointer;margin-bottom:' + (legendIntervalSpace || 0) + 'px;min-height:20px;';\n        withPageDirection = 'vertical';\n\n        // [垂直方向翻页计算]水平方向按照每项图例最大宽度模糊计算是否有翻页[ 图例上下需要预留10px的空隙 ]\n        let theLegendItemHeight = Math.max(legendStrSize.height, 20);\n        hasLegendPageFlag = Math.floor((options.chartHeight - 20) / (theLegendItemHeight + (legendIntervalSpace || 0))) < options.legendValueList.length;\n        // 因为需要将上下的分页按钮区域预留出来\n        legendPageSize = Math.floor((options.chartHeight - 50) / (theLegendItemHeight + (legendIntervalSpace || 0)), options.legendValueList.length);\n        break;\n    }\n    // 图例字体\n    theLegendContainerStyle += 'font-size:' + legendFontSize + 'px;';\n    theLegendContainerStyle += 'color:' + (legendFontColor || \"inherit\") + ';';\n    if (legendBoldStyle) theLegendContainerStyle += 'font-weight:' + legendBoldStyle + ';';\n    if (legendItalicStyle) theLegendContainerStyle += 'font-style:' + legendItalicStyle + ';';\n\n    // [水平方向翻页第二次计算] 如果真实字符串宽度没有超过画图宽度，则不需要翻页\n    if (withPageDirection === 'horizontal') {\n      let verticalLegendToTalWidth = 0;\n      options.legendValueList.forEach(function (legend, index) {\n        // 需要计算所有图例的真实宽度，靠最大宽度限制计算的翻页信息的不准确\n        let theLegendStrSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getStrSizeByCanvas('string', legend.legend, {\n          fontSize: legendFontSize\n        });\n        verticalLegendToTalWidth += Math.max(10, legendFontSize * 0.7 || 0) + 5;\n        verticalLegendToTalWidth += theLegendStrSize.width;\n        if (index < options.legendValueList.length - 1) verticalLegendToTalWidth += legendIntervalSpace;\n      });\n\n      // 如果真实字符串宽度没有超过画图宽度 ，则不需要翻页\n      if (verticalLegendToTalWidth <= options.chartWidth) {\n        hasLegendPageFlag = false;\n        legendPageSize = options.legendValueList.length;\n      }\n    }\n\n    // 将所有图例都画出来，但是超出的部分使用高度限制翻页 【 横向摆放时，有第一页数据决定翻页的个数 】\n    let currentPage = 1,\n      totalPage = Math.ceil(options.legendValueList.length / (legendPageSize || 1));\n    let legendContainerDom = generateLegendPageHtmlStr(options.legendValueList, {\n      totalPage: totalPage,\n      currentPage: currentPage,\n      pageSize: legendPageSize,\n      direction: withPageDirection,\n      drawValueKeyList: options.drawValueKeyList,\n      changeLegendColorFlag: options.changeLegendColorFlag,\n      changeLegendColorCallback: options.changeLegendColorCallback,\n      mouseoverEventCallback: options.mouseoverEventCallback,\n      mouseoutEventCallback: options.mouseoutEventCallback,\n      mousedownEventCallback: options.mousedownEventCallback\n    });\n    let legendContainerDiv = document.createElement('div');\n    legendContainerDiv.className = 'legend-replace-container-div';\n    legendContainerDiv.style = theLegendContainerStyle;\n    legendContainerDiv.appendChild(legendContainerDom);\n    $(options.container).empty();\n    $(options.container).css({\n      \"justify-content\": \"center\"\n    }).append(legendContainerDiv);\n\n    // 生成每页的图例字符串\n    function generateLegendPageHtmlStr(legendValueList, options) {\n      options = options || {};\n      if (!legendValueList || !legendValueList.length) return false;\n      let currentPage = options.currentPage || 1,\n        pageSize = options.pageSize || 10,\n        totalPage = options.totalPage || 1,\n        startIndex = (currentPage - 1) * pageSize,\n        endIndex = currentPage * pageSize,\n        direction = options.direction || 'vertical',\n        legendWidth = options.verticalLegendWidth || '',\n        prevButtonCss = withPageDirection === 'vertical' ? 'icon-triangle-up1 mb5' : 'icon-triangle-left mr5',\n        nextButtonCss = withPageDirection === 'vertical' ? 'icon-triangle-down1' : 'icon-triangle-right-2';\n      let legendContainer = document.createElement(\"div\");\n      // 垂直一列\n      if (direction === 'vertical') {\n        legendContainer.className = 'legend-list-container flex-column-container';\n        legendContainer.style.height = \"100%\";\n        // 主要用户翻页时操作，每页的宽度得和第一页保持一致\n        if (legendWidth) legendContainer.style.width = legendWidth + \"px\";\n      }\n      // 水平一行\n      else if (direction === 'horizontal') {\n        legendContainer.className = 'legend-list-container flex-row-container';\n        legendContainer.style.width = \"100%\";\n      }\n      // 垂直多列\n      else if (direction === 'NVertical') {\n        legendContainer.className = 'legend-list-container flex-row-container';\n        legendContainer.style.width = \"100%\";\n      }\n      let legendContainerInnerStr = '';\n      let prevButtonStr = currentPage > 1 ? '<div class=\"prev-button cursor-pointer\" ' + ' data-current-page=\"' + (currentPage - 1) + '\">' + '<span class=\"focus-icon ' + prevButtonCss + '\" style=\"margin-left:' + (direction === 'vertical' ? Math.max(10, legendFontSize * 0.7 || 0) + 5 : '0') + 'px\"></span>' + '</div>' : '';\n      if (prevButtonStr) legendContainerInnerStr += prevButtonStr;\n      let legendListInnerStr = '';\n      legendValueList.forEach(function (legend, index) {\n        if (index >= endIndex || index < startIndex) return false;\n        let {\n          theLegendColorStyle,\n          theLegendIconText\n        } = getCurrentLegendShapeType(index, legend.shape || legendShapeType, {\n          legendFontSize: legendFontSize,\n          legendColor: legend.color,\n          defaultShape: legendShapeType\n        });\n        // 横向摆放时的翻页规则： 使用最大宽度的配置（默认80）来确定每页翻页的数量， 如果所有图例的总宽度不足以占满整个宽度，则不翻页 ;\n        // 纵向摆放时的翻页规则： 使用每个元素的高度来确定每页翻页的数量 ；\n        legendListInnerStr += '<div class=\"legend-item ' + (!legend.show ? 'disabled' : '') + '\" ' + 'style=\"' + theLegendItemStyle + 'background-image:none!important;' + '\" ' + 'data-legend-id=\"' + legend.id + '\" ' + 'data-legend-index=\"' + legend.index + '\" ' + 'title=\"' + (legend.legendTranslateName || legend.legend) + '\">';\n        legendListInnerStr += '<a class=\"legend-color mr5 ' + ' href=\"javascript:void(0);\"' + ' background=\"' + legend.color + '\"' + ' style=\"' + theLegendColorStyle + legend.color + '\" >' + theLegendIconText + '</a>';\n        legendListInnerStr += '<p class=\"legend-text text-left text-clip\" style=\"flex:1;\">' + (legend.legendTranslateName || legend.legend) + '</p>';\n\n        // 通过配置可以增加数值部分显示\n        options.drawValueKeyList && options.drawValueKeyList.forEach(function (valueKey) {\n          if (legend[valueKey]) {\n            legendListInnerStr += '<div class=\"legend-value ml5\">' + legend[valueKey] + '</div>';\n          }\n        });\n        legendListInnerStr += '</div>';\n      });\n\n      // 水平一行\n      if (direction === 'horizontal') {\n        legendContainerInnerStr += '<div class=\"flex-content flex-row-container\" style=\"align-content: center;\">' + legendListInnerStr + '</div>';\n      }\n      // 多列\n      else if (direction === 'NVertical') {\n        legendContainerInnerStr += '<div class=\"flex-content flex-row-container\" style=\"flex-wrap: wrap;\">' + legendListInnerStr + '</div>';\n      }\n      // 单列\n      else {\n        legendContainerInnerStr += '<div class=\"flex-content\" style=\"width:100%;\">' + legendListInnerStr + '</div>';\n      }\n      let nextButtonStr = currentPage < totalPage ? '<div class=\"next-button cursor-pointer\"' + ' data-current-page=\"' + (currentPage + 1) + '\">' + '<span class=\"focus-icon ' + nextButtonCss + '\"  style=\"margin-left:' + (direction === 'vertical' ? Math.max(15, legendFontSize * 0.7 || 0) + 5 : '0') + 'px\"></span>' + '</div>' : '';\n      if (nextButtonStr) legendContainerInnerStr += nextButtonStr;\n      legendContainer.innerHTML = legendContainerInnerStr;\n      /**\r\n       * 绑定翻页事件 ， 各个图例的点击事件 ，各个图例的鼠标移入事件\r\n       * 1. 鼠标点击整个图例项，修改图例的显示隐藏状态\r\n       * 2. 鼠标移入图例，高亮当前图例的所有信息， 置灰其他图例的所有信息\r\n       * 3. 鼠标移出图例，恢复所有显示的图例的高亮\r\n       * 4. 鼠标点击图例中颜色块部分，显示修改颜色\r\n       * */\n      let theLegendMouseTimer;\n      $(legendContainer).off(\"click\", \".prev-button , .next-button\").on(\"click\", \".prev-button , .next-button\", function (event) {\n        let theDom = event.currentTarget || event.target,\n          currentPage = parseInt(theDom.dataset.currentPage);\n        if (!isNaN(currentPage)) {\n          let theParentDom = $(theDom).closest(\".legend-replace-container-div\");\n          let theLegendContainerDom = generateLegendPageHtmlStr(legendValueList, {\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPage: totalPage,\n            direction: direction,\n            drawValueKeyList: options.drawValueKeyList,\n            verticalLegendWidth: direction === 'vertical' ? theDom.offsetWidth : '',\n            mouseoverEventCallback: options.mouseoverEventCallback,\n            mouseoutEventCallback: options.mouseoutEventCallback,\n            mousedownEventCallback: options.mousedownEventCallback\n          });\n          theParentDom.html(theLegendContainerDom);\n        }\n      }).off(\"click\", \".legend-item\").on(\"click\", \".legend-item\", function (event) {\n        let theDom = event.currentTarget || event.target;\n        let theLegend = theDom.dataset.legendId,\n          theLegendIndex = parseInt(theDom.dataset.legendIndex);\n        if (!isNaN(theLegendIndex)) {\n          if (typeof options.mousedownEventCallback === 'function') {\n            options.mousedownEventCallback({\n              legendDom: theDom,\n              legend: theLegend,\n              legendIndex: theLegendIndex\n            });\n          }\n        }\n      }).off(\"mouseover\", \".legend-item\").on(\"mouseover\", \".legend-item\", function (event) {\n        let theDom = event.currentTarget || event.target;\n        let theLegend = theDom.dataset.legendId,\n          theLegendIndex = parseInt(theDom.dataset.legendIndex);\n        if (theLegendMouseTimer) clearTimeout(theLegendMouseTimer);\n        if (!isNaN(theLegendIndex)) {\n          if (typeof options.mouseoverEventCallback === 'function') {\n            options.mouseoverEventCallback({\n              legendDom: theDom,\n              legend: theLegend,\n              legendIndex: theLegendIndex\n            });\n          }\n        }\n      }).off(\"mouseout\", \".legend-item\").on(\"mouseout\", \".legend-item\", function (event) {\n        let theDom = event.currentTarget || event.target;\n        let theLegend = theDom.dataset.legendId,\n          theLegendIndex = parseInt(theDom.dataset.legendIndex);\n        if (theLegendMouseTimer) clearTimeout(theLegendMouseTimer);\n        theLegendMouseTimer = setTimeout(function () {\n          if (!isNaN(theLegendIndex)) {\n            if (typeof options.mouseoutEventCallback === 'function') {\n              options.mouseoutEventCallback({\n                legendDom: theDom,\n                legend: theLegend,\n                legendIndex: theLegendIndex\n              });\n            }\n          }\n        }, 150);\n      });\n\n      // 如果开启了修改图例颜色的操作\n      if (!!options.changeLegendColorFlag && typeof options.changeLegendColorCallback === 'function') {\n        $(legendContainer).find(\".legend-item .legend-color\").each(function () {\n          let theObj = $(this),\n            theColor = theObj.attr(\"background\"),\n            parent = theObj.closest(\".legend-item\")[0],\n            theLegendIndex = parent && parent.dataset.legendIndex;\n          if (typeof theObj.spectrum === \"function\") {\n            theObj.spectrum({\n              color: theColor,\n              allowEmpty: true,\n              showInput: true,\n              containerClassName: \"full-spectrum\",\n              showInitial: true,\n              showPalette: false,\n              showSelectionPalette: false,\n              showAlpha: true,\n              maxPaletteSize: 10,\n              preferredFormat: \"hex\",\n              localStorageKey: \"spectrum.demo\",\n              change: function (color) {\n                if (!isNaN(theLegendIndex)) {\n                  if (typeof options.changeLegendColorCallback === 'function') {\n                    options.changeLegendColorCallback({\n                      legendIndex: theLegendIndex,\n                      color: color && color.toString() || ''\n                    });\n                  }\n                }\n              }\n            });\n          }\n        });\n      }\n      return legendContainer;\n    }\n    // 计算生成每个图例的样式及图标样式\n    function getCurrentLegendShapeType(index, shape, options) {\n      options = options || {};\n      let legendFontSize = options.legendFontSize || 10;\n      let theLegendColorRadius = Math.max(10, legendFontSize * 0.7 || 0),\n        theLegendColorStyle = 'width:' + theLegendColorRadius + 'px;height:' + theLegendColorRadius + 'px;',\n        theLegendIconText = '';\n      let curLegendShapeType = shape || 'circle';\n      curLegendShapeType = self.translateLegendShapeConfigure(curLegendShapeType, options.defaultShape);\n      if (curLegendShapeType === 'loop') {\n        curLegendShapeType = legendLoopArrayList[index % legendLoopArrayList.length];\n      }\n      switch (curLegendShapeType) {\n        case \"three\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius * 1.1 + 'px;width:' + theLegendColorRadius * 1.1 + 'px;height:' + theLegendColorRadius * 1.1 + 'px;line-height:' + theLegendColorRadius * 1.1 + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g transform=\"translate(1028.08 -207.909)\"><path fill=\"inherit\" d=\"M-978.079,207.909l25,43.3,25,43.3h-100l25-43.3Z\"></path></g>' + '</svg>';\n          break;\n        case \"four\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius + 'px;width:' + theLegendColorRadius + 'px;height:' + theLegendColorRadius + 'px;line-height:' + theLegendColorRadius + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g><path fill=\"inherit\" d=\"M0 0,100 0 , 100 100 , 0 100Z\"></path></g>' + '</svg>';\n          break;\n        case \"rect\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius + 'px;width:' + theLegendColorRadius + 'px;height:' + theLegendColorRadius + 'px;line-height:' + theLegendColorRadius + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g><path fill=\"inherit\" d=\"M0 25,100 25 , 100 75 , 0 75Z\"></path></g>' + '</svg>';\n          break;\n        case \"five\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius * 1.3 + 'px;width:' + theLegendColorRadius * 1.3 + 'px;height:' + theLegendColorRadius * 1.3 + 'px;line-height:' + theLegendColorRadius * 1.3 + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g style=\"transform: translate(-6px,0)\"><path fill=\"inherit\" d=\"M50,3.15c5,9.38,9.59,18.08,14.43,26.61a7.49,7.49,0,0,0,4.42,3.31c9.4,2.09,18.87,3.84,29.14,5.87-1.91,2.13-3.39,3.81-4.9,5.46C88,50,82.73,55.56,77.76,61.33a7.49,7.49,0,0,0-1.62,5C76.9,74.53,78,82.7,79,90.87c.21,1.73.34,3.47.57,5.94-8.48-4.06-16.46-7.6-24.16-11.69-3.85-2.06-6.94-2-10.78,0-7.7,4.08-15.68,7.62-24.25,11.72,1.08-9.07,1.73-17.41,3.17-25.6.94-5.33.11-9.25-3.89-13.12C13.61,52.31,8.21,45.81,2,39c7.94-1.6,15.15-3.61,22.49-4.37C31.61,33.9,36,30.92,38.92,24.08,41.88,17.07,46,10.58,50,3.15Z\"></path></g>' + '</svg>';\n          break;\n        case \"diamond\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius * 1.1 + 'px;width:' + theLegendColorRadius * 1.1 + 'px;height:' + theLegendColorRadius * 1.1 + 'px;line-height:' + theLegendColorRadius * 1.1 + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g transform=\"translate(1120.282 -597.188)\"><path fill=\"inherit\" d=\"M-1070.282,597.188l50,50-50,50-50-50Z\"></path></g>' + '</svg>';\n          break;\n        case \"add\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius * 1.1 + 'px;width:' + theLegendColorRadius * 1.1 + 'px;height:' + theLegendColorRadius * 1.1 + 'px;line-height:' + theLegendColorRadius * 1.1 + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120 120\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g><path fill=\"inherit\" d=\"M40,0 L80,0 L80,40 L120,40 L120,80 L80,80 L80,120 L40,120 L40,80 L0,80 L0,40 L40,40 L40,0 z\"></path></g>' + '</svg>';\n          break;\n        case \"cross\":\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius * 1.1 + 'px;width:' + theLegendColorRadius * 1.1 + 'px;height:' + theLegendColorRadius * 1.1 + 'px;line-height:' + theLegendColorRadius * 1.1 + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120 120\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g style=\"transform: rotate(45deg)\" transform-origin=\"center\"><path fill=\"inherit\" d=\"M40,0 L80,0 L80,40 L120,40 L120,80 L80,80 L80,120 L40,120 L40,80 L0,80 L0,40 L40,40 L40,0 z\"></path></g>' + '</svg>';\n          break;\n        case \"funnel\":\n          theLegendColorStyle = \"width:12px;border-radius:0;border-left:4px solid transparent;border-right:4px solid transparent;border-top:12px solid \" + options.legendColor + \";\";\n          theLegendIconText = '';\n          break;\n        default:\n          theLegendColorStyle = 'min-width:' + theLegendColorRadius + 'px;width:' + theLegendColorRadius + 'px;height:' + theLegendColorRadius + 'px;line-height:' + theLegendColorRadius + 'px;';\n          theLegendColorStyle += 'background:none!important;';\n          theLegendColorStyle += 'border-radius:0;fill:';\n          theLegendIconText = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" ' + 'color=\"' + options.legendColor + '\"' + 'style=\"fill:' + (options.legendColor || 'inherit') + '\">' + '<g transform=\"translate(1313.384 -207.909)\"><path fill=\"inherit\" d=\"M-1263.384,207.909a50,50,0,0,1,50,50,50,50,0,0,1-50,50,50,50,0,0,1-50-50A50,50,0,0,1-1263.384,207.909Z\"></path></g>' + '</svg>';\n          break;\n      }\n      return {\n        theLegendColorRadius,\n        theLegendColorStyle,\n        theLegendIconText\n      };\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (LegendComponent);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/LegendComponent.js?");

/***/ })

}]);
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[18],{

/***/ "../src-v5/assets/js/charts.components/RangeOperateComponent.js":
/*!**********************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/RangeOperateComponent.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n// 区间操作bar: 提供给用户拖拽选择显示的起始点\n\nlet RangeOperateComponent = {\n  // 画区间操作条\n  drawRangeOperateBar: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.xLabelDistinct || !options.xLabelDistinct.length) return false;\n    let rangeHeight = _DataFocusMethod.isPureNumber(options.operateHeight) ? parseFloat(options.operateHeight) : 25,\n      rangeSeparate = 5,\n      defaultColor = options.defaultColor || 'rgba(28,28,28,0.06)',\n      highLightColor = options.highLightColor || 'rgb(93,25,128)',\n      rangeWidth = parseFloat(options.width) - rangeHeight / 2,\n      rangeLength = options.xLabelDistinct.length,\n      rangeStep = rangeWidth / rangeLength,\n      currentStart = parseInt(options.start),\n      currentEnd = parseInt(options.end);\n    rangeHeight = Math.max(rangeHeight, 10);\n    let analysisHighLightColor = _DataFocusMethod.analysisColorStr(highLightColor);\n    let rangeContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer).append(\"g\").attr(\"class\", \"range-container\").attr(\"transform\", \"translate(\" + options.translateLeft + \" , \" + options.translateTop + \")\").style(\"cursor\", \"ew-resize\").on(\"mousedown\", function () {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event;\n      _DataFocusMethod.stopEventDefault(event);\n    }).on(\"mouseover\", function () {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event;\n      _DataFocusMethod.stopEventDefault(event);\n      theLeftButton.attr(\"stroke\", analysisHighLightColor ? \"rgba(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \",0.8)\" : \"rgba(93,25,128,0.8)\");\n      theRightButton.attr(\"stroke\", analysisHighLightColor ? \"rgba(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \",0.8)\" : \"rgba(93,25,128,0.8)\");\n      theRangeRect.attr(\"opacity\", \"0.15\");\n    }).on(\"mouseout\", function () {\n      theLeftButton.attr(\"stroke\", analysisHighLightColor ? \"rgba(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \",0.4)\" : \"rgba(93,25,128,0.4)\");\n      theRightButton.attr(\"stroke\", analysisHighLightColor ? \"rgba(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \",0.4)\" : \"rgba(93,25,128,0.4)\");\n      theRangeRect.attr(\"opacity\", \"0.1\");\n    });\n\n    // 区域底色\n    rangeContainer.append(\"rect\").attr(\"x\", 0).attr(\"y\", -rangeHeight - rangeSeparate).attr(\"width\", rangeWidth).attr(\"height\", rangeHeight).attr(\"fill\", \"transparent\").attr(\"stroke-width\", \"1px\").attr(\"stroke\", defaultColor).attr(\"rx\", \"5\");\n\n    // 整体区域的趋势线\n    if (options.datas && options.datas.length) {\n      let theMin = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min(options.datas),\n        theMax = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].max(options.datas);\n      let lineScale = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.area().x(function (d, index) {\n        let theX = index * rangeStep + rangeStep / 2;\n        if (index === 0) {\n          theX = 0;\n        } else if (index === rangeLength - 1) {\n          theX = rangeWidth;\n        }\n        return theX;\n      }).y0(function (d, index) {\n        return (theMax - d) / Math.max(theMax - theMin, 1) * rangeHeight * 0.5 + rangeHeight * 0.25 - rangeSeparate;\n      }).y1(rangeHeight - rangeSeparate);\n      rangeContainer.append(\"path\").attr(\"class\", \"path\").attr(\"transform\", \"translate(0 , \" + -rangeHeight + \")\").attr(\"d\", function () {\n        return lineScale(options.datas);\n      }).style(\"stroke\", defaultColor).style(\"fill\", defaultColor).style(\"stroke-width\", \"1\");\n    }\n\n    // 选中高亮区域图标\n    let theRangeRect = rangeContainer.append(\"rect\").attr(\"class\", \"high-light-rect\").attr(\"x\", function () {\n      let theStart = Math.min(currentStart, currentEnd);\n      return theStart * rangeStep;\n    }).attr(\"y\", -rangeHeight - rangeSeparate).attr(\"width\", function () {\n      let theStart = Math.min(currentStart, currentEnd);\n      let theEnd = Math.max(currentStart, currentEnd);\n      return (theEnd - theStart) * rangeStep;\n    }).attr(\"height\", rangeHeight).attr(\"fill\", analysisHighLightColor ? \"rgb(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \")\" : \"rgb(93,25,128)\").attr(\"opacity\", \"0.1\").attr(\"stroke\", \"none\").attr(\"rx\", \"5\").on(\"mousedown\", function () {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event;\n      _DataFocusMethod.stopEventDefault(event);\n      let theStartClientX = event.clientX,\n        theStart = currentStart,\n        theEnd = currentEnd,\n        redrawTimer = null,\n        prevStart = currentStart,\n        prevStep = currentEnd - currentStart;\n      document.documentElement.onmousemove = function (event) {\n        _DataFocusMethod.stopEventDefault(event);\n        let currentClientX = event.clientX;\n        // 往右拖拽拉宽, start的值变大 ； 往左拖拽拉宽, start的值变小\n        let step = Math.round((currentClientX - theStartClientX) / rangeStep);\n        theStart = currentStart + step;\n        theStart = Math.min(theStart, rangeLength - prevStep);\n        theStart = Math.max(theStart, 0);\n        theEnd = theStart + prevStep;\n        theEnd = Math.min(theEnd, rangeLength);\n        theEnd = Math.max(theEnd, 0);\n        theLeftButton.attr(\"transform\", function () {\n          return \"translate(\" + (theStart * rangeStep - rangeHeight / 2) + ',' + (-rangeHeight - rangeSeparate - rangeHeight / 2) + \")\";\n        });\n        theRightButton.attr(\"transform\", function () {\n          return \"translate(\" + (theEnd * rangeStep - rangeHeight / 2) + ',' + (-rangeHeight - rangeSeparate - rangeHeight / 2) + \")\";\n        });\n        theRangeRect.attr(\"width\", function () {\n          return (Math.max(theStart, theEnd) - Math.min(theStart, theEnd)) * rangeStep;\n        }).attr(\"x\", function () {\n          let start = Math.min(theStart, theEnd);\n          return start * rangeStep;\n        });\n        if (redrawTimer) clearTimeout(redrawTimer);\n        redrawTimer = setTimeout(function () {\n          if (theStart !== prevStart) {\n            typeof options.moveFunc === 'function' && options.moveFunc({\n              start: Math.min(theStart, theEnd),\n              end: Math.max(theStart, theEnd),\n              animateFlag: false\n            });\n            prevStart = theStart;\n          }\n        }, 5);\n      };\n      document.documentElement.onmouseup = function (event) {\n        currentStart = theStart;\n        currentEnd = theEnd;\n        document.documentElement.onmousemove = undefined;\n        document.documentElement.onmouseup = undefined;\n      };\n    });\n\n    // 左侧移动图标\n    let theLeftButton = rangeContainer.append(\"g\").attr(\"class\", \"left-move-button\").attr(\"transform\", function () {\n      let theStart = Math.min(currentStart, currentEnd);\n      theStart = Math.max(theStart, 0);\n      return \"translate(\" + (theStart * rangeStep - rangeHeight / 2) + ',' + (-rangeHeight - rangeSeparate - rangeHeight / 2) + \")\";\n    }).on(\"mousedown\", function () {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event;\n      _DataFocusMethod.stopEventDefault(event);\n      let theStartClientX = event.clientX,\n        theStart = currentStart,\n        redrawTimer = null,\n        prevStep = currentEnd - currentStart;\n      document.documentElement.onmousemove = function (event) {\n        _DataFocusMethod.stopEventDefault(event);\n        let currentClientX = event.clientX;\n        // 往右拖拽拉宽, start的值变大 ； 往左拖拽拉宽, start的值变小\n        let step = Math.round((currentClientX - theStartClientX) / rangeStep);\n        theStart = currentStart + step;\n        if (theStart === currentEnd) {\n          if (theStart > 0) {\n            theStart = theStart - 1;\n          } else currentEnd = currentEnd + 1;\n        }\n        theStart = Math.min(theStart, rangeLength);\n        theStart = Math.max(theStart, 0);\n        theLeftButton.attr(\"transform\", function () {\n          return \"translate(\" + (theStart * rangeStep - rangeHeight / 2) + ',' + (-rangeHeight - rangeSeparate - rangeHeight / 2) + \")\";\n        });\n        theRangeRect.attr(\"width\", function () {\n          let start = Math.min(theStart, currentEnd);\n          let end = Math.max(theStart, currentEnd);\n          return (end - start) * rangeStep;\n        }).attr(\"x\", function () {\n          let start = Math.min(theStart, currentEnd);\n          return start * rangeStep;\n        });\n        if (redrawTimer) clearTimeout(redrawTimer);\n        redrawTimer = setTimeout(function () {\n          if (step !== prevStep) {\n            typeof options.moveFunc === 'function' && options.moveFunc({\n              start: Math.min(theStart, currentEnd),\n              end: Math.max(theStart, currentEnd),\n              animateFlag: false\n            });\n            prevStep = step;\n          }\n        }, 5);\n      };\n      document.documentElement.onmouseup = function (event) {\n        currentStart = theStart;\n        document.documentElement.onmousemove = undefined;\n        document.documentElement.onmouseup = undefined;\n      };\n    });\n    theLeftButton.append(\"rect\").style(\"fill\", \"transparent\").style(\"stroke\", \"none\").attr(\"transform\", \"translate(0,\" + rangeHeight / 2 + \")\").attr(\"height\", rangeHeight).attr(\"width\", rangeHeight);\n    theLeftButton.append(\"path\").attr(\"d\", \"M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z\").attr(\"transform-origin\", \"0 0\").attr(\"transform\", function () {\n      let theScale = rangeHeight / 21.4;\n      return \"scale(\" + theScale + \")\";\n    }).attr(\"stroke\", analysisHighLightColor ? \"rgba(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \",0.4)\" : \"rgba(93,25,128,0.4)\").attr(\"fill\", \"#fff\");\n    // 右侧移动图标\n    let theRightButton = rangeContainer.append(\"g\").attr(\"class\", \"right-move-button\").attr(\"transform\", function () {\n      let theEnd = Math.max(currentStart, currentEnd);\n      theEnd = Math.max(theEnd, 0);\n      return \"translate(\" + (theEnd * rangeStep - rangeHeight / 2) + ',' + (-rangeHeight - rangeSeparate - rangeHeight / 2) + \")\";\n    }).on(\"mousedown\", function () {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event;\n      _DataFocusMethod.stopEventDefault(event);\n      let theStartClientX = event.clientX,\n        theEnd = currentEnd,\n        redrawTimer = null,\n        prevStep = currentEnd - currentStart;\n      document.documentElement.onmousemove = function (event) {\n        _DataFocusMethod.stopEventDefault(event);\n        let currentClientX = event.clientX;\n        // 往右拖拽拉宽, start的值变大 ； 往左拖拽拉宽, start的值变小\n        let step = Math.round((currentClientX - theStartClientX) / rangeStep);\n        theEnd = currentEnd + step;\n        if (theEnd === currentStart) {\n          if (theEnd < rangeLength) {\n            theEnd = theEnd + 1;\n          } else currentStart = currentStart - 1;\n        }\n        theEnd = Math.min(theEnd, rangeLength);\n        theEnd = Math.max(theEnd, 0);\n        theRightButton.attr(\"transform\", function () {\n          return \"translate(\" + (theEnd * rangeStep - rangeHeight / 2) + ',' + (-rangeHeight - rangeSeparate - rangeHeight / 2) + \")\";\n        });\n        theRangeRect.attr(\"width\", function () {\n          let start = Math.min(currentStart, theEnd);\n          let end = Math.max(currentStart, theEnd);\n          return (end - start) * rangeStep;\n        }).attr(\"x\", function () {\n          let start = Math.min(currentStart, theEnd);\n          return start * rangeStep;\n        });\n        if (redrawTimer) clearTimeout(redrawTimer);\n        redrawTimer = setTimeout(function () {\n          if (step !== prevStep) {\n            typeof options.moveFunc === 'function' && options.moveFunc({\n              start: Math.min(theEnd, currentStart),\n              end: Math.max(theEnd, currentStart),\n              animateFlag: false\n            });\n            prevStep = step;\n          }\n        }, 5);\n      };\n      document.documentElement.onmouseup = function (event) {\n        currentEnd = theEnd;\n        document.documentElement.onmousemove = undefined;\n        document.documentElement.onmouseup = undefined;\n      };\n    });\n    theRightButton.append(\"rect\").style(\"fill\", \"transparent\").style(\"stroke\", \"none\").attr(\"transform\", \"translate(0,\" + rangeHeight / 2 + \")\").attr(\"height\", rangeHeight).attr(\"width\", rangeHeight);\n    theRightButton.append(\"path\").attr(\"d\", \"M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z\").attr(\"transform\", function () {\n      let theScale = rangeHeight / 21.4;\n      return \"scale(\" + theScale + \")\";\n    }).attr(\"transform-origin\", \"0 0\").attr(\"stroke\", analysisHighLightColor ? \"rgba(\" + eval('0x' + analysisHighLightColor.redColor) + \",\" + eval('0x' + analysisHighLightColor.greenColor) + \",\" + eval('0x' + analysisHighLightColor.blueColor) + \",0.4)\" : \"rgba(93,25,128,0.4)\").attr(\"fill\", \"#fff\");\n    return {\n      rangeContainer: rangeContainer,\n      height: rangeHeight + rangeSeparate * 2\n    };\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (RangeOperateComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/RangeOperateComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.senior/kLine/systemKLineChart.js":
/*!**************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/kLine/systemKLineChart.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/ContainerComponent */ \"../src-v5/assets/js/charts.components/ContainerComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pc/assets/js/charts.components/TranslateDataComponent */ \"../src-v5/assets/js/charts.components/TranslateDataComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pc/assets/js/charts.components/MeasureAxisComponent */ \"../src-v5/assets/js/charts.components/MeasureAxisComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pc/assets/js/charts.components/TitleComponent */ \"../src-v5/assets/js/charts.components/TitleComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_AttributeAxisComponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pc/assets/js/charts.components/AttributeAxisComponent */ \"../src-v5/assets/js/charts.components/AttributeAxisComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_PaginationChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @pc/assets/js/charts.components/PaginationChartComponent */ \"../src-v5/assets/js/charts.components/PaginationChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ZoomChartComponent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @pc/assets/js/charts.components/ZoomChartComponent */ \"../src-v5/assets/js/charts.components/ZoomChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_SelectChartComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @pc/assets/js/charts.components/SelectChartComponent */ \"../src-v5/assets/js/charts.components/SelectChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_SvgClipPathComponent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @pc/assets/js/charts.components/SvgClipPathComponent */ \"../src-v5/assets/js/charts.components/SvgClipPathComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_MouseOverChartComponent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @pc/assets/js/charts.components/MouseOverChartComponent */ \"../src-v5/assets/js/charts.components/MouseOverChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_RangeOperateComponent__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @pc/assets/js/charts.components/RangeOperateComponent */ \"../src-v5/assets/js/charts.components/RangeOperateComponent.js\");\n/* harmony import */ var _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../charts.components/LegendComponent */ \"../src-v5/assets/js/charts.components/LegendComponent.js\");\n/**\r\n * 系统提供的K线图\r\n * */\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n// 画图容器组件[ 主要区分svg部分与图例部分 ]\n\n// 数据处理组件[ 解析XY轴配置组的数据 ]\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  chartType: \"kLine\",\n  // [*必填项] 图形名称中英文Key\n  chartDisplayNameKey: \"chart_kLine\",\n  // [*必填项] 图形描述中英文Key\n  chartDescriptionKey: \"chart_kLine_tooltip\",\n  // [*必填项] 图轴配置元素 ( X轴 ，Y轴 )\n  needAxis: {\n    xAxis: {\n      i18nKey: \"chart_candlestick_x_axis_title\"\n    },\n    yAxis: {\n      i18nKey: \"chart_candlestick_y_axis_title\",\n      defaultYAxisNumber: 4\n    }\n  },\n  // [*必填项] 至少一个时间列，四个数值列\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    if (!searchResultStatistic) return false;\n    let measureCount = searchResultStatistic.measureColumns && searchResultStatistic.measureColumns.length,\n      dateCount = searchResultStatistic.dateColumns && searchResultStatistic.dateColumns.length;\n    if (dateCount >= 1 && measureCount >= 4) {\n      satisfiedFlag = true;\n    }\n    return satisfiedFlag;\n  },\n  // 定义可以选择的Axis的列[即chartAxis中的xAxisArea 和 yAxisArea]: X轴只可以选择时间列，Y轴只可以选择数值列\n  getSatisfiedChartAxis: function (searchResultStatistic) {\n    let self = this; //  当前上下文环境是_DataFocusChartTypeList中一个对象\n    const needAxis = self.needAxis || {};\n    if (!needAxis || !searchResultStatistic) return false;\n    let theAxisObj = {};\n    if (needAxis.xAxis) {\n      theAxisObj.xAxis = searchResultStatistic.dateColumns && searchResultStatistic.dateColumns.map(function (h) {\n        return h.idx;\n      });\n    }\n    // Y轴的可选项\n    if (needAxis.yAxis) {\n      theAxisObj.yAxis = searchResultStatistic.measureColumns && searchResultStatistic.measureColumns.map(function (h) {\n        return h.idx;\n      });\n    }\n    if (_DataFocusMethod.isObjEmpty(theAxisObj)) {\n      return false;\n    } else {\n      theAxisObj.name = self.name;\n      theAxisObj.type = self.name;\n      return theAxisObj;\n    }\n  },\n  // 用户配置XY轴时，判断是否是正确的配置\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '';\n    if (!theAxisConfig) return chartErrorMsg;\n\n    // X轴为必填选项\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      chartErrorMsg = 'chart_modify_x_not_null';\n      return chartErrorMsg;\n    }\n\n    // X轴必须只有一个时间列\n    let theDateXAxisLength = theAxisConfig.xAxis && theAxisConfig.xAxis.filter(function (axis) {\n      let dataType = axis.dataType && axis.dataType.toLowerCase() || '';\n      return _DataFocusMethod.dateType.indexOf(dataType) > -1;\n    });\n    if (theAxisConfig.xAxis && (theAxisConfig.xAxis.length > 1 || theDateXAxisLength.length !== theAxisConfig.xAxis.length)) {\n      chartErrorMsg = 'chart_axis_modify_x_only_one_date';\n      return chartErrorMsg;\n    }\n\n    // Y轴为必填项\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      chartErrorMsg = 'chart_modify_y_not_null';\n      return chartErrorMsg;\n    }\n\n    // Y轴必须是四个数值列\n    if (theAxisConfig.yAxis && theAxisConfig.yAxis.length !== 4) {\n      chartErrorMsg = 'chart_axis_modify_y_only_four';\n      return chartErrorMsg;\n    }\n  },\n  // 画图方法\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    let self = this,\n      container = options.container,\n      chartAxis = options.chartAxis,\n      currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      chartConfigures = options.chartConfigures || {};\n\n    // 当前画图区域的缩放比例【会影响到获取字体高度的计算】\n    if (_DataFocusMethod.isPureNumber(chartConfigures._DF_SYS_TRANSFORM_SCALE)) {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].transformScale = chartConfigures._DF_SYS_TRANSFORM_SCALE;\n    }\n    // 获取隐藏聚合方式的标志配置, 即所有属性列的聚合方式不显示在标签内\n    let hideOperatorFlag = false;\n    if (chartConfigures.hide_operator_label) hideOperatorFlag = true;\n    // 获取图形的字体大小配置\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 10,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    chartFontSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateFontSizeConfigure(chartFontSize) || 10;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n      containerResult.svgJqDom.style.color = chartFontColor;\n      containerResult.svgJqDom.style.fill = chartFontColor;\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n    let theXTitleFontSize = chartConfigures.x_axis_title_style && parseInt(chartConfigures.x_axis_title_style.fontSize) || chartFontSize || 10,\n      //  X轴标题字体大小\n      theXAxisFontSize = chartConfigures.x_axis_label_style && parseInt(chartConfigures.x_axis_label_style.fontSize) || chartFontSize || 10,\n      //  X轴刻度字体大小， 默认使用图形统一的字体大小\n      theYTitleFontSize = chartConfigures.y_axis_title_style && parseInt(chartConfigures.y_axis_title_style.fontSize) || chartFontSize || 10,\n      //  Y轴标题字体大小\n      theYAxisFontSize = chartConfigures.y_axis_label_style && parseInt(chartConfigures.y_axis_label_style.fontSize) || chartFontSize || 10,\n      //  Y轴刻度字体大小， 默认使用图形统一的字体大\n      theLegendFontSize = chartConfigures.legend_font_style && parseInt(chartConfigures.legend_font_style.fontSize) || chartFontSize || 10;\n\n    // 阳线颜色[默认红色]，阴线颜色[默认绿色]\n    let riseColor = chartConfigures.chart_candlestick_rise_color || 'rgb(255,0,0)',\n      declineColor = chartConfigures.chart_candlestick_decline_color || 'rgb(0,128,0)',\n      showMaFlag = true;\n    // 显示均线的标志\n    if (chartConfigures.chart_candlestick_show_average_flag === false) showMaFlag = false;\n\n    // 获取图例的位置，默认在右侧\n    let legendPosition = showMaFlag ? 'right' : '';\n    if (legendPosition) {\n      legendPosition = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].translateLegendConfigure(chartConfigures.legend_position);\n    }\n    container.innerHTML = '';\n    // 给柱状图初始化画图容器  SVG图形部分(X轴Y轴图形) / X轴标题(位置) / Y轴标题(位置) / 图例(位置)\n    let containerResult = _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].drawCommonContainer({\n      container: container,\n      legendPosition: legendPosition\n    });\n    if (!containerResult.svgJqDom) return false;\n    // 为了防止图形先画了图例，导致没有数据时有图例的区域在\n    if (!options.datas.columns || !options.datas.columns.length) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n    if (!chartAxis.curXAxis || !chartAxis.curXAxis.length) {\n      console.log('当前图形X轴配置异常');\n      return false;\n    }\n    if (!chartAxis.curYAxis || !chartAxis.curYAxis.length) {\n      console.log('当前图形Y轴配置异常');\n      return false;\n    }\n    // 获取图形的整体宽度和高度\n    let chartWidth = container.offsetWidth,\n      chartHeight = container.offsetHeight;\n\n    // K线图的图例十固定的 ： MA5 / MA10 / MA20 / MA30 ，  画图例元素,先将图例元素画完成后，才可以计算SVG的宽度与高度\n    let savedLegendColorConfig = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].translateLegendColor({\n      configureLegendList: chartConfigures.chart_legend_list\n    });\n    let legendValueList = [{\n        id: _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA5'),\n        legend: \"MA5\",\n        color: 'rgb(204,204,204)'\n      }, {\n        id: _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA10'),\n        legend: \"MA10\",\n        color: 'rgb(179,58,129)'\n      }, {\n        id: _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA20'),\n        legend: \"MA20\",\n        color: 'rgb(208,156,81)'\n      }, {\n        id: _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA30'),\n        legend: \"MA30\",\n        color: 'rgb(76,159,224)'\n      }],\n      defaultLegendList = [];\n    legendValueList && legendValueList.forEach(function (legend, index) {\n      let theLegendId = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', legend.legend);\n      let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n        return theConfig.id === theLegendId;\n      });\n\n      // 保存默认的图例配置\n      defaultLegendList.push({\n        type: 'columnValue',\n        legend: legend.legend,\n        id: theLegendId,\n        index: index,\n        color: legend.color,\n        show: true\n      });\n      legend.id = theLegendId;\n      legend.color = theConfigLegend && theConfigLegend.color || legend.color;\n      legend.show = !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show;\n    });\n    if (showMaFlag && containerResult.legendContainer) {\n      // 画图例元素\n      let drawLegendFlag = !!(chartConfigures.show_legend === undefined || chartConfigures.show_legend);\n      if (drawLegendFlag) {\n        _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].drawAttributeLegend({\n          container: containerResult.legendContainer,\n          chartWidth: chartWidth,\n          chartHeight: chartHeight,\n          legendPosition: legendPosition,\n          legendMaxWidthInVertical: chartConfigures.legend_position_width,\n          legendValueList: legendValueList,\n          legendFontSize: theLegendFontSize,\n          legendFontColor: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontColor,\n          legendBoldStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontBold,\n          legendItalicStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontItalic,\n          legendOffsetSpace: chartConfigures.legend_position_offset,\n          legendIntervalSpace: chartConfigures.legend_position_interval,\n          legendShapeType: _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].translateLegendShapeConfigure(chartConfigures && chartConfigures.legend_shape_type),\n          changeLegendColorFlag: !!(conf.action && !conf.wxFlag) && !conf.inPinboard,\n          changeLegendColorCallback: function (options) {\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              // 修改图形中的图例配置，并将其传给配置组件，然后由配置组件触发画图， 而不是在此处直接画图\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend) {\n                let theMatchedConfigure = chartConfigures.chart_legend_list && chartConfigures.chart_legend_list.find(function (configure) {\n                  return configure.id === theMatchedLegend.id || configure.legend === theMatchedLegend.legend;\n                });\n                if (theMatchedConfigure) {\n                  theMatchedConfigure.color = options.color || undefined;\n                } else {\n                  chartConfigures.chart_legend_list = chartConfigures.chart_legend_list || [];\n                  chartConfigures.chart_legend_list.push({\n                    id: theMatchedLegend.id,\n                    legend: theMatchedLegend.legend,\n                    color: options.color || undefined\n                  });\n                }\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"chart_legend_list\",\n                  value: chartConfigures.chart_legend_list\n                });\n              }\n            }\n          },\n          // 点击 显示/隐藏 图例\n          mousedownEventCallback: function (options) {\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              // 修改图形中的图例配置，并将其传给配置组件，然后由配置组件触发画图， 而不是在此处直接画图\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend) {\n                let theMatchedConfigure = chartConfigures.chart_legend_list && chartConfigures.chart_legend_list.find(function (configure) {\n                  return configure.id === theMatchedLegend.id || configure.legend === theMatchedLegend.legend;\n                });\n                let theShownLegendLength = legendValueList.filter(function (legend) {\n                  return legend.show;\n                }).length;\n                // 如果只有一个图例显示，则不再隐藏最后一个了\n                if (theShownLegendLength === 1 && !!theMatchedLegend.show) return false;\n                if (theMatchedConfigure) {\n                  theMatchedConfigure.show = !theMatchedLegend.show;\n                } else {\n                  chartConfigures.chart_legend_list = chartConfigures.chart_legend_list || [];\n                  chartConfigures.chart_legend_list.push({\n                    id: theMatchedLegend.id,\n                    legend: theMatchedLegend.legend,\n                    show: !theMatchedLegend.show\n                  });\n                }\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"chart_legend_list\",\n                  value: chartConfigures.chart_legend_list\n                });\n              }\n            }\n          }\n        });\n      }\n    }\n\n    // 1. 解析数据为当前画图数据\n    let translateData = _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].translateXYLegendBasicData({\n      tableData: conf.datas,\n      chartAxis: chartAxis,\n      xLabelType: 'dotLine',\n      language: systemLanguage\n    });\n    if (!translateData || !translateData.datas) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n    // 将时间刻度排个序\n    translateData.xLabelDistinct && translateData.xLabelDistinct.sort();\n    // 2. 找出开盘价，收盘价，最高价，最低价对应的数值列\n    let theOpenColumnIdx = -1,\n      theCloseColumnIdx = -1,\n      theHighColumnIdx = -1,\n      theLowColumnIdx = -1;\n    for (let i = 0; i < translateData.datas.length; i++) {\n      let currentData = translateData.datas[i];\n      let theDataArray = [currentData.y0, currentData.y1, currentData.y2, currentData.y3];\n      theDataArray.distinct();\n      theDataArray = theDataArray.filter(function (num) {\n        return _DataFocusMethod.isPureNumber(num);\n      });\n      if (theDataArray && theDataArray.length === 4) {\n        let theMaxNumber = -Infinity,\n          theMinNumber = Infinity;\n        for (let j = 0; j < theDataArray.length; j++) {\n          if (theDataArray[j] > theMaxNumber) {\n            theMaxNumber = theDataArray[j];\n            theHighColumnIdx = j;\n          }\n          if (theDataArray[j] < theMinNumber) {\n            theMinNumber = theDataArray[j];\n            theLowColumnIdx = j;\n          }\n        }\n        for (let j = 0; j < theDataArray.length; j++) {\n          if (j !== theHighColumnIdx && j !== theLowColumnIdx) {\n            theOpenColumnIdx = j;\n            break;\n          }\n        }\n        for (let j = 0; j < theDataArray.length; j++) {\n          if (j !== theHighColumnIdx && j !== theLowColumnIdx && j !== theOpenColumnIdx) {\n            theCloseColumnIdx = j;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    if (theOpenColumnIdx < 0 || theCloseColumnIdx < 0 || theHighColumnIdx < 0 || theLowColumnIdx < 0) {\n      console.log(\"开盘价，收盘价，最高价，最低价对应的列不齐全\");\n      return false;\n    }\n    let theOpenColumn = chartAxis.curYAxis[theOpenColumnIdx],\n      theCloseColumn = chartAxis.curYAxis[theCloseColumnIdx],\n      theHighColumn = chartAxis.curYAxis[theHighColumnIdx],\n      theLowColumn = chartAxis.curYAxis[theLowColumnIdx];\n\n    // 柱状图的柱宽比例\n    let columnWidthPercent = (parseFloat(chartConfigures.chart_column_width_percent_1) || 60) / 100; //  柱状图柱子占刻度宽的比例\n\n    // 画图区域的宽度，高度\n    let svgDrawWidth = $(containerResult.svgJqDom).width(),\n      svgDrawHeight = $(containerResult.svgJqDom).height();\n\n    // 2. 先计算Y轴刻度比例尺[ 左Y轴比例尺 及 右Y轴比例尺 及 左右Y轴宽度 ]\n    // 是否显示Y轴标题\n    let showYTitleFlag = !conf.inPinboard;\n    if (!chartConfigures.y_axis_title_visible || chartConfigures.y_axis_title_visible === 'system_auto_default') {\n      showYTitleFlag = !conf.inPinboard;\n    } else {\n      showYTitleFlag = !!(chartConfigures.y_axis_title_visible === \"option_title_visible_show\");\n    }\n    let yAxisBasicMessage = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].calcMeasureAxisBasicMessage({\n      direction: 'vertical',\n      language: systemLanguage,\n      axisFontSize: theYAxisFontSize,\n      drawWidth: svgDrawWidth,\n      drawHeight: svgDrawHeight,\n      mustHaveZeroFlag: false,\n      //  坐标中必须包含0刻度的标志，默认是true\n      firstMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].translateMeasureAxis(chartAxis.curYAxis, {\n        axisType: 'normal',\n        tableData: conf.datas,\n        scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].translateScaleType(chartConfigures.measure_scale_type),\n        min: chartConfigures.measure_scale_min,\n        max: chartConfigures.measure_scale_max,\n        definedMin: chartConfigures.measure_scale_defined_min || 0,\n        definedSeparate: chartConfigures.measure_scale_step,\n        definedStep: chartConfigures.measure_scale_step_number,\n        definedScaleFormat: chartConfigures.measure_left_y_configure\n      }),\n      showAxisTitleFlag: showYTitleFlag,\n      // Y轴标签没有配置的情况下, 默认是显示的\n      measureAxisVisible: chartConfigures.y_axis_label_visible === undefined ? true : chartConfigures.y_axis_label_visible,\n      titleFontSize: theYTitleFontSize,\n      maxLabelWidthPercent: chartConfigures.y_axis_label_max_width_percent\n    });\n    if (!yAxisBasicMessage || !yAxisBasicMessage.firstMeasure) return false;\n\n    // 3. 计算X轴刻度值 [ 先通过Y轴刻度宽度值 及 标准线宽度值，计算X轴刻度的宽度 ， 画完X轴刻度后才可以确认X轴刻度的高度]\n    let measureSeparate = 5,\n      //  刻度值与轴之间的间隔[ Y轴刻度与Y轴线之间的间隔 ]\n      attributeSeparate = 2,\n      //  X轴刻度与轴之间的间隔 [ X轴刻度与Y轴最小的一条线的间隔 ]\n      titleSeparate = 5,\n      //  轴标题与轴刻度之间的间隔 [ X轴标题与X轴刻度的间隔 ； Y轴标题与Y轴刻度的间隔 ]\n      firstTitleWidth = yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.showTitleFlag ? (yAxisBasicMessage.firstMeasure.measureTitleSize || 0) + titleSeparate : 0,\n      firstMeasureWidth = (yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.measureTickWidth || 0) + measureSeparate,\n      secondTitleWidth = yAxisBasicMessage.secondMeasure && yAxisBasicMessage.secondMeasure.showTitleFlag ? (yAxisBasicMessage.secondMeasure.measureTitleSize || 0) + titleSeparate : 0,\n      secondMeasureWidth = yAxisBasicMessage.secondMeasure ? yAxisBasicMessage.secondMeasure.measureTickWidth + measureSeparate : 0,\n      scaleAttributeWidth = svgDrawWidth - firstMeasureWidth - firstTitleWidth - secondMeasureWidth - secondTitleWidth;\n\n    // 是否显示X轴标题的配置\n    let showXTitleFlag = !conf.inPinboard; //  用户没有配置X轴或配置为自动的情况下，系统按是否是看板自动分配\n    if (!chartConfigures.x_axis_title_visible || chartConfigures.x_axis_title_visible === 'system_auto_default') {\n      showXTitleFlag = !conf.inPinboard;\n    } else {\n      showXTitleFlag = !!(chartConfigures.x_axis_title_visible === \"option_title_visible_show\");\n    }\n    // 是否有动画\n    let animateFlag = !chartConfigures.animation_forbidden;\n\n    // 获取数据标签的配置\n    let labelFontSize = chartConfigures.label_text_font_style && parseInt(chartConfigures.label_text_font_style.fontSize) || Math.max(chartFontSize - 2, 10) || 10,\n      showLabelFlag = false,\n      labelPosition = 'default',\n      labelRotation = 0,\n      labelVisibleMap = 'all',\n      labelChartSpace = 3,\n      //  标签局内局外时，与柱形的距离\n      allowOverlap = false;\n    if (chartConfigures.label_text_visible) {\n      showLabelFlag = true;\n    }\n    if (chartConfigures.label_text_column_position) {\n      switch (conf.chartConfigures.label_text_column_position) {\n        case 'option_label_position_in':\n          labelPosition = 'in';\n          break;\n        case 'option_label_position_out':\n          labelPosition = 'out';\n          break;\n        default:\n          labelPosition = 'default';\n          break;\n      }\n    }\n    if (chartConfigures.label_text_rotation_angle) {\n      switch (chartConfigures.label_text_rotation_angle) {\n        case 'option_label_rotation_90':\n          labelRotation = 90;\n          break;\n        case 'option_label_rotation_270':\n          labelRotation = 270;\n          break;\n        default:\n          labelRotation = 0;\n          break;\n      }\n    }\n    if (chartConfigures.label_text_visible_items) {\n      switch (chartConfigures.label_text_visible_items) {\n        case 'option_label_visible_all':\n          labelVisibleMap = 'all';\n          break;\n        case 'option_label_visible_standard':\n          labelVisibleMap = 'standard';\n          break;\n        default:\n          labelVisibleMap = 'all';\n          break;\n      }\n    }\n    if (chartConfigures.label_text_allow_overlap) {\n      allowOverlap = true;\n    }\n\n    // 计算所有数据的均线（前5日的收盘价的总和 除于 5）/10日均线/20日均线/30日均线\n    let the5DataObj = {},\n      the10DataObj = {},\n      the20DataObj = {},\n      the30DataObj = {};\n    if (showMaFlag) {\n      for (let i = 4; i < translateData.datas.length; i++) {\n        let curData = translateData.datas[i];\n        if (i >= 4) {\n          let the5Count = 0;\n          for (let j = i - 4; j >= 0 && j <= i; j++) {\n            let theData = translateData.datas[j];\n            if (_DataFocusMethod.isPureNumber(theData['y' + theCloseColumnIdx])) the5Count += theData['y' + theCloseColumnIdx];\n          }\n          the5DataObj[curData['x0']] = the5Count / 5;\n          // the5Data.push([attributeAxis.scale(curData['x0']) + attributeAxis.rangeBand/2 , scaleMeasureHeight-theScaleFunc(the5Count/5)]) ;\n        }\n        if (i >= 9) {\n          let the10Count = 0;\n          for (let j = i - 9; j >= 0 && j <= i; j++) {\n            let theData = translateData.datas[j];\n            if (_DataFocusMethod.isPureNumber(theData['y' + theCloseColumnIdx])) the10Count += theData['y' + theCloseColumnIdx];\n          }\n          the10DataObj[curData['x0']] = the10Count / 10;\n          // the10Data.push([attributeAxis.scale(curData['x0']) + attributeAxis.rangeBand/2 , scaleMeasureHeight-theScaleFunc(the10Count/10)]) ;\n        }\n        if (i >= 19) {\n          let the20Count = 0;\n          for (let j = i - 19; j >= 0 && j <= i; j++) {\n            let theData = translateData.datas[j];\n            if (_DataFocusMethod.isPureNumber(theData['y' + theCloseColumnIdx])) the20Count += theData['y' + theCloseColumnIdx];\n          }\n          the20DataObj[curData['x0']] = the20Count / 20;\n          // the20Data.push([attributeAxis.scale(curData['x0']) + attributeAxis.rangeBand/2 , scaleMeasureHeight-theScaleFunc(the20Count/20)]) ;\n        }\n        if (i >= 29) {\n          let the30Count = 0;\n          for (let j = i - 29; j >= 0 && j <= i; j++) {\n            let theData = translateData.datas[j];\n            if (_DataFocusMethod.isPureNumber(theData['y' + theCloseColumnIdx])) the30Count += theData['y' + theCloseColumnIdx];\n          }\n          the30DataObj[curData['x0']] = the30Count / 30;\n          // the30Data.push([attributeAxis.scale(curData['x0'])+ attributeAxis.rangeBand/2 , scaleMeasureHeight-theScaleFunc(the30Count/30)]) ;\n        }\n      }\n    }\n\n    // 画图方法\n    function drawAChartFrame(frameOptions) {\n      frameOptions = frameOptions || {};\n      let scalePaddingTop = 10; //  垂直方向的刻度轴顶部需要预留10px空白\n\n      // 开始计算X轴刻度的起止点\n      let theStart = parseInt(frameOptions.start),\n        theEnd = 0,\n        steps = parseInt(frameOptions.steps) || 0,\n        theAnimateFlag = frameOptions.animateFlag !== undefined ? frameOptions.animateFlag : animateFlag;\n      // 如果没有传入steps，则使用配置值手动计算每页的数量\n      if (!steps) {\n        // 翻页/或初始化\n        // 计算是否有翻页，翻页的pageSize 及 每页的柱宽\n        let minimumColumnWidth = parseFloat(chartConfigures.chart_column_minimum_width) || 10,\n          definedColumnWidth = parseFloat(chartConfigures.chart_column_width);\n        minimumColumnWidth = Math.max(1, minimumColumnWidth);\n        let definedSteps = parseInt(chartConfigures.chart_default_step);\n        // 配置了固定柱宽\n        if (!isNaN(definedColumnWidth)) {\n          steps = Math.floor(scaleAttributeWidth / (definedColumnWidth / columnWidthPercent));\n          steps = Math.min(steps, translateData.xLabelDistinct.length);\n          steps = Math.max(steps, 1); //  至少有一个刻度可以画图\n\n          // 如果当前页展示了所有数据，则按照柱子的实际宽度显示；\n          if (steps === translateData.xLabelDistinct.length) {\n            scaleAttributeWidth = Math.min(scaleAttributeWidth, steps * definedColumnWidth);\n          }\n        }\n        // 配置了固定分页数\n        else if (!isNaN(definedSteps)) {\n          steps = definedSteps;\n          steps = Math.min(steps, translateData.xLabelDistinct.length);\n        }\n        // 默认情况下使用最小刻度宽计算分页数\n        else {\n          // 使用最小柱宽计算每页的pageSize\n          steps = Math.floor(scaleAttributeWidth / minimumColumnWidth);\n        }\n      }\n      // 检正start , step , end的值\n      steps = Math.min(steps, translateData.xLabelDistinct.length);\n      steps = Math.max(steps, 1); //  至少有一个刻度可以画图\n\n      // 默认情况下，需要依据x_axis_right_first_flag来判断start的值： 优先画右侧数据,还是优先画左侧数据\n      if (isNaN(theStart) || theStart === undefined || theStart === null) {\n        if (chartConfigures.x_axis_right_first_flag) {\n          // 优先画右侧数据\n          theStart = translateData.xLabelDistinct.length - steps;\n          theStart = Math.max(0, theStart);\n        } else {\n          theStart = 0;\n        }\n      }\n      theEnd = theStart + steps;\n      if (theEnd > translateData.xLabelDistinct.length) {\n        theEnd = translateData.xLabelDistinct.length;\n        theStart = theEnd - steps;\n      }\n\n      // 清空SVG的区域 [ 需要判断是全部清空还是部分清空 ]\n      containerResult.svgJqDom.innerHTML = '';\n\n      // 画X轴标题[ 如果看板中显示 或者 强制显示的情况 ]\n      let attributeTitleHeight = 0; //  X轴横向摆放的高度\n      if (showXTitleFlag) {\n        let theSettingXTitleText = chartConfigures.x_axis_title_content,\n          theDefaultXTitleText = [];\n        chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n          theDefaultXTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, xAxis, {\n            hideOperator: hideOperatorFlag\n          }));\n        });\n        let theXTitleSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', \"KKK\", {\n          fontSize: theXTitleFontSize\n        });\n        _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].drawAxisTitle({\n          svgContainer: containerResult.svgJqDom,\n          direction: 'horizontal',\n          titleText: theSettingXTitleText || theDefaultXTitleText.join(','),\n          //  标题内容\n          titleAlignment: chartConfigures.x_axis_title_alignment || 'center',\n          titleFontSize: theXTitleFontSize,\n          titleFontColor: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontColor,\n          titleFontBold: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontBold,\n          titleFontItalic: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontItalic,\n          translateTop: svgDrawHeight - theXTitleSize.height,\n          translateLeft: firstTitleWidth + firstMeasureWidth,\n          titleHeight: theXTitleSize.height,\n          titleWidth: scaleAttributeWidth,\n          titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? chartAxis.curXAxis : null\n        });\n        attributeTitleHeight = theXTitleSize.height;\n      }\n      // 画第一个Y轴标题 [ K线图Y轴的标题默认不是四个列的标题，默认是K线指标固定值 ]\n      if (yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.showTitleFlag) {\n        let theDefaultTitleText = [];\n        let theMeasureAxis = yAxisBasicMessage.firstMeasure.measureAxis;\n        theMeasureAxis && theMeasureAxis.axisList && theMeasureAxis.axisList.forEach(function (yAxis) {\n          theDefaultTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }));\n        });\n        let theSettingTitleText = chartConfigures.y_axis_title_content || self.getPluginKeyText(systemLanguage, 'option_axis_title_content_default');\n        _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].drawAxisTitle({\n          svgContainer: containerResult.svgJqDom,\n          direction: 'vertical',\n          titleText: theSettingTitleText || theDefaultTitleText.join(','),\n          //  标题内容\n          titleAlignment: chartConfigures.y_axis_title_alignment || 'center',\n          titleFontSize: theYTitleFontSize,\n          titleFontColor: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontColor,\n          titleFontBold: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontBold,\n          titleFontItalic: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontItalic,\n          translateLeft: 0,\n          translateTop: scalePaddingTop,\n          titleHeight: svgDrawHeight - attributeTitleHeight - attributeSeparate - scalePaddingTop,\n          titleWidth: yAxisBasicMessage.firstMeasure.measureTitleSize,\n          titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? theMeasureAxis && theMeasureAxis.axisList : null\n        });\n      }\n\n      // 画时间区间操作轴\n      // todo [ range区间的折线使用收盘价画折现趋势 ]\n      let rangeContainerHeight = 0;\n      let showOperateBarFlag = !!(chartConfigures.show_operate_bar_flag === undefined || chartConfigures.show_operate_bar_flag);\n      if (showOperateBarFlag) {\n        let theRangeResult = _pc_assets_js_charts_components_RangeOperateComponent__WEBPACK_IMPORTED_MODULE_12__[\"default\"].drawRangeOperateBar({\n          svgContainer: containerResult.svgJqDom,\n          start: theStart,\n          end: theEnd,\n          xLabelDistinct: translateData.xLabelDistinct,\n          datas: translateData.datas && translateData.datas.map(function (data) {\n            return data['y' + theCloseColumnIdx];\n          }),\n          width: scaleAttributeWidth,\n          operateHeight: chartConfigures.operate_bar_height,\n          defaultColor: chartConfigures.operate_bar_color || 'rgba(28,28,28,0.06)',\n          highLightColor: chartConfigures.operate_bar_high_color || 'rgb(93,25,128)',\n          translateLeft: firstTitleWidth + firstMeasureWidth,\n          translateTop: svgDrawHeight - attributeTitleHeight,\n          moveFunc: drawChartContent\n        });\n        rangeContainerHeight = theRangeResult && theRangeResult.height || 0;\n      }\n      function drawChartContent(drawParams) {\n        drawParams = drawParams || {};\n        let start = _DataFocusMethod.isPureNumber(drawParams.start) ? drawParams.start : theStart,\n          end = _DataFocusMethod.isPureNumber(drawParams.end) ? drawParams.end : theEnd,\n          steps = end - start,\n          animateFlag = drawParams.animateFlag !== undefined ? drawParams.animateFlag : theAnimateFlag;\n\n        // 获取当页的数据\n        let xLabelDatas = {};\n        let theLegendData = translateData.datas && translateData.datas.filter(function (data) {\n          let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n          let theIndex = theMappingObj && theMappingObj.index || 0;\n          if (start === end && theIndex === start) {\n            if (!xLabelDatas[data.x0]) xLabelDatas[data.x0] = [];\n            xLabelDatas[data.x0].push(data);\n            return true;\n          } else if (theIndex >= start && theIndex < end) {\n            if (!xLabelDatas[data.x0]) xLabelDatas[data.x0] = [];\n            xLabelDatas[data.x0].push(data);\n            return true;\n          }\n        });\n        let theContentContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).select(\"g.k-line-container\")[0][0];\n        if (theContentContainer) {\n          theContentContainer.innerHTML = '';\n        } else {\n          let theDom = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).append(\"g\").attr(\"class\", \"k-line-container\");\n          theContentContainer = theDom[0][0];\n        }\n\n        // K线图中Y轴刻度根据当前画图数据更新重新计算当前区域内的Y轴坐标轴\n        yAxisBasicMessage = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].calcMeasureAxisBasicMessage({\n          direction: 'vertical',\n          language: systemLanguage,\n          axisFontSize: theYAxisFontSize,\n          drawWidth: svgDrawWidth,\n          drawHeight: svgDrawHeight,\n          mustHaveZeroFlag: false,\n          //  坐标中必须包含0刻度的标志，默认是true\n          firstMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].translateMeasureAxis(chartAxis.curYAxis, {\n            axisType: 'normal',\n            useDataFlag: true,\n            tableData: {\n              columns: theLegendData.map(function (data) {\n                return data.rowData;\n              })\n            },\n            scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].translateScaleType(chartConfigures.measure_scale_type),\n            min: chartConfigures.measure_scale_min,\n            max: chartConfigures.measure_scale_max,\n            definedMin: chartConfigures.measure_scale_defined_min || 0,\n            definedSeparate: chartConfigures.measure_scale_step,\n            definedStep: chartConfigures.measure_scale_step_number,\n            definedScaleFormat: chartConfigures.measure_left_y_configure\n          }),\n          showAxisTitleFlag: showYTitleFlag,\n          // Y轴标签没有配置的情况下, 默认是显示的\n          measureAxisVisible: chartConfigures.y_axis_label_visible === undefined ? true : chartConfigures.y_axis_label_visible,\n          titleFontSize: theYTitleFontSize,\n          maxLabelWidthPercent: chartConfigures.y_axis_label_max_width_percent\n        });\n\n        // X轴画时间散点模式\n        // 画X轴刻度\n        let attributeAxis = _pc_assets_js_charts_components_AttributeAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].drawHorizontalAttributeAxis({\n          axisType: translateData.xLabelType,\n          axisTimeType: translateData.xAxisTimeType,\n          svgContainer: theContentContainer,\n          drawWidth: svgDrawWidth - firstTitleWidth - secondTitleWidth,\n          drawHeight: svgDrawHeight - attributeTitleHeight,\n          axisFontSize: theXAxisFontSize,\n          axisFontColor: chartConfigures.x_axis_label_style && chartConfigures.x_axis_label_style.fontColor,\n          axisFontBold: chartConfigures.x_axis_label_style && chartConfigures.x_axis_label_style.fontBold,\n          axisFontItalic: chartConfigures.x_axis_label_style && chartConfigures.x_axis_label_style.fontItalic,\n          position: 'bottom',\n          attributeValueList: translateData.xLabelDistinct,\n          attributeValueMap: translateData.xLabelDistinctMapping,\n          start: start,\n          end: end,\n          // X轴标签没有配置的情况下, 默认是显示的\n          attributeAxisVisible: chartConfigures.x_axis_label_visible === undefined ? true : chartConfigures.x_axis_label_visible,\n          hoverTranslateLeft: firstTitleWidth + firstMeasureWidth,\n          hoverTranslateTop: scalePaddingTop,\n          hoverTopSeparate: attributeSeparate,\n          scaleWidth: scaleAttributeWidth,\n          maxLabelHeightPercent: chartConfigures.x_axis_label_max_height_percent,\n          rotate: chartConfigures.x_axis_label_dot_line_rotation_value,\n          labelStepWidth: chartConfigures.x_axis_label_dot_line_space_width\n        });\n        if (!attributeAxis || !attributeAxis.attributeContainer) {\n          console.log('画点X属性轴异常');\n          return false;\n        }\n        if (attributeAxis.attributeContainer) {\n          attributeAxis.attributeContainer.attr(\"transform\", \"translate(\" + (firstTitleWidth + firstMeasureWidth) + \" , \" + (svgDrawHeight - (attributeAxis.maxLabelHeight || 0) - attributeTitleHeight - rangeContainerHeight) + \")\");\n        }\n\n        // 画Y轴刻度\n        // 4. 填充Y轴刻度 [ 通过X轴刻度高度确定Y轴比例尺的高度，画Y轴刻度，返回Y轴刻度比例尺 ]\n        // todo 使用区间数据的最大值最小值计算规整的刻度数据，不要从0开始，而是从规整的最小值起点开始算\n        let scaleMeasureHeight = svgDrawHeight - (attributeAxis.maxLabelHeight || 0) - attributeTitleHeight - attributeSeparate - rangeContainerHeight - scalePaddingTop;\n        let measureAxis = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].drawMeasureAxis({\n          svgContainer: theContentContainer,\n          drawWidth: svgDrawWidth,\n          drawHeight: svgDrawHeight,\n          axisFontSize: theYAxisFontSize,\n          axisFontColor: chartConfigures.y_axis_label_style && chartConfigures.y_axis_label_style.fontColor,\n          axisFontBold: chartConfigures.y_axis_label_style && chartConfigures.y_axis_label_style.fontBold,\n          axisFontItalic: chartConfigures.y_axis_label_style && chartConfigures.y_axis_label_style.fontItalic,\n          direction: 'vertical',\n          separate: measureSeparate,\n          scaleHeight: scaleMeasureHeight,\n          scaleLineWidth: scaleAttributeWidth,\n          firstMeasure: yAxisBasicMessage.firstMeasure,\n          // 默认显示网格线\n          showAxisLineFlag: chartConfigures.grid_show_all_line === undefined ? true : chartConfigures.grid_show_all_line,\n          // 网格线样式\n          strokeLineStyle: chartConfigures.grid_line_style,\n          // 只显示零线\n          showOnlyZeroLineFlag: !!chartConfigures.grid_show_only_zero_line,\n          // 零线样式\n          zeroStrokeLineStyle: chartConfigures.grid_zero_line_style\n        });\n        measureAxis.measureContainer.attr(\"transform\", \"translate( \" + firstTitleWidth + \" , \" + scalePaddingTop + \")\");\n\n        // 5. 填充图形 [ 依据X轴高度，Y轴宽度 及 标准线的宽度 确定柱状图形区域的宽度 ]\n        // 画截取区域\n        let chartClipDefId = _pc_assets_js_charts_components_SvgClipPathComponent__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drawClipPath({\n          svgContainer: theContentContainer,\n          chartUUID: chartUUID,\n          width: scaleAttributeWidth,\n          height: scaleMeasureHeight + scalePaddingTop,\n          x: firstTitleWidth + firstMeasureWidth,\n          y: 0\n        });\n        // 画K线图主体[ 无legend ]\n        let theColumnWidth = attributeAxis.rangeBand * columnWidthPercent,\n          //  只显示显示的图例的柱子\n          theOutPadding = attributeAxis.rangeBand * (1 - columnWidthPercent),\n          theScaleFunc = measureAxis.firstMeasureScaleFunc;\n        let theChartDetail = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theContentContainer).append(\"g\").attr(\"class\", \"chart-detail\").attr(\"clip-path\", \"url(#\" + chartClipDefId + \")\");\n        // 因为Y轴的刻度比例尺是值越小高度越大, 计算Y轴柱高时需要调整\n        theScaleFunc.range([0, scaleMeasureHeight]);\n        let theLegendChart = theChartDetail.append('g').attr(\"class\", \"chartset\").attr(\"transform\", \"translate(\" + (firstTitleWidth + firstMeasureWidth) + \" , \" + scalePaddingTop + \")\");\n        let columnBars = theLegendChart.selectAll(\"g.chartset-columns\").data(theLegendData).enter().append(\"g\").attr(\"class\", 'chartset-columns').attr(\"style\", \"cursor:pointer;\").attr(\"xLabel\", function (d) {\n          return d['x0'] + \"\";\n        }).attr(\"transform\", function (d) {\n          return 'translate(' + attributeAxis.scale(d['x0']) + ',' + scaleMeasureHeight + ')';\n        }).on(\"mousemove\", function (d) {\n          let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event,\n            theDom = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this);\n          _DataFocusMethod.stopEventDefault(event);\n          theDom.attr(\"stroke\", theDom.attr(\"color\")).attr(\"stroke-width\", \"3px\").style(\"transition\", \"all ease-in 0.1s\");\n          let theTranslateSuspendText = d['x0'] + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theOpenColumn, {\n            hideOperator: hideOperatorFlag\n          }) + ': ' + _DataFocusMethod.formatData(d['y' + theOpenColumnIdx], theOpenColumn) + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theCloseColumn, {\n            hideOperator: hideOperatorFlag\n          }) + ': ' + _DataFocusMethod.formatData(d['y' + theCloseColumnIdx], theCloseColumn) + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theHighColumn, {\n            hideOperator: hideOperatorFlag\n          }) + ': ' + _DataFocusMethod.formatData(d['y' + theHighColumnIdx], theHighColumn) + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theLowColumn, {\n            hideOperator: hideOperatorFlag\n          }) + ': ' + _DataFocusMethod.formatData(d['y' + theLowColumnIdx], theLowColumn) + '<br />' + '<br />' + 'MA5: ' + (_DataFocusMethod.isPureNumber(the5DataObj[d.x0]) ? _DataFocusMethod.formatData(the5DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />' + 'MA10: ' + (_DataFocusMethod.isPureNumber(the10DataObj[d.x0]) ? _DataFocusMethod.formatData(the10DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />' + 'MA20: ' + (_DataFocusMethod.isPureNumber(the20DataObj[d.x0]) ? _DataFocusMethod.formatData(the20DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />' + 'MA30: ' + (_DataFocusMethod.isPureNumber(the30DataObj[d.x0]) ? _DataFocusMethod.formatData(the30DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />';\n          if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n            let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n            if (theSuspendTextConfig.trim()) {\n              let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n              theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n                xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n                rowData: d.rowData\n              });\n            }\n          }\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(event, theTranslateSuspendText);\n        }).on(\"mouseout\", function (d) {\n          let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event,\n            theDom = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this);\n          theDom.attr(\"stroke\", \"none\").attr(\"stroke-width\", \"\").style(\"transition\", \"\");\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n        });\n\n        // 画柱体\n        let theRect = columnBars.append(\"rect\").attr(\"z-index\", \"3\").attr(\"color\", function (d) {\n          if (d['y' + theOpenColumnIdx] > d['y' + theCloseColumnIdx]) {\n            // 开盘价大于收盘价，则时绿色\n            return declineColor;\n          } else {\n            return riseColor;\n          }\n        }).style(\"fill\", function () {\n          let self = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this);\n          return self.attr(\"color\");\n        }).attr(\"stroke\", \"none\").attr(\"height\", 0).attr(\"x\", 0).attr(\"y\", function (d) {\n          let curOpen = d['y' + theOpenColumnIdx],\n            curClose = d['y' + theCloseColumnIdx];\n          if (!_DataFocusMethod.isPureNumber(curOpen) || !_DataFocusMethod.isPureNumber(curClose)) return;\n          return -theScaleFunc((curOpen + curClose) / 2);\n        }).attr(\"transform\", \"translate(\" + theOutPadding / 2 + \", 0)\").attr(\"width\", theColumnWidth);\n        theRect.transition().duration(animateFlag === undefined || animateFlag ? 1000 : 0).ease(\"linear\").attr(\"height\", function (d) {\n          let curOpen = d['y' + theOpenColumnIdx],\n            curClose = d['y' + theCloseColumnIdx];\n          if (!_DataFocusMethod.isPureNumber(curOpen) || !_DataFocusMethod.isPureNumber(curClose)) return;\n          return Math.abs(theScaleFunc(curOpen) - theScaleFunc(curClose));\n        }).attr(\"y\", function (d) {\n          let curOpen = d['y' + theOpenColumnIdx],\n            curClose = d['y' + theCloseColumnIdx];\n          if (!_DataFocusMethod.isPureNumber(curOpen) || !_DataFocusMethod.isPureNumber(curClose)) return;\n          return -Math.max(theScaleFunc(curOpen), theScaleFunc(curClose));\n        });\n\n        // 画波动线\n        let theLine = columnBars.append(\"rect\").attr(\"z-index\", \"3\").attr(\"color\", function (d) {\n          if (d['y' + theOpenColumnIdx] > d['y' + theCloseColumnIdx]) {\n            // 开盘价大于收盘价，则时绿色\n            return declineColor;\n          } else {\n            return riseColor;\n          }\n        }).style(\"fill\", function () {\n          let self = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this);\n          return self.attr(\"color\");\n        }).attr(\"height\", 0).attr(\"x\", 0).attr(\"y\", function (d) {\n          let curOpen = d['y' + theHighColumnIdx],\n            curClose = d['y' + theLowColumnIdx];\n          if (!_DataFocusMethod.isPureNumber(curOpen) || !_DataFocusMethod.isPureNumber(curClose)) return;\n          return -theScaleFunc((curOpen + curClose) / 2);\n        }).attr(\"transform\", \"translate(\" + (theColumnWidth / 2 + theOutPadding / 2) + \", 0)\").attr(\"width\", \"1\");\n        theLine.transition().duration(animateFlag === undefined || animateFlag ? 1000 : 0).ease(\"linear\").attr(\"height\", function (d) {\n          let curOpen = d['y' + theHighColumnIdx],\n            curClose = d['y' + theLowColumnIdx];\n          if (!_DataFocusMethod.isPureNumber(curOpen) || !_DataFocusMethod.isPureNumber(curClose)) return;\n          return Math.abs(theScaleFunc(curOpen) - theScaleFunc(curClose));\n        }).attr(\"y\", function (d) {\n          let curOpen = d['y' + theHighColumnIdx],\n            curClose = d['y' + theLowColumnIdx];\n          if (!_DataFocusMethod.isPureNumber(curOpen) || !_DataFocusMethod.isPureNumber(curClose)) return;\n          return -Math.max(theScaleFunc(curOpen), theScaleFunc(curClose));\n        });\n\n        // 画移动平均线[5日，10日，20日，30日]\n        if (showMaFlag) {\n          // 画5日均线\n          let the5Data = [],\n            the5LegendConfig = legendValueList && legendValueList.find(function (legend) {\n              return legend.id === _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA5');\n            });\n          theLegendData && theLegendData.forEach(function (data) {\n            let theDataDot = the5DataObj[data['x0']];\n            if (_DataFocusMethod.isPureNumber(theDataDot)) {\n              the5Data.push([attributeAxis.scale(data['x0']) + attributeAxis.rangeBand / 2, scaleMeasureHeight - theScaleFunc(theDataDot)]);\n            }\n          });\n          if (the5Data && the5Data.length >= 2 && the5LegendConfig && the5LegendConfig.show) {\n            let lineScale = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.line().interpolate(\"linear\").x(function (d) {\n              return d[0];\n            }).y(function (d) {\n              return d[1];\n            });\n            let thePath = theLegendChart.append(\"path\").attr(\"class\", \"path path-5-average\").attr(\"d\", function () {\n              return lineScale(the5Data.sortArray(0));\n            }).style(\"stroke\", function () {\n              return the5LegendConfig && the5LegendConfig.color;\n            }).style(\"fill\", \"none\").style(\"stroke-width\", \"1\");\n            let pathLen = thePath[0][0] && thePath[0][0].getTotalLength();\n            thePath.style('stroke-dasharray', '0 ' + pathLen).transition().duration(animateFlag === undefined || animateFlag ? 1000 : 0).ease(\"linear\").style(\"stroke-dasharray\", pathLen + ' ' + pathLen);\n          }\n\n          // 画10日均线\n          let the10Data = [],\n            the10LegendConfig = legendValueList && legendValueList.find(function (legend) {\n              return legend.id === _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA10');\n            });\n          theLegendData && theLegendData.forEach(function (data) {\n            let theDataDot = the10DataObj[data['x0']];\n            if (_DataFocusMethod.isPureNumber(theDataDot)) {\n              the10Data.push([attributeAxis.scale(data['x0']) + attributeAxis.rangeBand / 2, scaleMeasureHeight - theScaleFunc(theDataDot)]);\n            }\n          });\n          if (the10Data && the10Data.length >= 2 && the10LegendConfig && the10LegendConfig.show) {\n            let lineScale = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.line().interpolate(\"linear\").x(function (d) {\n              return d[0];\n            }).y(function (d) {\n              return d[1];\n            });\n            let thePath = theLegendChart.append(\"path\").attr(\"class\", \"path path-10-average\").attr(\"d\", function () {\n              return lineScale(the10Data.sortArray(0));\n            }).style(\"stroke\", function () {\n              return the10LegendConfig && the10LegendConfig.color;\n            }).style(\"fill\", \"none\").style(\"stroke-width\", \"1\");\n            let pathLen = thePath[0][0] && thePath[0][0].getTotalLength();\n            thePath.style('stroke-dasharray', '0 ' + pathLen).transition().duration(animateFlag === undefined || animateFlag ? 1000 : 0).ease(\"linear\").style(\"stroke-dasharray\", pathLen + ' ' + pathLen);\n          }\n\n          // 画20日均线\n          let the20Data = [],\n            the20LegendConfig = legendValueList && legendValueList.find(function (legend) {\n              return legend.id === _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA20');\n            });\n          theLegendData && theLegendData.forEach(function (data) {\n            let theDataDot = the20DataObj[data['x0']];\n            if (_DataFocusMethod.isPureNumber(theDataDot)) {\n              the20Data.push([attributeAxis.scale(data['x0']) + attributeAxis.rangeBand / 2, scaleMeasureHeight - theScaleFunc(theDataDot)]);\n            }\n          });\n          if (the20Data && the20Data.length >= 2 && the20LegendConfig && the20LegendConfig.show) {\n            let lineScale = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.line().interpolate(\"linear\").x(function (d) {\n              return d[0];\n            }).y(function (d) {\n              return d[1];\n            });\n            let thePath = theLegendChart.append(\"path\").attr(\"class\", \"path path-20-average\").attr(\"d\", function () {\n              return lineScale(the20Data.sortArray(0));\n            }).style(\"stroke\", function () {\n              return the20LegendConfig && the20LegendConfig.color;\n            }).style(\"fill\", \"none\").style(\"stroke-width\", \"1\");\n            let pathLen = thePath[0][0] && thePath[0][0].getTotalLength();\n            thePath.style('stroke-dasharray', '0 ' + pathLen).transition().duration(animateFlag === undefined || animateFlag ? 1000 : 0).ease(\"linear\").style(\"stroke-dasharray\", pathLen + ' ' + pathLen);\n          }\n\n          // 画30日均线\n          let the30Data = [],\n            the30LegendConfig = legendValueList && legendValueList.find(function (legend) {\n              return legend.id === _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('legendAxis', 'MA30');\n            });\n          theLegendData && theLegendData.forEach(function (data) {\n            let theDataDot = the30DataObj[data['x0']];\n            if (_DataFocusMethod.isPureNumber(theDataDot)) {\n              the30Data.push([attributeAxis.scale(data['x0']) + attributeAxis.rangeBand / 2, scaleMeasureHeight - theScaleFunc(theDataDot)]);\n            }\n          });\n          if (the30Data && the30Data.length >= 2 && the30LegendConfig && the30LegendConfig.show) {\n            let lineScale = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.line().interpolate(\"linear\").x(function (d) {\n              return d[0];\n            }).y(function (d) {\n              return d[1];\n            });\n            let thePath = theLegendChart.append(\"path\").attr(\"class\", \"path path-30-average\").attr(\"d\", function () {\n              return lineScale(the30Data.sortArray(0));\n            }).style(\"stroke\", function () {\n              return the30LegendConfig && the30LegendConfig.color;\n            }).style(\"fill\", \"none\").style(\"stroke-width\", \"1\");\n            let pathLen = thePath[0][0] && thePath[0][0].getTotalLength();\n            thePath.style('stroke-dasharray', '0 ' + pathLen).transition().duration(animateFlag === undefined || animateFlag ? 1000 : 0).ease(\"linear\").style(\"stroke-dasharray\", pathLen + ' ' + pathLen);\n          }\n        }\n\n        // 画数据标签\n        if (showLabelFlag) {\n          // 默认以收盘价的最大值最小值为标注\n          let theLegendYMax = -Infinity,\n            theLegendYMaxIndex = -1,\n            theLegendYMin = Infinity,\n            theLegendYMinIndex = -1,\n            theLegendYDataIndex = {};\n          theLegendData.forEach(function (data, index) {\n            let d = data['y' + theCloseColumnIdx];\n            if (_DataFocusMethod.isPureNumber(d)) {\n              theLegendYMax = Math.max(d, theLegendYMax);\n              theLegendYMin = Math.min(d, theLegendYMin);\n              theLegendYDataIndex[d] = index;\n            }\n          });\n          theLegendYMaxIndex = theLegendYDataIndex[theLegendYMax];\n          theLegendYMinIndex = theLegendYDataIndex[theLegendYMin];\n          let drewLabelArray = [];\n          let theLabelContainer = theChartDetail.append('g').attr(\"class\", \"chartset\").attr(\"transform\", \"translate(\" + (firstTitleWidth + firstMeasureWidth) + \" , \" + scalePaddingTop + \")\");\n          let theLabelChart = theLabelContainer.selectAll(\"g.chartset-columns-label\").data(theLegendData).enter().append(\"g\").attr(\"class\", \"chartset-columns-label\").attr(\"xLabel\", function (d) {\n            return d['x0'] + \"\";\n          }).attr(\"style\", \"cursor:pointer;\").style('font-size', labelFontSize + 'px').style(\"fill\", chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontColor).style(\"font-weight\", chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontBold === true ? 'bold' : 'inherit').style(\"font-style\", chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontItalic === true ? 'italic' : 'inherit').attr(\"transform\", function (d) {\n            return 'translate(0 , 0)';\n          });\n          let textContainer = theLabelChart.filter(function (d, index) {\n            // 需要判断当前标签是否需要显示\n            if (labelVisibleMap !== 'all' && index !== theLegendYMaxIndex && index !== theLegendYMinIndex) return false;\n            let curd = d['y' + theCloseColumnIdx],\n              curOpenD = d['y' + theOpenColumnIdx],\n              message = _DataFocusMethod.formatData(curd, theCloseColumn);\n            if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n              let theLabelTextConfig = chartConfigures.label_text_regex || '';\n              if (theLabelTextConfig && theLabelTextConfig.trim()) {\n                let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n                message = self.chartConfigureAdvanced.translateMacro(theLabelTextConfig, {\n                  type: 'label',\n                  xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n                  rowData: d.rowData\n                });\n              }\n            }\n            // 数据标签可以换行，有换行时，得换行显示\n            let messageArray = message.trim().split('\\n'),\n              maxMessageWidth = 0,\n              maxMessageHeight = 0;\n            for (let i = 0; i < messageArray.length; i++) {\n              let theMsg = messageArray[i],\n                theMetrics = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theMsg, {\n                  fontSize: labelFontSize\n                });\n              maxMessageWidth = Math.max(theMetrics.width, maxMessageWidth);\n              maxMessageHeight += theMetrics.height;\n            }\n            let messageWidth = maxMessageWidth,\n              messageHeight = maxMessageHeight,\n              scale = 1,\n              oX = attributeAxis.scale(d['x0']) + (theColumnWidth / 2 + theOutPadding / 2),\n              oY = scaleMeasureHeight - theScaleFunc(curd) + messageHeight / 2,\n              originX = oX,\n              originY = oY,\n              overlapFlag = false;\n            // 当前标签的位置信息\n            let curTextPosition = {\n              originX: originX,\n              //  标签元素的rotate位置\n              originY: originY,\n              //  标签元素的rotate位置\n              oX: oX,\n              //  标签元素的translate位置[ 标签的区域的中心点x ]\n              oY: oY,\n              //  标签元素的translate位置[ 标签的区域的中心点y ]\n\n              x: oX - messageWidth / 2,\n              //  标签矩形的左上角点的x\n              y: oY - messageHeight / 2,\n              //  标签矩形的左上角点的y\n              width: messageWidth,\n              //  标签的宽度\n              height: messageHeight,\n              //  标签的高度\n              messageArray: messageArray,\n              //  标签的内容数组【多行的数组】\n              messageHeight: maxMessageHeight / (messageArray.length || 1) //  每行标签的高度\n            };\n            // 如果开盘价大于收盘价，则是跌的，标签的OY位置\n            if (curd < curOpenD) {\n              if (labelPosition === 'in') {\n                // 图形内靠边，负数往上移动\n                oY = theScaleFunc(curd) - (theScaleFunc(curd) - theScaleFunc(curOpenD)) / 2 - messageHeight / 3;\n                scale = -1;\n              } else {\n                // 图形外靠边[默认]\n                oY = theScaleFunc(curd) - messageHeight / 2;\n                scale = 1;\n              }\n              curTextPosition.originX = oX;\n              curTextPosition.originY = oY;\n              curTextPosition.oX = oX;\n              curTextPosition.oY = oY;\n              curTextPosition.x = oX - messageWidth / 2;\n              curTextPosition.y = oY - scale * messageHeight / 2;\n              curTextPosition.width = messageWidth;\n              curTextPosition.height = messageHeight;\n\n              // 如果负数标签旋转，则中心点是往下移 ，则所占矩形的起点 及 宽高的值得调整\n              if (labelRotation > 0) {\n                if (labelPosition === 'in') {\n                  // 图形内靠边，负数往上旋转\n                  curTextPosition.originX = oX;\n                  curTextPosition.originY = oY + messageWidth / 2 - messageHeight / 2;\n                  curTextPosition.oX = oX;\n                  curTextPosition.oY = oY + messageWidth / 2 - messageHeight / 2;\n                  curTextPosition.x = oX - messageHeight / 2;\n                  curTextPosition.y = oY + messageWidth - messageHeight / 2;\n                } else {\n                  // 标签居图形外，负数往下旋转\n                  curTextPosition.originX = oX;\n                  curTextPosition.originY = oY - messageWidth / 2 + messageHeight / 2;\n                  curTextPosition.oX = oX;\n                  curTextPosition.oY = oY - messageWidth / 2 + messageHeight / 2;\n                  curTextPosition.x = oX - messageHeight / 2;\n                  curTextPosition.y = oY + messageHeight / 2;\n                }\n                curTextPosition.width = messageHeight;\n                curTextPosition.height = messageWidth;\n              }\n\n              // 如果与图形之间有间隔 , 父数，标签居外时标签下移； 居中时不移动； 局内时上移； [ 由scale决定 ]\n              if (labelChartSpace) {\n                curTextPosition.oY = curTextPosition.oY - scale * labelChartSpace;\n                curTextPosition.y = curTextPosition.y - scale * labelChartSpace;\n              }\n\n              // 负数数往下超出了区域\n              // 默认情况下，负值如果图形下方放的下，图形外靠边；如果图形外放不下，网上移动放不下的距离\n              if (curTextPosition.y - curTextPosition.height < 0) {\n                curTextPosition.y = curTextPosition.height;\n                curTextPosition.oY = curTextPosition.height / 2;\n                curTextPosition.originY = curTextPosition.height / 2;\n              }\n            }\n            // 正值的OY位置\n            else {\n              if (labelPosition === 'in') {\n                // 图形内靠边\n                oY = theScaleFunc(curd) - (theScaleFunc(curd) - theScaleFunc(curOpenD)) / 2 + messageHeight / 3;\n                scale = -1;\n              } else {\n                // 图形外靠边[默认]\n                oY = theScaleFunc(curd) + messageHeight / 2;\n                scale = 1;\n              }\n              curTextPosition.originX = oX;\n              curTextPosition.originY = oY;\n              curTextPosition.oX = oX;\n              curTextPosition.oY = oY;\n              curTextPosition.x = oX - messageWidth / 2;\n              curTextPosition.y = oY + scale * messageHeight / 2;\n              curTextPosition.width = messageWidth;\n              curTextPosition.height = messageHeight;\n\n              // 如果正数标签旋转，则中心点是往下移 ，则所占矩形的起点 及 宽高的值得调整\n              if (labelRotation > 0) {\n                if (labelPosition === 'in') {\n                  // 图形内靠边，正数往下旋转\n                  curTextPosition.originX = oX;\n                  curTextPosition.originY = oY - messageWidth / 2 + messageHeight / 2;\n                  curTextPosition.oX = oX;\n                  curTextPosition.oY = oY - messageWidth / 2 + messageHeight / 2;\n                  curTextPosition.x = oX - messageHeight / 2;\n                  curTextPosition.y = oY - messageHeight / 2;\n                } else {\n                  // 图形居外，正数往上旋转\n                  curTextPosition.originX = oX;\n                  curTextPosition.originY = oY + messageWidth / 2 - messageHeight / 2;\n                  curTextPosition.oX = oX;\n                  curTextPosition.oY = oY + messageWidth / 2 - messageHeight / 2;\n                  curTextPosition.x = oX - messageHeight / 2;\n                  curTextPosition.y = oY + messageWidth - messageHeight / 2;\n                }\n                curTextPosition.width = messageHeight;\n                curTextPosition.height = messageWidth;\n              }\n\n              // 如果与图形之间有间隔 , 正数，标签上移\n              if (labelChartSpace) {\n                curTextPosition.oY = curTextPosition.oY + scale * labelChartSpace;\n                curTextPosition.y = curTextPosition.y + scale * labelChartSpace;\n              }\n\n              // 正数往上超出了区域\n              // 默认情况下，如果图形上方放的下，图形外靠边；如果图形外放不下，则正数往下移动放不下的距离\n              if (scaleMeasureHeight + scalePaddingTop < curTextPosition.y) {\n                curTextPosition.y = scaleMeasureHeight + scalePaddingTop - curTextPosition.height;\n                curTextPosition.oY = scaleMeasureHeight + scalePaddingTop - curTextPosition.height / 2;\n                curTextPosition.originY = scaleMeasureHeight + scalePaddingTop - curTextPosition.height / 2;\n              }\n            }\n\n            // 左右超出画图区域无需分正负数\n            // 如果当前数据标签显示区域超出了图形左侧范围，则标签往左放 ； 当前数据标签超出右侧图形范围，则标签往左放 ；\n            if (curTextPosition.x < 0) {\n              // 标签左侧超出了图形\n              curTextPosition.x = 0;\n              curTextPosition.oX = curTextPosition.width / 2;\n              curTextPosition.originX = curTextPosition.width / 2;\n            } else if (curTextPosition.x + curTextPosition.width > scaleAttributeWidth) {\n              // 标签右侧超出了图形\n              curTextPosition.x = scaleAttributeWidth - curTextPosition.width;\n              curTextPosition.oX = scaleAttributeWidth - curTextPosition.width / 2;\n              curTextPosition.originX = scaleAttributeWidth - curTextPosition.width / 2;\n            }\n\n            // 如果配置允许重叠（即allowOverlap = true) 则不需要判断文字标签是否会重叠了\n            for (let i = drewLabelArray.length - 1; !allowOverlap && i >= 0; i--) {\n              let compScatterTextDom = drewLabelArray[i],\n                curScatterTextDom = curTextPosition;\n\n              // 数据标签经过垂直旋转后的矩形信息需要更新\n              if (labelRotation !== 0) {\n                curScatterTextDom = {\n                  x: curTextPosition.x + curTextPosition.width / 2 - curTextPosition.height / 2,\n                  y: curTextPosition.y + curTextPosition.height / 2 - curTextPosition.width / 2,\n                  width: curTextPosition.height,\n                  height: curTextPosition.width\n                };\n                compScatterTextDom = {\n                  x: compScatterTextDom.x + compScatterTextDom.width / 2 - compScatterTextDom.height / 2,\n                  y: compScatterTextDom.y + compScatterTextDom.height / 2 - compScatterTextDom.width / 2,\n                  width: compScatterTextDom.height,\n                  height: compScatterTextDom.width\n                };\n              }\n              if (_pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isOverlap(curScatterTextDom, compScatterTextDom)) {\n                overlapFlag = true;\n                break;\n              }\n            }\n            if (allowOverlap || !overlapFlag) {\n              drewLabelArray.push(curTextPosition);\n              d.labelPosition = curTextPosition;\n              return true;\n            }\n            return false;\n          }).append(\"g\").attr(\"class\", 'label-container');\n          // 主要用于矫正位置的rect\n          textContainer.append(\"rect\").style(\"fill\", \"none\")\n          // .style(\"fill\" , \"rgba(0,0,0,0.5)\")\n          .attr(\"width\", function (d) {\n            let position = d.labelPosition;\n            return position && position.width;\n          }).attr(\"height\", function (d) {\n            let position = d.labelPosition;\n            return position && position.height;\n          }).attr(\"x\", function (d) {\n            let position = d.labelPosition;\n            return position && position.oX - position.width / 2;\n          }).attr(\"y\", function (d) {\n            let position = d.labelPosition;\n            return position && scaleMeasureHeight - position.oY - position.height / 2;\n          });\n          let texts = textContainer.append(\"text\").attr(\"class\", \"labels show-labels\").style(\"fill\", \"inherit\").style(\"stroke\", \"none\").style(\"text-anchor\", \"middle\").style(\"dominant-baseline\", \"middle\").attr(\"x\", function (d) {\n            let position = d.labelPosition;\n            return position && position.oX;\n          }).attr(\"y\", function (d) {\n            let position = d.labelPosition;\n            return position && scaleMeasureHeight - position.oY;\n          }).attr(\"transform\", \"rotate(\" + labelRotation + \")\").attr(\"transform-origin\", function (d) {\n            let position = d.labelPosition;\n            if (position && labelRotation > 0) {\n              return position.originX + 'px ' + (scaleMeasureHeight - position.originY) + 'px';\n            }\n          });\n          // 数据标签换行的处理\n          texts.each(function (d) {\n            let position = d.labelPosition,\n              theTextDom = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this),\n              theMessageArray = position && position.messageArray;\n            if (theMessageArray && theMessageArray.length) {\n              for (let i = 0; i < theMessageArray.length; i++) {\n                theTextDom.append(\"tspan\").style(\"dominant-baseline\", \"inherit\").attr(\"x\", position.oX).attr(\"y\", scaleMeasureHeight - position.oY - position.messageHeight * theMessageArray.length / 2 + position.messageHeight / 2 + i * position.messageHeight).text(theMessageArray[i]);\n              }\n            }\n          });\n        }\n\n        // 计算完之后恢复刻度的比例尺\n        theScaleFunc.range([scaleMeasureHeight, 0]);\n\n        // 画翻页的元素 [ 翻页也是临时的，不保存在配置中的 ]\n        _pc_assets_js_charts_components_PaginationChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].drawHorizontalPagination({\n          chartContainer: containerResult.svgContainer,\n          translateLeft: firstTitleWidth,\n          translateTop: scalePaddingTop,\n          height: scaleMeasureHeight,\n          width: scaleAttributeWidth + firstMeasureWidth,\n          start: start,\n          pageSize: steps,\n          totalNumber: translateData.xLabelDistinct.length,\n          pagingFunc: drawAChartFrame\n        });\n\n        // 绑定缩放的事件 [ 缩放事件都是临时的，保存在配置中的 ]\n        _pc_assets_js_charts_components_ZoomChartComponent__WEBPACK_IMPORTED_MODULE_8__[\"default\"].zoomColumnChart({\n          svgContainer: containerResult.svgJqDom,\n          start: start,\n          steps: steps,\n          zoomingFunc: drawAChartFrame\n        });\n        // 区域选择事件\n        _pc_assets_js_charts_components_SelectChartComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"].selectHorizontalSvgColumnChart({\n          svgContainer: containerResult.svgContainer,\n          translateLeft: firstTitleWidth + firstMeasureWidth,\n          translateTop: scalePaddingTop,\n          width: scaleAttributeWidth,\n          height: scaleMeasureHeight,\n          rangeBand: attributeAxis.rangeBand,\n          prevStart: start,\n          prevSteps: steps,\n          selectFunc: drawAChartFrame\n        });\n\n        // 鼠标移入事件\n        // 图形区域移入，显示每个刻度的固定的数据信息 及 阴影\n        let prevXLabelIndex = -1,\n          theMouseoverHtml,\n          showMousemoveTimer;\n        _pc_assets_js_charts_components_MouseOverChartComponent__WEBPACK_IMPORTED_MODULE_11__[\"default\"].handleSvgMouseOverEvent({\n          svgContainer: containerResult.svgJqDom,\n          direction: \"horizontal\",\n          width: scaleAttributeWidth,\n          height: scaleMeasureHeight,\n          left: firstTitleWidth + firstMeasureWidth,\n          top: scalePaddingTop,\n          prevStart: start,\n          hoverWidth: attributeAxis.rangeBand,\n          hoverHeight: scaleMeasureHeight,\n          mousemoveCallback: function (options) {\n            options = options || {};\n            let theXLabelIndex = parseInt(options.xLabelIndex);\n            if (!isNaN(theXLabelIndex) || !options.event) {\n              // 显示当前X刻度的数据信息\n              if (prevXLabelIndex !== theXLabelIndex) {\n                prevXLabelIndex = theXLabelIndex;\n\n                // 显示X刻度 及 各个图例的颜色，图例名称 及 数值\n                let theXLabel = translateData.xLabelDistinct && translateData.xLabelDistinct[theXLabelIndex];\n                if (xLabelDatas[theXLabel] && xLabelDatas[theXLabel].length) {\n                  let theMouseoverHtml = '';\n                  xLabelDatas[theXLabel] && xLabelDatas[theXLabel].forEach(function (d) {\n                    if (theMouseoverHtml) theMouseoverHtml += '<p></p>';\n                    let theColor = riseColor;\n                    if (d['y' + theOpenColumnIdx] > d['y' + theCloseColumnIdx]) theColor = declineColor;\n                    let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n                    theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theColor + ';margin-right:2px;\"></span>';\n                    theMouseoverHtml += (theXLabelMapping && theXLabelMapping.text || d['x0']) + '<br />';\n                    theMouseoverHtml += _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theOpenColumn, {\n                      hideOperator: hideOperatorFlag\n                    }) + ': ' + _DataFocusMethod.formatData(d['y' + theOpenColumnIdx], theOpenColumn) + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theCloseColumn, {\n                      hideOperator: hideOperatorFlag\n                    }) + ': ' + _DataFocusMethod.formatData(d['y' + theCloseColumnIdx], theCloseColumn) + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theHighColumn, {\n                      hideOperator: hideOperatorFlag\n                    }) + ': ' + _DataFocusMethod.formatData(d['y' + theHighColumnIdx], theHighColumn) + '<br />' + _DataFocusMethod.getDisplayOperateColumn(systemLanguage, theLowColumn, {\n                      hideOperator: hideOperatorFlag\n                    }) + ': ' + _DataFocusMethod.formatData(d['y' + theLowColumnIdx], theLowColumn) + '<br />' + '<br />' + 'MA5: ' + (_DataFocusMethod.isPureNumber(the5DataObj[d.x0]) ? _DataFocusMethod.formatData(the5DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />' + 'MA10: ' + (_DataFocusMethod.isPureNumber(the10DataObj[d.x0]) ? _DataFocusMethod.formatData(the10DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />' + 'MA20: ' + (_DataFocusMethod.isPureNumber(the20DataObj[d.x0]) ? _DataFocusMethod.formatData(the20DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />' + 'MA30: ' + (_DataFocusMethod.isPureNumber(the30DataObj[d.x0]) ? _DataFocusMethod.formatData(the30DataObj[d.x0], chartConfigures.measure_left_y_configure) : '-') + '<br />';\n                  });\n                  _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(options.event, theMouseoverHtml);\n                }\n              }\n            } else {\n              prevXLabelIndex = -1;\n              theMouseoverHtml = '';\n              _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n              if (showMousemoveTimer) clearTimeout(showMousemoveTimer);\n            }\n          },\n          mouseoutCallback: function () {\n            // 清除悬浮框\n            prevXLabelIndex = -1;\n            theMouseoverHtml = '';\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n            if (showMousemoveTimer) clearTimeout(showMousemoveTimer);\n          }\n        });\n      }\n      drawChartContent();\n    }\n    drawAChartFrame();\n\n    /* *\r\n    * 画完图需要告诉外部的配置组件，当前图形的配置：\r\n    *   X轴类型是单层刻度/多层刻度/时间轴 及 单层刻度列表 ； 或者用户配置的类型 ；\r\n    *   标题是自动显示，还是自动隐藏 ； 或者是用户配置的显示及隐藏\r\n    *   是否有右Y轴\r\n    *   是否有图例，属性列图例；多Y轴图例 ；\r\n    * */\n    let returnConfigureAutoValue = {};\n    // 如果用户配置X轴标题显示自动，则返回给图形配置组件提供当前X轴标题的自动显示类型\n    if (!chartConfigures.x_axis_title_visible || chartConfigures.x_axis_title_visible === 'system_auto_default') {\n      returnConfigureAutoValue.x_axis_title_visible = showXTitleFlag ? 'option_title_visible_show' : 'option_title_visible_hide';\n    }\n\n    // 如果用户配置Y轴标题显示自动，则返回给图形配置组件提供当前Y轴标题的自动显示类型\n    if (!chartConfigures.y_axis_title_visible || chartConfigures.y_axis_title_visible === 'system_auto_default') {\n      returnConfigureAutoValue.y_axis_title_visible = yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.showTitleFlag ? 'option_title_visible_show' : 'option_title_visible_hide';\n    }\n\n    // K线图默认有图例\n    returnConfigureAutoValue.has_legend_flag = true;\n    returnConfigureAutoValue.legendValueList = legendValueList;\n    returnConfigureAutoValue.defaultLegendList = defaultLegendList;\n    /**\r\n     * @return\r\n     *      {\r\n     *          // 当前图形自动识别的配置，主要可以用于chartConfigureList中条件判断\r\n     *          chartAutoConfigures: {}\r\n     *      }\r\n     * */\n    return {\n      chartAutoConfigures: returnConfigureAutoValue\n    };\n  },\n  chartConfigureList: [{\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      }\n    },\n    // 固定柱宽\n    {\n      key: \"chart_column_width\",\n      title: \"option_chart_column_width\",\n      description: \"option_chart_column_width_desc\",\n      placeholder: 'option_default_value',\n      type: \"input\",\n      min: 5,\n      allowNullFlag: true,\n      withoutSlider: true,\n      require: \"!chart_default_step\"\n    },\n    // 固定分页条目数【 没有配置固定柱宽的情况下才有效 】\n    {\n      key: \"chart_default_step\",\n      title: \"option_chart_default_step\",\n      description: \"option_chart_default_step_desc\",\n      placeholder: 'option_default_value',\n      type: \"input\",\n      min: 1,\n      allowNullFlag: true,\n      withoutSlider: true,\n      require: \"!chart_column_width\"\n    },\n    // 最小柱宽[ 没有配置固定柱宽及每页条目数的情况下，才可以使用 ]\n    {\n      key: \"chart_column_minimum_width\",\n      title: \"option_chart_column_minimum_width\",\n      description: \"option_chart_column_minimum_width_desc\",\n      type: \"input\",\n      min: 5,\n      defaultNumber: 5,\n      allowNullFlag: true,\n      withoutSlider: true,\n      require: \"!chart_column_width;!chart_default_step\"\n    },\n    // 柱宽比例\n    {\n      key: \"chart_column_width_percent_1\",\n      title: \"option_chart_column_width_percent\",\n      description: \"option_chart_column_width_percent_desc\",\n      type: \"input\",\n      min: 10,\n      max: 100,\n      defaultNumber: 60,\n      step: 10,\n      unit: \"%\"\n    },\n    // 隐藏聚合方式 [ 图例的聚合方式 ]\n    {\n      key: \"hide_operator_label\",\n      title: \"option_hide_operator_label\",\n      description: \"option_hide_operator_label_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 禁止图形动画\n    {\n      key: \"animation_forbidden\",\n      title: \"option_animation_forbidden\",\n      description: \"option_animation_forbidden_desc\",\n      type: \"checkbox-prev\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 颜色：阳线颜色(默认红色)，阴线颜色（默认绿色） ，显示均线[默认显示] , 5日均线，10日均线，20日均线，30日均线\n  {\n    key: \"category_color\",\n    title: \"category_color\",\n    options: [{\n      key: \"chart_candlestick_rise_color\",\n      title: \"option_chart_candlestick_rise_color\",\n      type: \"color\",\n      defaultColor: 'rgb(255,0,0)'\n    }, {\n      key: \"chart_candlestick_decline_color\",\n      title: \"option_chart_candlestick_decline_color\",\n      type: \"color\",\n      defaultColor: 'rgb(0,128,0)'\n    }, {\n      key: \"chart_candlestick_show_average_flag\",\n      title: \"option_chart_candlestick_show_average_flag\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 图例类型是单个属性列的情况下，配置各个图例的颜色，虚实....\n    {\n      key: \"chart_legend_list\",\n      // \"chart_custom_legend_new\",\n      type: \"legendList\",\n      legendConfigSet: ['color', 'show'],\n      //  当前图例可以配置的值 color: 颜色 ； shape:形状 ；dash： 虚实 ； shadow: 阴影\n      legendValueList: \"legendValueList\",\n      //  当前所有图例使用的配置值\n      defaultLegendList: \"defaultLegendList\",\n      //  当前所有图例的默认值\n      require: \"chart_candlestick_show_average_flag\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // X轴： X刻度类型[单层/多层/时间]，最高高度，倾斜角度，X轴标题显示，标题自定义，隐藏X轴\n  {\n    key: \"category_x_axis\",\n    title: \"category_x_axis\",\n    options: [\n    // 优先画X轴最右侧的数据\n    {\n      key: \"x_axis_right_first_flag\",\n      title: \"option_x_axis_right_first_flag\",\n      description: \"option_x_axis_right_first_flag_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 显示隐藏X轴标签\n    {\n      key: \"x_axis_label_visible\",\n      title: \"option_axis_label_visible\",\n      type: 'checkbox-prev',\n      defaultValue: true\n    },\n    // X轴标签字体样式 [ 显示轴标签才可以配置， 大小 ，颜色，字体，加粗，斜体，下划线 ]\n    {\n      key: \"x_axis_label_style\",\n      title: \"option_font_style\",\n      type: 'fontStyle',\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"x_axis_label_visible\"\n    },\n    // X轴单层属性下，旋转角度\n    {\n      // attribute_label_rotate\n      key: \"x_axis_label_dot_line_rotation_value\",\n      title: \"option_x_axis_label_dot_line_rotation_value\",\n      type: 'input',\n      withoutSlider: true,\n      defaultNumber: 30,\n      min: 0,\n      max: 180,\n      // X轴是单层散点模式 且 显示轴标签时，才可以配置旋转角度\n      require: \"x_axis_label_visible\"\n    },\n    // X轴单层属性下，刻度间距\n    {\n      key: \"x_axis_label_dot_line_space_width\",\n      title: \"option_x_axis_label_dot_line_space_width\",\n      description: \"option_x_axis_label_dot_line_space_width_desc\",\n      type: 'input',\n      withoutSlider: true,\n      min: 0,\n      max: 999,\n      defaultNumber: 50,\n      // X轴是单层散点模式 且 显示轴标签时，才可以配置旋转角度\n      require: \"x_axis_label_visible\"\n    },\n    // X轴最大高度限制\n    {\n      // attribute_label_max_height\n      key: \"x_axis_label_max_height_percent\",\n      title: \"option_x_axis_label_max_height_percent\",\n      description: \"option_x_axis_label_max_height_percent_desc\",\n      type: 'input',\n      min: 0,\n      max: 100,\n      defaultNumber: 30,\n      step: 5,\n      require: \"x_axis_label_visible\"\n    },\n    // X轴标题自动 / 强制显示 / 强制隐藏 [ 平铺选项 ]\n    {\n      key: \"x_axis_title_visible\",\n      title: \"option_axis_title_visible\",\n      description: \"option_axis_title_visible_desc\",\n      type: 'selectTile',\n      prevIcon: \"eye-icon\",\n      openEyeValue: \"option_title_visible_show\",\n      selection: [\"system_auto_default\", \"option_title_visible_show\", \"option_title_visible_hide\"],\n      explainDefaultFlag: true,\n      defaultValue: \"system_auto_default\"\n    },\n    // 自定义的X轴标题内容\n    {\n      key: \"x_axis_title_content\",\n      title: \"option_axis_title_content\",\n      description: \"option_axis_title_content_desc\",\n      type: \"text\",\n      require: \"x_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题字体样式\n    {\n      key: \"x_axis_title_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"x_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题对齐方式\n    {\n      key: \"x_axis_title_alignment\",\n      title: \"option_font_alignment\",\n      type: \"fontAlign\",\n      defaultValue: \"center\",\n      require: \"x_axis_title_visible=option_title_visible_show\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // Y轴：Y轴刻度最宽宽度，Y轴标尺，Y轴标题\n  {\n    key: \"category_y_axis\",\n    title: \"category_y_axis\",\n    options: [\n    // 显示隐藏Y轴标签\n    {\n      key: \"y_axis_label_visible\",\n      title: \"option_axis_label_visible\",\n      type: 'checkbox-prev',\n      defaultValue: true\n    },\n    // Y轴标签字体样式 [ 显示轴标签才可以配置， 大小 ，颜色，字体，加粗，斜体，下划线 ]\n    {\n      key: \"y_axis_label_style\",\n      title: \"option_font_style\",\n      type: 'fontStyle',\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"y_axis_label_visible\"\n    },\n    // Y轴数据格式\n    {\n      key: \"measure_left_y_configure\",\n      title: \"option_measure_configure\",\n      description: \"option_measure_left_y_configure_desc\",\n      type: \"axisFormat\"\n    },\n    // Y轴最大宽度限制\n    {\n      key: \"y_axis_label_max_width_percent\",\n      title: \"option_y_axis_label_max_width_percent\",\n      type: 'input',\n      min: 0,\n      max: 100,\n      defaultNumber: 30,\n      step: 5,\n      require: \"y_axis_label_visible\"\n    },\n    // Y轴刻度类型[ 自动，自定义刻度间隔 ]\n    {\n      key: \"measure_scale_type\",\n      title: \"option_measure_scale_type\",\n      description: \"option_measure_scale_type_desc\",\n      type: \"selectTile\",\n      selection: [\"option_default_value\", \"option_measure_scale_type_define\"],\n      defaultValue: \"option_default_value\"\n    },\n    // 默认类型下最大值\n    {\n      key: \"measure_scale_min\",\n      title: \"option_measure_scale_min\",\n      description: \"option_measure_scale_min_desc\",\n      type: \"text\",\n      require: 'measure_scale_type!=option_measure_scale_type_define'\n    },\n    // 默认类型下最小值\n    {\n      key: \"measure_scale_max\",\n      title: \"option_measure_scale_max\",\n      description: \"option_measure_scale_max_desc\",\n      type: \"text\",\n      require: 'measure_scale_type!=option_measure_scale_type_define'\n    },\n    // 自定义类型下最小值\n    {\n      key: \"measure_scale_defined_min\",\n      title: \"option_measure_scale_min\",\n      description: \"option_measure_scale_defined_min_desc\",\n      type: \"text\",\n      default: \"0\",\n      require: 'measure_scale_type=option_measure_scale_type_define'\n    },\n    // 自定义类型下间隔值\n    {\n      key: \"measure_scale_step\",\n      title: \"option_measure_scale_step\",\n      description: \"option_measure_scale_step_desc\",\n      type: \"text\",\n      require: 'measure_scale_type=option_measure_scale_type_define'\n    },\n    // 自定义类型下的步数\n    {\n      key: \"measure_scale_step_number\",\n      title: \"option_measure_scale_step_number\",\n      description: \"option_measure_scale_step_number_desc\",\n      type: \"input\",\n      min: 2,\n      defaultNumber: 5,\n      require: 'measure_scale_type=option_measure_scale_type_define'\n    },\n    // Y轴标题自动 / 强制显示 / 强制隐藏 [ 平铺选项 ]\n    {\n      key: \"y_axis_title_visible\",\n      title: \"option_axis_title_visible\",\n      description: \"option_axis_title_visible_desc\",\n      type: 'selectTile',\n      prevIcon: \"eye-icon\",\n      openEyeValue: \"option_title_visible_show\",\n      selection: [\"system_auto_default\", \"option_title_visible_show\", \"option_title_visible_hide\"],\n      explainDefaultFlag: true,\n      defaultValue: \"system_auto_default\"\n    },\n    // 自定义的Y轴标题内容\n    {\n      key: \"y_axis_title_content\",\n      title: \"option_axis_title_content\",\n      type: \"text\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题字体样式\n    {\n      key: \"y_axis_title_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题对齐方式\n    {\n      key: \"y_axis_title_alignment\",\n      title: \"option_font_alignment\",\n      type: \"fontAlign\",\n      defaultValue: \"center\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  //图例： 是否隐藏，图例色块形状，图例位置，图例宽度，图例间隔 ， 图例限制条目数\n  {\n    key: \"category_legend_config\",\n    title: \"category_legend_config\",\n    require: \"has_legend_flag\",\n    options: [\n    // 隐藏图例\n    {\n      key: \"show_legend\",\n      title: \"option_map_info_show\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"legend_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"show_legend\"\n    },\n    // 图例形状\n    {\n      key: \"legend_shape_type\",\n      title: \"option_legend_shape_type\",\n      description: \"option_legend_shape_type_desc\",\n      type: \"select\",\n      selection: [\"option_legend_shape_type_circle\", \"option_legend_shape_type_three\", \"option_legend_shape_type_four\", \"option_legend_shape_type_rect\", \"option_legend_shape_type_five\", \"option_legend_shape_type_diamond\", \"option_legend_shape_type_loop\"],\n      require: \"show_legend\"\n    },\n    // 图例位置\n    {\n      key: \"legend_position\",\n      title: \"option_legend_position\",\n      description: \"option_legend_position_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_position_right\", \"option_position_top\", \"option_position_bottom\", \"option_position_right_top\"],\n      require: \"show_legend\"\n    },\n    // 图例宽度\n    {\n      key: \"legend_position_width\",\n      title: \"option_legend_position_width\",\n      description: \"option_legend_position_width_desc\",\n      type: \"input\",\n      withoutSlider: true,\n      min: 0,\n      max: 200,\n      defaultNumber: 80,\n      require: \"show_legend;legend_position=option_position_top,option_position_bottom\"\n    },\n    // 图例离画图区域的间隔\n    {\n      key: \"legend_position_offset\",\n      title: \"option_legend_position_offset\",\n      description: \"option_legend_position_offset_desc\",\n      type: \"input\",\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      defaultNumber: 5,\n      require: \"show_legend\"\n    },\n    // 图例之间的间隔\n    {\n      key: \"legend_position_interval\",\n      title: \"option_legend_position_interval\",\n      description: \"option_legend_position_interval_desc\",\n      type: \"input\",\n      allowNullFlag: true,\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      require: \"show_legend\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 操作栏: 显示隐藏，高度，颜色\n  {\n    key: \"category_operate_bar_config\",\n    title: \"category_operate_bar_config\",\n    options: [\n    // 显示/隐藏\n    {\n      key: \"show_operate_bar_flag\",\n      title: \"option_map_info_show\",\n      type: 'checkbox-prev',\n      defaultValue: true\n    },\n    // 操作栏高度\n    {\n      key: \"operate_bar_height\",\n      title: \"pinboard_global_height\",\n      type: 'input',\n      allowNullFlag: true,\n      min: 10,\n      defaultNumber: 25,\n      unit: 'px',\n      require: \"show_operate_bar_flag\"\n    },\n    // 默认颜色\n    {\n      key: \"operate_bar_color\",\n      title: \"pinboard_component_tab_default_color\",\n      type: 'color',\n      defaultColor: 'rgba(28,28,28,0.06)',\n      require: \"show_operate_bar_flag\"\n    },\n    // 高亮颜色\n    {\n      key: \"operate_bar_high_color\",\n      title: \"option_high_light_color\",\n      type: 'color',\n      hideAlpha: true,\n      defaultColor: 'rgb(93,25,128)',\n      require: \"show_operate_bar_flag\"\n    }]\n  },\n  // 网格线配置\n  {\n    key: \"category_grid_line\",\n    title: \"category_grid_line\",\n    options: [\n    // 网格线分别可以配置零线显示/样式（虚实粗细颜色） ； 非零线显示/样式（虚实粗细颜色）；\n    // 显示所有的网格线\n    {\n      key: \"grid_show_all_line\",\n      title: \"option_grid_show_all_line\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 只显示零线\n    {\n      key: \"grid_show_only_zero_line\",\n      title: \"option_grid_show_only_zero_line\",\n      description: \"option_grid_show_only_zero_line_desc\",\n      type: \"checkbox-prev\",\n      require: \"grid_show_all_line\"\n    },\n    // 网格线样式\n    {\n      key: \"grid_line_style\",\n      title: \"option_grid_line_style\",\n      description: \"option_grid_line_style_desc\",\n      type: \"lineStyle\",\n      defaultValue: {\n        lineColor: \"rgba(28, 28, 28 , 0.1)\",\n        lineWidth: 1\n      },\n      require: \"grid_show_all_line\"\n    },\n    // 零线样式\n    {\n      key: \"grid_zero_line_style\",\n      title: \"option_grid_zero_line_style\",\n      description: \"option_grid_zero_line_style_desc\",\n      type: \"lineStyle\",\n      defaultValueConfig: \"grid_line_style\",\n      defaultValue: {\n        lineColor: \"rgba(28, 28, 28 , 0.1)\",\n        lineWidth: 1\n      },\n      require: \"grid_show_all_line\"\n    },\n    // 隐藏最大值/最小值标准线，在有的情况下显示该配置\n    {\n      key: \"grid_remove_standard_line\",\n      title: \"option_grid_remove_standard_line\",\n      description: \"option_grid_remove_standard_line_desc\",\n      type: \"checkbox-prev\",\n      require: \"allow_marker_flag\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    // 是否显示数据标签\n    {\n      key: \"label_text_visible\",\n      title: \"option_label_text_visible\",\n      description: \"option_label_text_visible_desc\",\n      type: 'checkbox-prev'\n    },\n    // 字体样式\n    {\n      key: \"label_text_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label-2\",\n      require: \"label_text_visible\"\n    },\n    // 数据标签的内容\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      require: 'label_text_visible',\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    // 柱状（居内/居外/居中）\n    {\n      key: \"label_text_column_position\",\n      title: \"option_label_text_position\",\n      description: \"option_label_text_position_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_label_position_in\", \"option_label_position_out\"],\n      require: 'label_text_visible'\n    },\n    // 旋转角度0/90/270\n    {\n      key: \"label_text_rotation_angle\",\n      title: \"option_label_text_rotation_angle\",\n      description: \"option_label_text_rotation_angle_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_label_rotation_0\", \"option_label_rotation_90\", \"option_label_rotation_270\"],\n      require: 'label_text_visible'\n    },\n    // 标签显示项 [ 全部/标准最大值最小值平均值 ]\n    {\n      key: \"label_text_visible_items\",\n      title: \"option_label_text_visible_items\",\n      description: \"option_label_text_visible_items_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_label_visible_all\", \"option_label_visible_standard\"],\n      require: 'label_text_visible'\n    },\n    // 标签是否允许重叠\n    {\n      key: \"label_text_allow_overlap\",\n      title: \"option_label_text_allow_overlap\",\n      description: \"option_label_text_allow_overlap_desc\",\n      type: \"checkbox\",\n      require: 'label_text_visible'\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 悬浮文本设置\n  {\n    key: \"category_suspend_text\",\n    title: \"category_suspend_text\",\n    options: [{\n      key: \"suspend_text_regex\",\n      title: \"option_suspend_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  chartConfigureAdvanced: {\n    // 根据宏配置列表，已足够外部组件将 %_NAME:%_VALUE 翻译成 [属性]：[值] 显示给用户\n    // 如果当前图形支持换行的宏，则输入时允许输入换行符 ； 否则编辑时也不支持换行符 ；\n    chartMacroList: [{\n      key: '%_NAME',\n      nameKey: '%_NAME',\n      descriptionKey: '%_NAME_desc'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type\r\n     *              xLabel       -   图形单元对应的属性值 用于实现%_NAME %_CATEGORY_NAME\r\n     *              rowData -  图形单元对应的一整行数据 用于实现%_COLUMN_N的宏\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case \"%_NAME\":\n          case \"%_CATEGORY_NAME\":\n            theMatchedTextValue += options.xLabel || '';\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n              let theColumnN = parseInt(theMatchStr.substring(9));\n              if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN <= options.rowData.length) {\n                theMatchedTextValue += options.rowData[theColumnN - 1];\n              }\n            }\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    },\n    // 如果当前图形配置在上线后需要更新配置，需要兼容行为，则在此处处理[ 不同图形兼容方法不一样 ]\n    compatibleHistoryConfigure: function (chartConfigure, options) {\n      if (!options) return false;\n      options = options || {};\n      // 图形字体大小修改了值结构\n      if (_DataFocusMethod.isPureNumber(chartConfigure.font_size_label)) {\n        let theFontSize = parseInt(chartConfigure.font_size_label);\n        chartConfigure.font_size_label = {\n          fontSize: theFontSize\n        };\n      }\n      if (chartConfigure.attribute_label_rotate !== undefined) {\n        chartConfigure.x_axis_label_dot_line_rotation_value = chartConfigure.attribute_label_rotate;\n        chartConfigure.attribute_label_rotate = undefined;\n      }\n      // 刻度间隔 变了名字\n      if (chartConfigure.attribute_label_space_width !== undefined) {\n        chartConfigure.x_axis_label_dot_line_space_width = chartConfigure.attribute_label_space_width;\n        chartConfigure.attribute_label_space_width = undefined;\n      }\n      // 最大高度限制 变了名字\n      if (chartConfigure.attribute_label_max_height !== undefined) {\n        chartConfigure.x_axis_label_max_height_percent = chartConfigure.attribute_label_max_height * 100;\n        chartConfigure.attribute_label_max_height = undefined;\n      }\n\n      // 图形标题隐藏配置调整为两个配置值 [ 新的柱状图 ]\n      if (chartConfigure.hidden_chart_title) {\n        chartConfigure.x_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.y_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.hidden_chart_title = undefined;\n      }\n      // 隐藏X轴标签修改了名字\n      if (chartConfigure.hide_x_axis) {\n        chartConfigure.x_axis_label_visible = false;\n        chartConfigure.hide_x_axis = undefined;\n      }\n      // 隐藏Y轴就是隐藏Y轴标签及Y轴网格线 , 修改了名字\n      if (chartConfigure.hide_y_axis) {\n        chartConfigure.y_axis_label_visible = false;\n        chartConfigure.grid_show_all_line = false;\n        chartConfigure.hide_y_axis = undefined;\n      }\n\n      // 属性图例颜色 与 Y轴颜色只会存在其中一个 [ 将之前图形中配置的 yAxisColors 及 legendColors 全部统一到当前配置chart_legend_list中]\n      if (!chartConfigure.chart_legend_list) {\n        // 图例配置列表配置了属性图例的颜色\n        if (chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.length || options.legendColors && options.legendColors.length) {\n          let theLegendList = [],\n            theLegendIdObj = {};\n          chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.forEach(function (legend) {\n            if (legend.legend !== undefined && legend.color) {\n              let theLegendId = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId(\"legendAxis\", legend.legend);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: legend.legend,\n                  color: legend.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_custom_legend_new = undefined;\n\n          // 继承之前保存的legendColors配置\n          options.legendColors && options.legendColors.forEach(function (legend) {\n            if (legend.legend !== undefined && legend.color) {\n              let theLegendId = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId(\"legendAxis\", legend.legend);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: legend.legend,\n                  color: legend.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_legend_list = theLegendList;\n        }\n        // 图例配置列表配置了Y轴的颜色\n        if (chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.length || options.yAxisColors && options.yAxisColors.length) {\n          let theLegendList = [],\n            theLegendIdObj = {};\n          chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.forEach(function (configLeg) {\n            let theLegendNameObj = configLeg.options && configLeg.options.find(function (obj) {\n                return obj.title === 'option_chart_legend_measure_name';\n              }),\n              theLegendName = theLegendNameObj && theLegendNameObj.value || '',\n              theLegendColorObj = configLeg.options && configLeg.options.find(function (obj) {\n                return obj.title === 'option_chart_legend_color';\n              }),\n              theLegendColor = theLegendColorObj && theLegendColorObj.value || '';\n            theLegendName = theLegendName.replace(\"-y-axis-\", \"\");\n            let theYAxisArray = theLegendName.split('-'),\n              theColIdx = theYAxisArray[0],\n              theColName = theYAxisArray[1],\n              theLegendId = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId('YAxis', theColIdx);\n            if (theLegendName && theLegendColor) {\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: theColName,\n                  color: theLegendColor\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_custom_legend_new_measure = undefined;\n\n          // 继承之前保存的yAxisColors配置\n          console.log('---------------yAxisColors------------');\n          options.yAxisColors && options.yAxisColors.forEach(function (yAxis) {\n            if (yAxis.col_id !== undefined && yAxis.color) {\n              if (options.tableData && options.tableData.headers) {\n                let theMatchedHeader = options.tableData.headers.find(function (head) {\n                  return yAxis.col_id === head.col_id || head.idx + '' === yAxis.col_id + '';\n                });\n                if (theMatchedHeader) yAxis.col_id = theMatchedHeader.idx;\n              }\n              let theLegendId = _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].generateLegendId(\"YAxis\", yAxis.col_id);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: yAxis.name,\n                  color: yAxis.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_legend_list = theLegendList;\n        }\n      }\n      // 隐藏网格线调整了显示网格线的名字\n      if (chartConfigure.grid_hide_all_line) {\n        chartConfigure.grid_show_all_line = false;\n        chartConfigure.grid_hide_all_line = undefined;\n      }\n      // 零线颜色及零线粗细调整了配置名\n      if (chartConfigure.grid_zero_color || chartConfigure.grid_zero_width) {\n        chartConfigure.grid_zero_line_style = {\n          lineColor: chartConfigure.grid_zero_color,\n          lineWidth: chartConfigure.grid_zero_width\n        };\n        chartConfigure.grid_zero_color = undefined;\n        chartConfigure.grid_zero_width = undefined;\n      }\n      // 柱宽比例调整了名字,并且变了值\n      if (_DataFocusMethod.isPureNumber(chartConfigure.chart_column_width_percent)) {\n        chartConfigure.chart_column_width_percent_1 = chartConfigure.chart_column_width_percent * 100;\n        chartConfigure.chart_column_width_percent = undefined;\n      }\n      // 显示图例\n      if (chartConfigure.hide_legend && chartConfigure.show_legend === undefined) {\n        chartConfigure.show_legend = false;\n        chartConfigure.hide_legend = undefined;\n      }\n\n      // 标度增加了显示与隐藏的配置\n      if (chartConfigure.scale_y_visible === undefined && chartConfigure.scale_y_range && chartConfigure.scale_y_range.length) {\n        chartConfigure.scale_y_visible = true;\n        chartConfigure.scale_y_range && chartConfigure.scale_y_range.forEach(function (theScaleYItem) {\n          // 以前标度类型默认值是default, 现在默认的类型是直线，所以得将之前的配置转换为具体值\n          let theTypeOption = theScaleYItem.options && theScaleYItem.options.find(function (option) {\n            return option.title === \"option_scale_config_type\";\n          });\n          if (!theTypeOption) {\n            theScaleYItem.options = theScaleYItem.options || [];\n            theScaleYItem.options.push({\n              title: \"option_scale_config_type\",\n              value: \"option_default_value\"\n            });\n          } else if (theTypeOption && !theTypeOption.value) theTypeOption.value = 'option_default_value';\n\n          // 以前直线的粗细是类型，目前调整为数值\n          let theThickness = theScaleYItem.options && theScaleYItem.options.find(function (option) {\n            return option.title === \"option_scale_config_value_thickness\";\n          });\n          if (theThickness && theThickness.value) {\n            switch (theThickness.value) {\n              case \"option_thickness_line_medium\":\n                theThickness.value = 2;\n                break;\n              case \"option_thickness_line_heavy\":\n                theThickness.value = 3;\n                break;\n            }\n          }\n        });\n      }\n    }\n  },\n  i18nObj: {\n    chinese: {\n      \"system_auto_default\": \"自动\",\n      \"user_define_text\": \"自定义\",\n      \"chart_kLine\": \"K线图\",\n      \"chart_kLine_tooltip\": \"至少一个时间列，四个数值列\",\n      \"chart_candlestick_x_axis_title\": \"日期\",\n      \"chart_candlestick_y_axis_title\": \"指标 [ 开盘价在前，收盘价在后 ]\",\n      \"chart_axis_modify_x_only_one_date\": \"X轴只允许一个时间列\",\n      \"chart_axis_modify_y_only_four\": \"Y轴只允许四个数值列\",\n      \"category_x_axis\": \"X轴\",\n      \"option_x_axis_right_first_flag\": \"优先画X轴最右侧数据\",\n      \"option_x_axis_right_first_flag_desc\": \"默认情况下，从X轴最左侧数据开始画，超出一屏时往右分页显示。<br />开启优先画X轴最右侧数据后，从X轴最右侧数据开始画，超出一屏时往左分页显示\",\n      \"option_axis_label_visible\": \"轴标签\",\n      \"option_axis_title_visible\": \"轴标题\",\n      \"option_axis_title_visible_desc\": \"自动情况下，会在详情页面显示标题，看板中隐藏标题\",\n      \"option_title_visible_show\": \"显示\",\n      \"option_title_visible_hide\": \"隐藏\",\n      \"option_axis_title_content\": \"标题内容\",\n      \"option_axis_title_content_desc\": \"默认会使用X轴的列名\",\n      \"option_axis_title_content_default\": \"K线指标\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"旋转角度\",\n      \"option_x_axis_label_dot_line_space_width\": \"刻度间距\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"X轴刻度是单层散点模式下，刻度之间的最小间距，默认是50（即每50px显示一个刻度）\",\n      \"option_x_axis_label_max_height_percent\": \"最大高度(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"X轴是单层散点模式下，超出最大高度百分比时，截取字符串显示；其他模式下，超出最大高度时，将不显示X轴刻度\",\n      \"option_font_style\": \"字体\",\n      \"option_font_alignment\": \"对齐方式\",\n      \"category_y_axis\": \"Y轴\",\n      \"option_y_axis_label_max_width_percent\": \"最大宽度(%)\",\n      \"option_measure_configure\": \"格式配置\",\n      \"option_chart_column_minimum_width\": \"最小柱宽\",\n      \"option_chart_column_minimum_width_desc\": \"在您没有配置固定刻度宽度及固定每页刻度数的情况下，会依据画图区域宽度及最小柱宽自适应画图数据，默认最小柱宽是5px\",\n      \"category_color\": \"颜色\",\n      \"option_chart_candlestick_rise_color\": \"阳线颜色\",\n      \"option_chart_candlestick_decline_color\": \"阴线颜色\",\n      \"option_chart_candlestick_show_average_flag\": \"显示均线\",\n      \"option_grid_show_all_line\": \"显示全部网格线\",\n      \"option_grid_line_style\": \"网格线样式\",\n      \"option_grid_line_style_desc\": \"配置所有网格线的样式，包括虚实，颜色及粗细\",\n      \"option_grid_show_only_zero_line\": \"只显示零线\",\n      \"option_grid_show_only_zero_line_desc\": \"配置后，网格线中非零线将全部隐藏，只显示零线 <br /> 如果Y轴最小值大于0，则没有零线，所有网格线均都不显示 \",\n      \"option_grid_zero_line_style\": \"零线样式\",\n      \"option_grid_zero_line_style_desc\": \"配置零线的样式，包括虚实，颜色及粗细\",\n      \"option_scale_y_visible\": \"显示/隐藏\",\n      \"option_suspend_text_regex_desc\": \"要显示的文本。有以下替换宏可用：<br /> \" + \"<span class='mr3'>[属性]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[(列N)]</span> - 第N列的数值 <br /> \" + \"<span class='mr3'>[换行]</span> - 换行符\",\n      \"%_NAME\": \"属性\",\n      \"%_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_BR\": \"换行\",\n      \"category_operate_bar_config\": \"操作栏\"\n    },\n    english: {\n      \"system_auto_default\": \"Auto\",\n      \"user_define_text\": \"Define\",\n      \"chart_kLine\": \"K-line chart\",\n      \"chart_kLine_tooltip\": \"Your search needs at least 1 date and 4 measure\",\n      \"chart_candlestick_x_axis_title\": \"Date\",\n      \"chart_candlestick_y_axis_title\": \"Indicator (opening price before closing price after)\",\n      \"chart_axis_modify_x_only_one_date\": \"Only one time column is allowed on the Date\",\n      \"chart_axis_modify_y_only_four\": \"Only four numerical columns are allowed on the Indicator\",\n      \"category_x_axis\": \"X Axis\",\n      \"option_x_axis_right_first_flag\": \"Prioritize drawing the rightmost data on the X-axis\",\n      \"option_x_axis_right_first_flag_desc\": \"By default, the data is drawn from the leftmost side of the X-axis, and when it exceeds one screen, it is paginated to the right.<br/> After enabling priority drawing of the rightmost data on the X-axis, start drawing from the rightmost data on the X-axis and display it in a left page when it exceeds one screen\",\n      \"option_axis_label_visible\": \"Axis Label\",\n      \"option_axis_title_visible\": \"Axis Title\",\n      \"option_axis_title_visible_desc\": \"In automatic mode, the title will be displayed on the answer detail page and hidden in the pinboard\",\n      \"option_title_visible_show\": \"Show\",\n      \"option_title_visible_hide\": \"Hidden\",\n      \"option_axis_title_content\": \"Title Content\",\n      \"option_axis_title_content_desc\": \"By default, column names on the axis will be used\",\n      \"option_axis_title_content_default\": \"Indicator data\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"Rotate\",\n      \"option_x_axis_label_dot_line_space_width\": \"Label Spacing\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"The scale is the minimum spacing between labels in single level axis, with a default of 50 (i.e. one scale displayed every 50px)\",\n      \"option_x_axis_label_max_height_percent\": \"Max height(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"The axis is in single level, and when the maximum height percentage is exceeded, the string is truncated and displayed; In other modes, when the maximum height is exceeded, the scale will not be displayed\",\n      \"option_font_style\": \"Font\",\n      \"option_font_alignment\": \"Alignment\",\n      \"category_y_axis\": \"Y Axis\",\n      \"option_y_axis_label_max_width_percent\": \"Max Width(%)\",\n      \"option_measure_configure\": \"Data Format\",\n      \"option_chart_column_minimum_width\": \"Adaptive minimum column width\",\n      \"option_chart_column_minimum_width_desc\": \"If you do not configure a fixed scale width and a fixed number of divisions per page, the drawing data will be adaptively drawn based on the drawing area width and minimum column width. The default minimum column width is 5px\",\n      \"category_color\": \"Color\",\n      \"option_chart_candlestick_rise_color\": \"Rise color\",\n      \"option_chart_candlestick_decline_color\": \"Decline color\",\n      \"option_chart_candlestick_show_average_flag\": \"Display moving average\",\n      \"option_grid_show_all_line\": \"Show all grid lines\",\n      \"option_grid_line_style\": \"Line style\",\n      \"option_grid_line_style_desc\": \"Configure the styles of all grid lines, including virtual and solid, color, and thickness\",\n      \"option_grid_show_only_zero_line\": \"Only show the zero line\",\n      \"option_grid_show_only_zero_line_desc\": \"After configuration, all non zero lines in the grid lines will be hidden, and only zero lines will be displayed.<br/>If the minimum value of the Y-axis is greater than 0, there will be no zero lines, and all grid lines will not be displayed\",\n      \"option_grid_zero_line_style\": \"Zero line style\",\n      \"option_grid_zero_line_style_desc\": \"Configure the style of the zero line, including virtual and solid, color, and thickness\",\n      \"option_scale_y_visible\": \"Show/Hide\",\n      \"option_suspend_text_regex_desc\": \"The text to be displayed. The following replacement macros are available:<br /> \" + \"<span class='mr3'>[Attribute]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[(ColumnN)]</span> - Value in column N <br /> \" + \"<span class='mr3'>[Wrap]</span> - Line break\",\n      \"%_NAME\": \"Attribute\",\n      \"%_NAME_desc\": \"The displayed numerical labels are the corresponding X-axis values\",\n      \"%_BR\": \"Wrap\"\n    }\n  },\n  // [*必填项]生成当前图表类型的模板数据\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/kLine/systemKLineChart.js?");

/***/ })

}]);
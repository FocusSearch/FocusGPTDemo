(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[14],{

/***/ "../src-v5/assets/js/charts.components/SvgClipPathComponent.js":
/*!*********************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/SvgClipPathComponent.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n// SVG图形区域在部分图形超出区域后需要截图\n\nlet SvgClipPathComponent = {\n  /**\n   * 画图形的截取元素，在该元素内的图形显示，图形外的元素不显示 ， 主要给图形区域使用\n   * @param options\n   *          {\n   *              svgContainer    -   画图容器\n   *              chartUUID       -   当前图形的唯一标识\n   *              width\n   *              height\n   *              x\n   *              y\n   *          }\n   * */\n  drawClipPath: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.chartUUID || !_DataFocusMethod.isPureNumber(options.width + options.height + options.x + options.y)) return false;\n    let theSvgContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer),\n      currentDef = theSvgContainer.select(\"defs\");\n    if (!currentDef || !currentDef[0][0]) {\n      currentDef = theSvgContainer.append(\"defs\");\n    }\n    let theClipId = \"clipPath-\" + options.chartUUID;\n    currentDef.selectAll(\"#\" + theClipId).remove();\n    currentDef.append(\"clipPath\").attr(\"id\", theClipId).append(\"rect\").attr(\"x\", options.x).attr(\"y\", options.y).attr(\"width\", options.width).attr(\"height\", options.height);\n    return theClipId;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgClipPathComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/SvgClipPathComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.basic/instrument/InstrumentChartComponent.js":
/*!**************************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.basic/instrument/InstrumentChartComponent.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/d3v7Export */ \"../src-v5/assets/js/d3v7Export.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n\n\n\nconst InstrumentChartComponent = {\n  // 标准仪表图\n  drawStandardInstrument: function (options = {}) {\n    const {\n      chartDetailContainer,\n      width,\n      height,\n      curXAxis,\n      curYAxis,\n      chartAxis,\n      translateData,\n      tableData,\n      legendValueList,\n      getColorFunc,\n      xLabelColorList,\n      dataset,\n      radian,\n      angle,\n      radius,\n      innerPercent,\n      ticks,\n      scaleData,\n      theBorderColor,\n      theBorderThickness,\n      leftYFormat,\n      showTextFlag,\n      showTextScale,\n      showValueFlag,\n      showValueScale,\n      animateFlag,\n      min,\n      max,\n      theClassLabelFontColor,\n      theClassLabelFontSize,\n      theClassLabelFontBold,\n      theClassLabelFontItalic,\n      theLabelValueFontColor,\n      theLabelValueFontSize,\n      theLabelValueFontBold,\n      theLabelValueFontItalic,\n      showLabelTextFlag,\n      theLabelFontColor,\n      theLabelFontSize,\n      theLabelFontBold,\n      theLabelFontItalic,\n      pointerSize,\n      showPointer,\n      containerResult\n    } = options;\n    const startAngle = -Math.PI * radian,\n      endAngle = Math.PI * radian,\n      innerRadius = radius * 1 / 2 - radius * innerPercent,\n      outerRadius = radius * 1 / 2,\n      fWidth = width / 2;\n    const animate = animateFlag === undefined || animateFlag ? 1000 : 0;\n    // 使用pie布局\n    const pie = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layout.pie().sort(null).startAngle(startAngle).endAngle(endAngle),\n      piedata = pie(dataset.map(function (d) {\n        return d.value;\n      }));\n\n    // 表盘偏移值\n    const offsetTop = height / 2 + (outerRadius - (angle - 180 > 0 ? Math.sin(Math.PI * (angle - 180) / 360) * outerRadius : 0)) / 2;\n\n    // 绘制表盘\n    var arc = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n    var dial = chartDetailContainer.append(\"g\").attr(\"class\", \"dial\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \")\");\n    dial.append(\"g\").selectAll(\"path\").data(piedata).enter().append(\"path\").attr(\"fill\", function (d, i) {\n      return dataset[i].color;\n    }).attr(\"d\", function (d) {\n      return arc(d);\n    }).style(\"stroke\", theBorderColor).style(\"stroke-width\", theBorderThickness + \"px\");\n    var scale = dial.append(\"g\").selectAll(\"g\").data(scaleData).enter().append(\"g\");\n    scale.append(\"line\").attr(\"class\", \"ticks\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", function (d) {\n      return d.textFlag ? radius * innerPercent : radius * 0.03;\n    }).attr(\"y2\", 0).style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1px\").attr(\"transform\", function (d) {\n      return \"rotate(\" + d.angle + \")translate(\" + (-innerRadius - radius * innerPercent) + \")\";\n    });\n\n    // 数据标签\n    if (showLabelTextFlag) {\n      if (height > 240 && width > 240) {\n        scale.append(\"text\").filter(function (d) {\n          return d.textFlag;\n        }).attr(\"class\", \"label\").attr(\"x\", 0).attr(\"y\", \".35em\").style(\"font-size\", theLabelFontSize + 'px').style(\"fill\", function () {\n          return theLabelFontColor || \"inherit\";\n        }).style(\"font-weight\", function () {\n          return theLabelFontBold ? \"bold\" : \"\";\n        }).style(\"font-style\", function () {\n          return theLabelFontItalic ? \"italic\" : \"\";\n        }).style(\"text-anchor\", function (d) {\n          if (d.angle < 90) return \"start\";else if (d.angle === 90) return \"middle\";else return \"end\";\n        }).text(function (d, i) {\n          let calcText = ticks[i].name,\n            calcValue = ticks[i].value;\n          if (!!leftYFormat && leftYFormat.formatType !== 'default') {\n            calcText = _DataFocusMethod.formatData(calcValue, leftYFormat);\n          } else if (curYAxis.length >= 1 && curYAxis[0].formatType && curYAxis[0].formatType !== 'default') {\n            calcText = _DataFocusMethod.formatData(calcValue, curYAxis[0]);\n          }\n          return calcText;\n        }).attr(\"transform\", function (d) {\n          return \"translate(\" + Math.sin(d.textAngle) * (-innerRadius * (1 - innerPercent)) + \",\" + Math.cos(d.textAngle) * innerRadius * (1 - innerPercent) + \")\";\n        });\n      }\n    }\n\n    // mouseEvent Text\n    var mouseEnventText = chartDetailContainer.append('g').attr(\"class\", \"pointer-info\").attr(\"transform\", \"translate(\" + fWidth + \",\" + height + \")\");\n    const textValueSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getStrSizeByCanvas('string', 'ffff', {\n        fontSize: theLabelValueFontSize\n      }),\n      textLabelSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getStrSizeByCanvas('string', 'ffff', {\n        fontSize: theClassLabelFontSize\n      });\n    let translateY;\n    if (width > 240 && height > 240 && showPointer) {\n      translateY = height - offsetTop - ((showValueFlag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) - 20;\n    } else {\n      translateY = height / 2 - ((showValueFlag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) / 2;\n    }\n    const gContent = mouseEnventText.append(\"g\").attr(\"transform\", \"translate(0,-\" + translateY + \")\");\n    const textTitle = gContent.append(\"text\").attr(\"class\", \"pointer-name\").attr('pointer-name', showTextFlag ? firstTextTitle : \"\").attr('showFlag', showTextFlag).attr(\"transform\", \"translate(0,-\" + (showValueFlag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale / 2) + \")  scale(\" + showTextScale + \")\").text(\"\").style(\"font-size\", theClassLabelFontSize + 'px').style(\"fill\", function () {\n      return theClassLabelFontColor || \"inherit\";\n    }).style(\"font-weight\", function () {\n      return theClassLabelFontBold ? \"bold\" : \"\";\n    }).style(\"font-style\", function () {\n      return theClassLabelFontItalic ? \"italic\" : \"\";\n    }).style(\"stroke\", \"none\").style(\"text-anchor\", \"middle\");\n    const textValue = gContent.append(\"text\").attr(\"class\", \"pointer-value\").attr('pointer-value', showValueFlag ? firstTextValue : \"\").attr('showFlag', showValueFlag).attr(\"transform\", \"translate(0,\" + 0 + \") scale(\" + showValueScale + \")\").text(\"\").style(\"font-size\", theLabelValueFontSize + 'px').style(\"fill\", function () {\n      return theLabelValueFontColor || \"inherit\";\n    }).style(\"font-weight\", function () {\n      return theLabelValueFontBold ? \"bold\" : \"\";\n    }).style(\"font-style\", function () {\n      return theLabelValueFontItalic ? \"italic\" : \"\";\n    }).style(\"stroke\", \"none\").style(\"text-anchor\", \"middle\");\n\n    // 画指针\n    let legendIndex = 0;\n    legendIndex++;\n\n    // 画数据指针\n    var chartset = chartDetailContainer.append('g').attr(\"class\", \"chartset_1\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \") rotate(90)\");\n    var datas = translateData.datas;\n    let firstTextTitle = '',\n      firstTextValue = '',\n      firstShowYFlag = false;\n    curYAxis.forEach(function (yAxis, index) {\n      // 当有多个属性值时\n      if (datas && datas.length > 1) {\n        // 单个Y轴，多行数据的情况\n        datas.forEach(function (data, ind) {\n          // curYAxis的顺序 可能与 legendValueList 不同，所以必须得完全匹配才可以\n          let theMatchedLegend = legendValueList && legendValueList.find(function (legendItem) {\n            return legendItem.legend === data.x0;\n          });\n          if (theMatchedLegend && theMatchedLegend.show === false) return;\n          // 小容器 不显示指针\n          if ((height > 240 && width > 240 || !showTextFlag && !showValueFlag) && showPointer) {\n            var pointer = chartset.append('path').attr(\"class\", \"pointer\").attr(\"alarm-status\", !!data.alarm0).attr('pointer-id', \"pointer\" + ind).attr('pointer-name', _DataFocusMethod.translateIllegalStr(data.x0)).attr('pointer-value', _DataFocusMethod.formatData(data.y0, yAxis)).attr('seriesId', _DataFocusMethod.translateIllegalStr(data.x0) + '-' + yAxis.col_id).attr(\"d\", function () {\n              return \"M0 -9 L\" + -innerRadius * pointerSize * 0.01 + \" 0 L0 10 L20 0 Z\";\n            }).attr(\"color\", function () {\n              return data.color || legendValueList[ind] && legendValueList[ind].color;\n            }).attr(\"visibility\", data.show === false ? 'hidden' : 'visible').style(\"fill\", function () {\n              return _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr('color');\n            }).style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").on(\"mouseover\", function () {\n              setTitleTransform(true);\n              $(this).attr(\"class\", \"pointer\").siblings().attr(\"class\", \"pointer fill-grey\");\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll('.legend-item').attr('class', 'legend-item disabled');\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll(`.legend-item[data-legend-index='${ind}']`).attr('class', 'legend-item');\n\n              // 提示框\n              textTitle.text(_DataFocusMethod.formatTextData(data.x0, curXAxis && curXAxis[0]));\n              textValue.text(_DataFocusMethod.formatData(data.y0, yAxis));\n            }).on(\"mouseout\", function () {\n              setTitleTransform(false);\n              chartDetailContainer.selectAll(\"path.pointer\").attr(\"class\", \"pointer\");\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll(`.legend-item`).attr('class', 'legend-item');\n\n              // 提示框\n              textTitle.text(showTextFlag ? firstTextTitle : \"\");\n              textValue.text(showValueFlag ? firstTextValue : \"\");\n            });\n            stopAnimate(pointer, data.y0);\n          }\n        });\n        let firstData = datas[0];\n        firstTextTitle = _DataFocusMethod.formatData(firstData.x0, curXAxis && curXAxis[0]);\n        firstTextValue = _DataFocusMethod.formatData(firstData.y0, yAxis);\n      } else {\n        // curYAxis的顺序 可能与 legendValueList 不同，所以必须得完全匹配才可以\n        let theMatchedLegend = legendValueList && legendValueList.find(function (legendItem) {\n          return legendItem.index === yAxis.idx;\n        });\n        if (theMatchedLegend && theMatchedLegend.show === false) return;\n        datas = tableData.columns;\n        // 多个Y轴的情况\n        var thisData = datas[0][yAxis.index],\n          thisAlarmStatus = datas[0][\"alarm\" + index];\n\n        // 小容器 不显示指针\n        if ((height > 240 && width > 240 || !showTextFlag && !showValueFlag) && showPointer) {\n          var pointer = chartset.append('path').attr(\"class\", \"pointer\").attr(\"alarm-status\", thisAlarmStatus).attr('pointer-name', function () {\n            return yAxis.displayName || yAxis.col_name;\n          }).attr('pointer-id', \"pointer\" + index).attr(\"visibility\", yAxis.show === false ? 'hidden' : 'visible').attr('pointer-value', _DataFocusMethod.formatData(thisData, yAxis)).attr('seriesId', legendValueList[yAxis.index] + '-' + yAxis.col_id).attr(\"yAxisId\", yAxis.col_id).attr('legend', legendValueList[yAxis.index]).attr(\"legendIndex\", legendIndex).attr(\"d\", function () {\n            return \"M0 -9 L\" + -innerRadius * pointerSize * 0.01 + \" 0 L0 10 L20 0 Z\";\n          }).attr(\"color\", function () {\n            return yAxis.color || legendValueList[index].color;\n          }).style(\"fill\", function () {\n            return _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr('color');\n          }).style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").on(\"mouseover\", function () {\n            setTitleTransform(true);\n            $(this).attr(\"class\", \"pointer\").siblings().attr(\"class\", \"pointer fill-grey\");\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll('.legend-item').attr('class', 'legend-item disabled');\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll(`.legend-item[data-legend-index='${yAxis.index}']`).attr('class', 'legend-item');\n\n            // 提示框\n            textTitle.text(yAxis.displayName || yAxis.col_name);\n            textValue.text(_DataFocusMethod.formatData(thisData, yAxis));\n          }).on(\"mouseout\", function () {\n            setTitleTransform(false);\n            chartDetailContainer.selectAll(\"path.pointer\").attr(\"class\", \"pointer\");\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll(`.legend-item`).attr('class', 'legend-item');\n            // 提示框\n            textTitle.text(showTextFlag ? firstTextTitle : \"\");\n            textValue.text(showValueFlag ? firstTextValue : \"\");\n          });\n          stopAnimate(pointer, thisData);\n        }\n        if (!firstShowYFlag) {\n          let firstData = datas[0];\n          firstTextTitle = yAxis.displayName || yAxis.col_name;\n          firstTextValue = _DataFocusMethod.formatData(thisData, yAxis);\n        }\n      }\n      firstShowYFlag = true;\n\n      // goal值\n      if (yAxis.goal) {\n        var goal = svg.append(\"g\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \") rotate(90)\").attr(\"class\", \"goalLine\").append('path').attr(\"d\", \"M\" + (-outerRadius - 15 + 8) + \" 0 L\" + (-outerRadius - 15) + \" -6 L\" + (-outerRadius - 15 - 8) + \" 0 L\" + (-outerRadius - 15) + \" 6 Z\").attr(\"fill\", \"#eea68d\").style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").on(\"mouseover\", function () {\n          // var innerStr = language('chart_conf_goal') + '（' + yAxis.name + '）：' + self.unitConver(yAxis.goal);\n          // innerStr = _DataFocusMethod.translateIllegalStr(innerStr) ;\n          // self.positionChartPrompt(d3.event, innerStr);\n        }).on(\"mouseout\", function () {\n          _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(\".df-chart-prompt-win\").html(\"\").style(\"display\", \"none\");\n        });\n        stopAnimate(goal, yAxis.goal);\n      }\n    });\n    textTitle.attr('pointer-name', firstTextTitle);\n    textValue.attr('pointer-value', firstTextValue);\n    if (showTextFlag) textTitle.text(firstTextTitle);\n    if (showValueFlag) textValue.text(firstTextValue);\n\n    // 小容器 不显示指针\n    if (height > 240 && width > 240 && showPointer) {\n      // 钉\n      chartDetailContainer.append('circle').attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", \"2px\").style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").style('fill', \"#fff\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \")\");\n    }\n    function setTitleTransform(mouseshowFlag) {\n      let flag = mouseshowFlag || showValueFlag;\n      let translateY;\n      if (width > 240 && height > 240 && showPointer) {\n        translateY = height - offsetTop - ((flag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) - 20;\n      } else {\n        translateY = height / 2 - ((flag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) / 2;\n      }\n      textTitle.attr(\"transform\", \"translate(0,-\" + (flag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale / 2) + \")  scale(\" + showTextScale + \")\");\n      gContent.attr(\"transform\", \"translate(0,-\" + translateY + \")\");\n    }\n    function stopAnimate(e, d) {\n      e.transition().duration(animate).attrTween('transform', function () {\n        // 插值函数\n        const minRotate = -angle / 2;\n        let targetRotate;\n        if (d < min) {\n          targetRotate = -angle / 2;\n        } else if (d > max) {\n          targetRotate = angle / 2;\n        } else {\n          var zoom = 1,\n            len1 = min.toString().length - min.toString().indexOf(\".\") - 1,\n            len2 = d.toString().length - d.toString().indexOf(\".\") - 1;\n          zoom = Math.pow(10, len1 > len2 ? len1 : len2);\n          targetRotate = (d * zoom - min * zoom) / (max * zoom - min * zoom) * angle - angle / 2;\n        }\n        const i = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].interpolate(minRotate, targetRotate);\n        return t => {\n          return `rotate(${i(t)})`;\n        };\n      });\n    }\n  },\n  // 进度仪表图\n  drawProgressInstrument: function (options = {}) {\n    const {\n      chartDetailContainer,\n      containerResult,\n      width,\n      height,\n      curXAxis,\n      curYAxis,\n      chartAxis,\n      translateData,\n      tableData,\n      legendValueList,\n      getColorFunc,\n      xLabelColorList,\n      dataset,\n      radian,\n      angle,\n      radius,\n      innerPercent,\n      ticks,\n      scaleData,\n      theBorderColor,\n      theBorderThickness,\n      leftYFormat,\n      showTextFlag,\n      showTextScale,\n      showValueFlag,\n      showValueScale,\n      animateFlag,\n      min,\n      max,\n      theClassLabelFontColor,\n      theClassLabelFontSize,\n      theClassLabelFontBold,\n      theClassLabelFontItalic,\n      theLabelValueFontColor,\n      theLabelValueFontSize,\n      theLabelValueFontBold,\n      theLabelValueFontItalic,\n      showLabelTextFlag,\n      theLabelFontColor,\n      theLabelFontSize,\n      theLabelFontBold,\n      theLabelFontItalic,\n      pointerSize,\n      showPointer\n    } = options;\n    const startAngle = -Math.PI * radian,\n      endAngle = Math.PI * radian,\n      innerRadius = radius * 1 / 2 - radius * innerPercent,\n      outerRadius = radius * 1 / 2,\n      fWidth = width / 2;\n    if (!dataset || !dataset.length) {\n      let value = ticks[ticks.length - 1].value - ticks[0].value;\n      dataset.push({\n        value: value,\n        color: \"#E6EBF8\"\n      });\n    }\n    const animate = animateFlag === undefined || animateFlag ? 1000 : 0;\n    // 使用pie布局\n    const pie = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layout.pie().sort(null).startAngle(startAngle).endAngle(endAngle),\n      piedata = pie(dataset.map(function (d) {\n        return d.value;\n      }));\n\n    // 表盘偏移值\n    const offsetTop = height / 2 + (outerRadius - (angle - 180 > 0 ? Math.sin(Math.PI * (angle - 180) / 360) * outerRadius : 0)) / 2;\n\n    // 绘制表盘\n    var arc = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].svg.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n    var dial = chartDetailContainer.append(\"g\").attr(\"class\", \"dial\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \")\");\n    var back = dial.append(\"g\");\n    back.selectAll(\"path\").data(piedata).enter().append(\"path\").attr(\"fill\", '#E6EBF8').attr(\"d\", function (d) {\n      return arc(d);\n    }).style(\"stroke\", theBorderColor).style(\"stroke-width\", theBorderThickness + \"px\");\n    var scale = dial.append(\"g\").selectAll(\"g\").data(scaleData).enter().append(\"g\");\n    scale.append(\"line\").attr(\"class\", \"ticks\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", function (d) {\n      return d.textFlag ? radius * innerPercent : radius * 0.03;\n    }).attr(\"y2\", 0).style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1px\").attr(\"transform\", function (d) {\n      return \"rotate(\" + d.angle + \")translate(\" + (-innerRadius - radius * innerPercent) + \")\";\n    });\n\n    // 数据标签\n    if (showLabelTextFlag) {\n      if (height > 240 && width > 240) {\n        scale.append(\"text\").filter(function (d) {\n          return d.textFlag;\n        }).attr(\"class\", \"label\").attr(\"x\", 0).attr(\"y\", \".35em\").style(\"font-size\", theLabelFontSize + 'px').style(\"fill\", function () {\n          return theLabelFontColor || \"inherit\";\n        }).style(\"font-weight\", function () {\n          return theLabelFontBold ? \"bold\" : \"\";\n        }).style(\"font-style\", function () {\n          return theLabelFontItalic ? \"italic\" : \"\";\n        }).style(\"text-anchor\", function (d) {\n          if (d.angle < 90) return \"start\";else if (d.angle === 90) return \"middle\";else return \"end\";\n        }).text(function (d, i) {\n          let calcText = ticks[i].name,\n            calcValue = ticks[i].value;\n          if (!!leftYFormat && leftYFormat.formatType !== 'default') {\n            calcText = _DataFocusMethod.formatData(calcValue, leftYFormat);\n          } else if (curYAxis.length >= 1 && curYAxis[0].formatType && curYAxis[0].formatType !== 'default') {\n            calcText = _DataFocusMethod.formatData(calcValue, curYAxis[0]);\n          }\n          return calcText;\n        }).attr(\"transform\", function (d) {\n          return \"translate(\" + Math.sin(d.textAngle) * (-innerRadius * (1 - innerPercent)) + \",\" + Math.cos(d.textAngle) * innerRadius * (1 - innerPercent) + \")\";\n        });\n      }\n    }\n\n    // 画数据指针\n    var chartset = chartDetailContainer.append('g').attr(\"class\", \"chartset_1\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \") rotate(90)\");\n    var datas = translateData.datas;\n    let firstTextTitle = '',\n      firstTextValue = '',\n      firstShowYFlag = false;\n    if (datas && datas.length > 1) {\n      datas.sort((a, b) => {\n        return b.y0 - a.y0;\n      });\n    } else {\n      curYAxis.forEach((yAxis, index) => {\n        yAxis.tempIndex = index;\n      });\n      curYAxis.sort((a, b) => {\n        return tableData.columns[0][b.index] - tableData.columns[0][a.index];\n      });\n    }\n    curYAxis.forEach(function (yAxis, ind) {\n      if (datas && datas.length > 1) {\n        // 单个Y轴，多行数据的情况\n        datas.forEach(function (data, ind) {\n          // curYAxis的顺序 可能与 legendValueList 不同，所以必须得完全匹配才可以\n          let theMatchedLegend = legendValueList && legendValueList.find(function (legendItem) {\n            return legendItem.legend === data.x0;\n          });\n          if (theMatchedLegend && theMatchedLegend.show === false) return;\n          // 小容器 不显示指针\n          if ((height > 240 && width > 240 || !showTextFlag && !showValueFlag) && showPointer) {\n            var pointer = chartset.append('path').attr(\"class\", \"pointer\").attr(\"alarm-status\", !!data.alarm0).attr('pointer-id', \"pointer\" + legendValueList[data.rowIndex].index).attr('pointer-name', _DataFocusMethod.formatTextData(data.x0, curXAxis && curXAxis[0])).attr('pointer-value', _DataFocusMethod.formatData(data.y0, yAxis)).attr('seriesId', _DataFocusMethod.translateIllegalStr(data.x0) + '-' + yAxis.col_id).attr(\"d\", function () {\n              return \"M0 -9 L\" + -innerRadius * pointerSize * 0.01 + \" 0 L0 10 L20 0 Z\";\n            }).attr(\"color\", function () {\n              return data.color || legendValueList[data.rowIndex].color;\n            }).attr(\"visibility\", data.show === false ? 'hidden' : 'visible').style(\"fill\", function () {\n              return _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr('color');\n            }).style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").on(\"mouseover\", function () {\n              let thePointerId = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr(\"pointer-id\");\n              setTitleTransform(true);\n              $(this).attr(\"class\", \"pointer\").siblings().attr(\"class\", \"pointer fill-grey\");\n              chartDetailContainer.selectAll('path.range').attr('class', \"range fill-grey\");\n              chartDetailContainer.selectAll(`path.range[pointer-id='${thePointerId}']`).attr('class', \"range\");\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll('.legend-item').attr('class', 'legend-item disabled');\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll(`.legend-item[data-legend-index='${data.rowIndex}']`).attr('class', 'legend-item');\n\n              // 提示框\n              textTitle.text(_DataFocusMethod.formatTextData(data.x0, curXAxis && curXAxis[0]));\n              textValue.text(_DataFocusMethod.formatData(data.y0, yAxis));\n            }).on(\"mouseout\", function () {\n              setTitleTransform(false);\n              chartDetailContainer.selectAll(\"path.pointer\").attr(\"class\", \"pointer\");\n              chartDetailContainer.selectAll('path.range').attr('class', \"range\");\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll('.legend-item').attr('class', 'legend-item');\n\n              // 提示框\n              textTitle.text(showTextFlag ? firstTextTitle : \"\");\n              textValue.text(showValueFlag ? firstTextValue : \"\");\n            });\n            stopAnimate(pointer, data.y0);\n          }\n          var range = back.append('path').attr(\"class\", \"range\")\n          // .attr('pointer-id', \"pointer\" + ind)\n          .attr('pointer-id', \"pointer\" + legendValueList[data.rowIndex].index).style(\"stroke\", theBorderColor).style(\"stroke-width\", theBorderThickness + \"px\").attr(\"fill\", function () {\n            return legendValueList[data.rowIndex].color;\n          }).on(\"mouseover\", function () {\n            let thePointerId = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr(\"pointer-id\");\n            setTitleTransform(true);\n            chartDetailContainer.selectAll(\".chart-detail .pointer\").attr(\"class\", \"pointer fill-grey\");\n            chartDetailContainer.selectAll(`.chart-detail .pointer[pointer-id=${thePointerId}]`).attr(\"class\", \"pointer\");\n            chartDetailContainer.selectAll('path.range').attr('class', \"range fill-grey\");\n            chartDetailContainer.selectAll(`path.range[pointer-id='${thePointerId}']`).attr('class', \"range\");\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll('.legend-item').attr('class', 'legend-item disabled');\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll(`.legend-item[data-legend-index='${data.rowIndex}']`).attr('class', 'legend-item');\n\n            // 提示框\n            textTitle.text(_DataFocusMethod.formatTextData(data.x0, curXAxis && curXAxis[0]));\n            textValue.text(_DataFocusMethod.formatData(data.y0, yAxis));\n          }).on(\"mouseout\", function () {\n            setTitleTransform(false);\n            chartDetailContainer.selectAll(\"path.pointer\").attr(\"class\", \"pointer\");\n            chartDetailContainer.selectAll('path.range').attr('class', \"range\");\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).selectAll('.legend-item').attr('class', 'legend-item');\n\n            // 提示框\n            textTitle.text(showTextFlag ? firstTextTitle : \"\");\n            textValue.text(showValueFlag ? firstTextValue : \"\");\n          });\n          let maxTick = ticks[ticks.length - 1].value,\n            minTick = ticks[0].value;\n          let theEndArc = startAngle + (data.y0 - minTick) / (maxTick - minTick) * Math.PI * angle / 180;\n          if (animate) {\n            range.transition().duration(1500).attrTween('d', function () {\n              return tweenFilled({\n                startAngle: startAngle,\n                endAngle: theEndArc\n              });\n            });\n          } else {\n            range.attr(\"d\", arc({\n              startAngle: startAngle,\n              endAngle: theEndArc\n            }));\n          }\n        });\n        let firstData = datas[0];\n        firstTextTitle = _DataFocusMethod.formatTextData(firstData.x0, curXAxis && curXAxis[0]);\n        firstTextValue = _DataFocusMethod.formatData(firstData.y0, yAxis);\n      }\n      // 多个Y轴形成的图例，判断当前yAxis是否显示\n      else {\n        // curYAxis的顺序 可能与 legendValueList 不同，所以必须得完全匹配才可以\n        let theMatchedLegend = legendValueList && legendValueList.find(function (legendItem) {\n          return legendItem.index === yAxis.idx;\n        });\n        if (theMatchedLegend && theMatchedLegend.show === false) return;\n        datas = [...JSON.parse(JSON.stringify(tableData.columns))];\n        datas[0].sort((a, b) => {\n          return b - a;\n        });\n        // 多个Y轴的情况\n        var thisData = datas[0][ind],\n          thisAlarmStatus = datas[0][\"alarm\" + ind];\n        const legendContent = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer);\n        if ((height > 240 && width > 240 || !showTextFlag && !showValueFlag) && showPointer) {\n          var pointer = chartset.append('path').attr(\"class\", \"pointer\").attr(\"alarm-status\", thisAlarmStatus).attr('pointer-name', function () {\n            return yAxis.displayName || yAxis.col_name;\n          }).attr('pointer-id', \"pointer\" + yAxis.tempIndex).attr(\"visibility\", yAxis.show === false ? 'hidden' : 'visible').attr('pointer-value', _DataFocusMethod.formatData(thisData, yAxis)).attr(\"yAxisId\", yAxis.col_id).attr(\"d\", function () {\n            return \"M0 -9 L\" + -innerRadius * pointerSize * 0.01 + \" 0 L0 10 L20 0 Z\";\n          }).attr(\"color\", function () {\n            return legendValueList[yAxis.tempIndex].color;\n          }).style(\"fill\", function () {\n            return _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr('color');\n          }).style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").on(\"mouseover\", function () {\n            setTitleTransform(true);\n            $(this).attr(\"class\", \"pointer\").siblings().attr(\"class\", \"pointer fill-grey\");\n            chartDetailContainer.selectAll('path.range').attr('class', \"range fill-grey\");\n            chartDetailContainer.selectAll(`path.range[yAxisId='${yAxis.col_id}']`).attr('class', \"range\");\n            legendContent.selectAll('.legend-item').attr('class', 'legend-item disabled');\n            legendContent.selectAll(`.legend-item[data-legend-index='${yAxis.tempIndex}']`).attr('class', 'legend-item');\n\n            // 提示框\n            textTitle.text(yAxis.displayName || yAxis.col_name);\n            textValue.text(_DataFocusMethod.formatData(thisData, yAxis));\n          }).on(\"mouseout\", function () {\n            setTitleTransform(false);\n            chartDetailContainer.selectAll(\"path.pointer\").attr(\"class\", \"pointer\");\n            chartDetailContainer.selectAll('path.range').attr('class', \"range\");\n            legendContent.selectAll('.legend-item').attr('class', 'legend-item');\n\n            // 提示框\n            textTitle.text(showTextFlag ? firstTextTitle : \"\");\n            textValue.text(showValueFlag ? firstTextValue : \"\");\n          });\n\n          // 钉\n          chartDetailContainer.append('circle').attr(\"cx\", 0).attr(\"cy\", 0).attr(\"r\", \"2px\").style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").style('fill', \"#fff\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \")\");\n          stopAnimate(pointer, thisData);\n        }\n        var range = back.append('path').attr(\"class\", \"range\").attr(\"yAxisId\", yAxis.col_id).style(\"stroke\", theBorderColor).style(\"stroke-width\", theBorderThickness + \"px\").attr(\"fill\", function () {\n          return legendValueList[yAxis.tempIndex].color;\n        }).on(\"mouseover\", function () {\n          setTitleTransform(true);\n          chartDetailContainer.selectAll(\".chart-detail .pointer\").attr(\"class\", \"pointer fill-grey\");\n          chartDetailContainer.selectAll(`.chart-detail .pointer[pointer-id=pointer${yAxis.tempIndex}]`).attr(\"class\", \"pointer\");\n          chartDetailContainer.selectAll('path.range').attr('class', \"range fill-grey\");\n          chartDetailContainer.selectAll(`path.range[yAxisId='${yAxis.col_id}']`).attr('class', \"range\");\n          legendContent.selectAll('.legend-item').attr('class', 'legend-item disabled');\n          legendContent.selectAll(`.legend-item[data-legend-index='${yAxis.tempIndex}']`).attr('class', 'legend-item');\n\n          // 提示框\n          textTitle.text(yAxis.displayName || yAxis.col_name);\n          textValue.text(_DataFocusMethod.formatData(thisData, yAxis));\n        }).on(\"mouseout\", function () {\n          setTitleTransform(false);\n          chartDetailContainer.selectAll(\"path.pointer\").attr(\"class\", \"pointer\");\n          chartDetailContainer.selectAll('path.range').attr('class', \"range\");\n          legendContent.selectAll('.legend-item').attr('class', 'legend-item');\n\n          // 提示框\n          textTitle.text(showTextFlag ? firstTextTitle : \"\");\n          textValue.text(showValueFlag ? firstTextValue : \"\");\n        });\n        let maxTick = ticks[ticks.length - 1].value,\n          minTick = ticks[0].value;\n        let theEndArc = startAngle + (thisData - minTick) / (maxTick - minTick) * Math.PI * angle / 180;\n        if (animate) {\n          range.transition().duration(1500).attrTween('d', function () {\n            return tweenFilled({\n              startAngle: startAngle,\n              endAngle: theEndArc\n            });\n          });\n        } else {\n          range.attr(\"d\", arc({\n            startAngle: startAngle,\n            endAngle: theEndArc\n          }));\n        }\n        if (!firstShowYFlag) {\n          let firstData = datas[0];\n          firstTextTitle = yAxis.displayName || yAxis.col_name;\n          firstTextValue = _DataFocusMethod.formatData(thisData, yAxis);\n        }\n      }\n      firstShowYFlag = true;\n\n      // goal值\n      if (yAxis.goal) {\n        var goal = svg.append(\"g\").attr(\"transform\", \"translate(\" + fWidth + \",\" + offsetTop + \") rotate(90)\").attr(\"class\", \"goalLine\").append('path').attr(\"d\", \"M\" + (-outerRadius - 15 + 8) + \" 0 L\" + (-outerRadius - 15) + \" -6 L\" + (-outerRadius - 15 - 8) + \" 0 L\" + (-outerRadius - 15) + \" 6 Z\").attr(\"fill\", \"#eea68d\").style(\"stroke-width\", \"0\").style(\"stroke\", \"none\").on(\"mouseover\", function () {\n          // var innerStr = language('chart_conf_goal') + '（' + yAxis.name + '）：' + self.unitConver(yAxis.goal);\n          // innerStr = _DataFocusMethod.translateIllegalStr(innerStr) ;\n          // self.positionChartPrompt(d3.event, innerStr);\n        }).on(\"mouseout\", function () {\n          _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(\".df-chart-prompt-win\").html(\"\").style(\"display\", \"none\");\n        });\n        stopAnimate(goal, yAxis.goal);\n      }\n    });\n\n    // mouseEvent Text\n    var mouseEnventText = chartDetailContainer.append('g').attr(\"class\", \"pointer-info\").attr(\"transform\", \"translate(\" + fWidth + \",\" + height + \")\");\n    const textValueSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getStrSizeByCanvas('string', 'ffff', {\n        fontSize: theLabelValueFontSize\n      }),\n      textLabelSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getStrSizeByCanvas('string', 'ffff', {\n        fontSize: theClassLabelFontSize\n      });\n    let translateY;\n    if (width > 240 && height > 240 && showPointer) {\n      translateY = height - offsetTop - ((showValueFlag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) - 20;\n    } else {\n      translateY = height / 2 - ((showValueFlag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) / 2;\n    }\n    const gContent = mouseEnventText.append(\"g\").attr(\"transform\", \"translate(0,-\" + translateY + \")\");\n\n    // textTitle.text(showTextFlag?firstTextTitle:\"\");\n    // textValue.text(showValueFlag?firstTextValue:\"\");\n    let textTitle = gContent.append(\"text\").attr(\"class\", \"pointer-name\").attr('pointer-name', showTextFlag ? firstTextTitle : \"\").attr('showFlag', showTextFlag).attr(\"transform\", \"translate(0,-\" + (showValueFlag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale / 2) + \")  scale(\" + showTextScale + \")\").text(\"\").style(\"font-size\", theClassLabelFontSize + 'px').style(\"fill\", function () {\n      return theClassLabelFontColor || \"inherit\";\n    }).style(\"font-weight\", function () {\n      return theClassLabelFontBold ? \"bold\" : \"\";\n    }).style(\"font-style\", function () {\n      return theClassLabelFontItalic ? \"italic\" : \"\";\n    }).style(\"stroke\", \"none\").style('pointer-events', 'none').style(\"text-anchor\", \"middle\");\n    let textValue = gContent.append(\"text\").attr(\"class\", \"pointer-value\").attr('pointer-value', showValueFlag ? firstTextValue : \"\").attr('showFlag', showValueFlag).attr(\"transform\", \"translate(0,\" + 0 + \") scale(\" + showValueScale + \")\").text(\"\").style(\"font-size\", theLabelValueFontSize + 'px').style(\"fill\", function () {\n      return theLabelValueFontColor || \"inherit\";\n    }).style(\"font-weight\", function () {\n      return theLabelValueFontBold ? \"bold\" : \"\";\n    }).style(\"font-style\", function () {\n      return theLabelValueFontItalic ? \"italic\" : \"\";\n    }).style(\"stroke\", \"none\").style('pointer-events', 'none').style(\"text-anchor\", \"middle\");\n    textTitle.attr('pointer-name', firstTextTitle);\n    textValue.attr('pointer-value', firstTextValue);\n    if (showTextFlag) textTitle.text(firstTextTitle);\n    if (showValueFlag) textValue.text(firstTextValue);\n    function setTitleTransform(mouseshowFlag) {\n      let flag = mouseshowFlag || showValueFlag;\n      let translateY;\n      if (width > 240 && height > 240 && showPointer) {\n        translateY = height - offsetTop - ((flag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) - 20;\n      } else {\n        translateY = height / 2 - ((flag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale) + (showTextFlag && textLabelSize.height * showTextScale || 0) + 2) / 2;\n      }\n      textTitle.attr(\"transform\", \"translate(0,-\" + (flag && textValueSize.height * showValueScale || textLabelSize.height * showTextScale / 2) + \")  scale(\" + showTextScale + \")\");\n      gContent.attr(\"transform\", \"translate(0,-\" + translateY + \")\");\n    }\n    function stopAnimate(e, d) {\n      e.transition().duration(animate).attrTween('transform', function () {\n        // 插值函数\n        const minRotate = -angle / 2;\n        let targetRotate;\n        if (d < min) {\n          targetRotate = -angle / 2;\n        } else if (d > max) {\n          targetRotate = angle / 2;\n        } else {\n          var zoom = 1,\n            len1 = min.toString().length - min.toString().indexOf(\".\") - 1,\n            len2 = d.toString().length - d.toString().indexOf(\".\") - 1;\n          zoom = Math.pow(10, len1 > len2 ? len1 : len2);\n          targetRotate = (d * zoom - min * zoom) / (max * zoom - min * zoom) * angle - angle / 2;\n        }\n        const i = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].interpolate(minRotate, targetRotate);\n        return t => {\n          return `rotate(${i(t)})`;\n        };\n      });\n    }\n    function tweenFilled(b) {\n      // 然后向他们原始的角度（b）开始过渡\n      let i = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].interpolate({\n        startAngle: startAngle,\n        endAngle: startAngle\n      }, b);\n      return function (t) {\n        return arc(i(t));\n      };\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (InstrumentChartComponent);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.basic/instrument/InstrumentChartComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.basic/instrument/systemInstrumentChart.js":
/*!***********************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.basic/instrument/systemInstrumentChart.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/ContainerComponent */ \"../src-v5/assets/js/charts.components/ContainerComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pc/assets/js/charts.components/TranslateDataComponent */ \"../src-v5/assets/js/charts.components/TranslateDataComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_SvgClipPathComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pc/assets/js/charts.components/SvgClipPathComponent */ \"../src-v5/assets/js/charts.components/SvgClipPathComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pc/assets/js/charts.components/LegendComponent */ \"../src-v5/assets/js/charts.components/LegendComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pc/assets/js/charts.components/MeasureAxisComponent */ \"../src-v5/assets/js/charts.components/MeasureAxisComponent.js\");\n/* harmony import */ var _InstrumentChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./InstrumentChartComponent */ \"../src-v5/assets/js/charts.system.basic/instrument/InstrumentChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @pc/assets/js/charts.components/TitleComponent */ \"../src-v5/assets/js/charts.components/TitleComponent.js\");\n// 仪表图\n\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n// 画图容器组件[ 主要区分svg部分与图例部分 ]\n\n// 数据处理组件[ 解析XY轴配置组的数据 ]\n\n// 画图形区域的截取元素\n\n// 画图例列表的组件\n\n// 解析数值刻度 及  画数值刻度的组件\n\n\n// 画标题组件\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  // [*必填项] 图姓唯一标识\n  chartType: \"instrument\",\n  // [*必填项] 图形名称中英文Key\n  chartDisplayNameKey: \"chart_instrument\",\n  // [*必填项] 图形描述中英文Key\n  chartDescriptionKey: \"chart_instrument_tooltip\",\n  // [*必填项] 图轴配置元素 ( X轴 ，Y轴（不允许右Y轴），图例 )\n  needAxis: {\n    xAxis: {},\n    yAxis: {\n      defaultYAxisNumber: -1\n    }\n  },\n  // [*必填项] 搜索数据是否支持该图形 ( 一行数据没有属性列多个数值列时 ； 一个属性一个数值列数据量少于10时  )\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    if (!searchResultStatistic || !searchResultStatistic.aggregatedFlag) return false;\n    const {\n      measureColumns,\n      attributeColumns,\n      legendColumns,\n      queryResultCount\n    } = searchResultStatistic;\n    if (measureColumns && attributeColumns) {\n      if (measureColumns.length >= 1 && !attributeColumns.length && queryResultCount === 1) {\n        satisfiedFlag = true;\n      }\n      if (measureColumns.length === 1 && attributeColumns.length === 1 && queryResultCount <= 10) {\n        satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  /**\r\n   * 验证配置是否合适\r\n   *\r\n   *     - Y轴不允许为空\r\n   *\r\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '';\n    if (!theAxisConfig) return chartErrorMsg;\n\n    // Y轴不允许为空\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      chartErrorMsg = 'chart_modify_y_not_null';\n      return chartErrorMsg;\n    }\n    return chartErrorMsg;\n  },\n  drawChart: function (options = {}) {\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    let self = this,\n      container = options.container,\n      chartAxis = options.chartAxis,\n      curYAxis = chartAxis && chartAxis.curYAxis,\n      curXAxis = chartAxis && chartAxis.curXAxis,\n      currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      chartConfigures = options.chartConfigures || {},\n      hasLegendFlag = !!(chartAxis.curXAxis && chartAxis.curXAxis.length > 0 || chartAxis.curYAxis && chartAxis.curYAxis.length > 1);\n\n    // 获取图例的位置，默认在右侧\n    let legendPosition = hasLegendFlag ? 'right' : '';\n    if (legendPosition) {\n      legendPosition = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].translateLegendConfigure(chartConfigures.legend_position);\n    }\n    container.innerHTML = '';\n    // 初始化画图容器  SVG图形部分(X轴Y轴图形) / X轴标题(位置) / Y轴标题(位置) / 图例(位置)\n    let containerResult = _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].drawCommonContainer({\n      container: container,\n      legendPosition: legendPosition\n    });\n    if (!containerResult.svgJqDom) return false;\n    if (!options.datas.columns || !options.datas.columns.length) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n\n    // 2. 解析数据为当前画图数据\n    let translateData = _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].translateXYLegendBasicData({\n      tableData: conf.datas,\n      chartAxis: chartAxis,\n      xLabelType: chartConfigures.x_axis_draw_type === 'option_select_x_axis_dot_line' ? 'dotLine' : 'auto',\n      language: systemLanguage\n    });\n\n    // 获取图形的整体宽度和高度\n    let chartWidth = container.offsetWidth,\n      chartHeight = container.offsetHeight;\n    // 获取当前图形的配置颜色主题方法\n    let colorFunc = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateColorThemeConfigure(chartConfigures.chart_color_theme, {\n      chart_custom_theme: chartConfigures.chart_custom_theme\n    });\n    // 获取隐藏聚合方式的标志配置, 即所有属性列的聚合方式不显示在标签内\n    let hideOperatorFlag = false;\n    if (chartConfigures.hide_operator_label) hideOperatorFlag = true;\n    // 获取图形的字体大小配置\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 12,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    chartFontSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateFontSizeConfigure(chartFontSize) || 10;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n      containerResult.svgJqDom.style.color = chartFontColor;\n      containerResult.svgJqDom.style.fill = chartFontColor;\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n    let theXTitleFontSize = chartConfigures.x_axis_title_style && parseInt(chartConfigures.x_axis_title_style.fontSize) || chartFontSize || 12,\n      //  X轴标题字体大小\n      theXAxisFontSize = chartConfigures.x_axis_label_style && parseInt(chartConfigures.x_axis_label_style.fontSize) || chartFontSize || 12,\n      //  X轴刻度字体大小， 默认使用图形统一的字体大小\n      theYTitleFontSize = chartConfigures.y_axis_title_style && parseInt(chartConfigures.y_axis_title_style.fontSize) || chartFontSize || 12,\n      //  Y轴标题字体大小\n      theYAxisFontSize = chartConfigures.y_axis_label_style && parseInt(chartConfigures.y_axis_label_style.fontSize) || chartFontSize || 12,\n      //  Y轴刻度字体大小， 默认使用图形统一的字体大小\n      theLegendFontSize = chartConfigures.legend_font_style && parseInt(chartConfigures.legend_font_style.fontSize) || chartFontSize || 12;\n    const showPointer = chartConfigures.instrument_show_pointer;\n    const pointerSize = chartConfigures.instrument_pointer_size || 95;\n\n    // 先填充图例区域 [ 绘制图例列表，翻页 ，宽度高度限制 ]\n    // 计算图例列表\n    let showLegendLength = 0,\n      legendValueList = [],\n      defaultLegendList = [];\n    let savedLegendColorConfig = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].translateLegendColor({\n      legendColors: conf.legendColors,\n      yAxisColors: conf.yAxisColors,\n      curYAxis: chartAxis.curYAxis,\n      configureLegendList: chartConfigures.chart_legend_list\n    });\n    if (chartAxis.curLegend) {\n      chartAxis.curLegend.distincts && chartAxis.curLegend.distincts.forEach(function (legendName, index) {\n        let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('legendAxis', legendName); // \"column-value-\" + legendName ,\n        let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n          return theConfig.id === theLegendId;\n        });\n        legendValueList.push({\n          type: 'columnValue',\n          legend: legendName,\n          legendTranslateName: _DataFocusMethod.formatTextData(legendName, chartAxis.curLegend),\n          id: theLegendId,\n          index: index,\n          shape: theConfigLegend && theConfigLegend.shape,\n          color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n          show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n        });\n        defaultLegendList.push({\n          type: 'columnValue',\n          legend: legendName,\n          legendTranslateName: _DataFocusMethod.formatTextData(legendName, chartAxis.curLegend),\n          id: theLegendId,\n          index: index,\n          shape: chartConfigures.legend_shape_type,\n          color: colorFunc(index),\n          show: true\n        });\n      });\n    } else if (chartAxis.curXAxis && chartAxis.curXAxis.length) {\n      translateData.xLabelDistinct && translateData.xLabelDistinct.forEach(function (legendName, index) {\n        let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('legendAxis', legendName); // \"column-value-\" + legendName ,\n        let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n          return theConfig.id === theLegendId;\n        });\n        legendValueList.push({\n          type: 'columnValue',\n          legend: legendName,\n          legendTranslateName: _DataFocusMethod.formatTextData(legendName, curXAxis && curXAxis[0]),\n          id: theLegendId,\n          index: index,\n          shape: theConfigLegend && theConfigLegend.shape,\n          color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n          show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n        });\n        defaultLegendList.push({\n          type: 'columnValue',\n          legend: legendName,\n          id: theLegendId,\n          index: index,\n          shape: chartConfigures.legend_shape_type,\n          color: colorFunc(index),\n          show: true\n        });\n      });\n    } else if (chartAxis.curYAxis) {\n      chartAxis.curYAxis.forEach(function (yAxis, index) {\n        let theYLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('yAxis', yAxis.idx); //  \"measure-column-id-\" + yAxis.col_id ,\n        let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n          return theConfig.id === theYLegendId;\n        });\n        legendValueList.push({\n          type: 'measureColumn',\n          legend: _DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }),\n          id: theYLegendId,\n          index: index,\n          shape: theConfigLegend && theConfigLegend.shape,\n          color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n          show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n        });\n        defaultLegendList.push({\n          type: 'measureColumn',\n          legend: _DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }),\n          id: _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('yAxis', yAxis.idx),\n          //  \"measure-column-id-\" + yAxis.col_id ,\n          index: index,\n          color: colorFunc(index),\n          shape: chartConfigures.legend_shape_type,\n          show: true\n        });\n      });\n    }\n    legendValueList && legendValueList.forEach(function (theLegend) {\n      if (theLegend.show) showLegendLength++;\n    });\n    // 如果没有显示的图例，则至少保证显示一个\n    if (!showLegendLength) {\n      showLegendLength = 1;\n      legendValueList[0] && (legendValueList[0].show = true);\n    }\n    // 画图例元素,先将图例元素画完成后，才可以计算SVG的宽度与高度\n    if (hasLegendFlag && containerResult.legendContainer) {\n      // 画图例元素\n      if (chartConfigures.show_legend === undefined || chartConfigures.show_legend) {\n        _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].drawAttributeLegend({\n          container: containerResult.legendContainer,\n          chartWidth: chartWidth,\n          chartHeight: chartHeight,\n          legendPosition: legendPosition,\n          legendMaxWidthInVertical: chartConfigures.legend_position_width,\n          legendValueList: legendValueList,\n          legendFontSize: theLegendFontSize,\n          legendFontColor: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontColor,\n          legendBoldStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontBold,\n          legendItalicStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontItalic,\n          legendOffsetSpace: chartConfigures.legend_position_offset,\n          legendIntervalSpace: chartConfigures.legend_position_interval,\n          legendShapeType: _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].translateLegendShapeConfigure(chartConfigures && chartConfigures.legend_shape_type),\n          changeLegendColorFlag: !!(conf.action && !conf.wxFlag) && !conf.inPinboard,\n          chooseButtonText: self.getPluginKeyText(),\n          changeLegendColorCallback: function (options) {\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              // 修改图形中的图例配置，并将其传给配置组件，然后由配置组件触发画图， 而不是在此处直接画图\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend) {\n                let theMatchedConfigure = chartConfigures.chart_legend_list && chartConfigures.chart_legend_list.find(function (configure) {\n                  return configure.id === theMatchedLegend.id || configure.legend === theMatchedLegend.legend;\n                });\n                if (theMatchedConfigure) {\n                  theMatchedConfigure.color = options.color || undefined;\n                } else {\n                  chartConfigures.chart_legend_list = chartConfigures.chart_legend_list || [];\n                  chartConfigures.chart_legend_list.push({\n                    id: theMatchedLegend.id,\n                    legend: theMatchedLegend.legend,\n                    color: options.color || undefined\n                  });\n                }\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"chart_legend_list\",\n                  value: chartConfigures.chart_legend_list\n                });\n              }\n            }\n          },\n          // 点击 显示/隐藏 图例\n          mousedownEventCallback: function (options) {\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              // 修改图形中的图例配置，并将其传给配置组件，然后由配置组件触发画图， 而不是在此处直接画图\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend) {\n                let theMatchedConfigure = chartConfigures.chart_legend_list && chartConfigures.chart_legend_list.find(function (configure) {\n                  return configure.id === theMatchedLegend.id || configure.legend === theMatchedLegend.legend;\n                });\n                let theShownLegendLength = legendValueList.filter(function (legend) {\n                  return legend.show;\n                }).length;\n                // 如果只有一个图例显示，则不再隐藏最后一个了\n                if (theShownLegendLength === 1 && !!theMatchedLegend.show) return false;\n                if (theMatchedConfigure) {\n                  theMatchedConfigure.show = !theMatchedLegend.show;\n                } else {\n                  chartConfigures.chart_legend_list = chartConfigures.chart_legend_list || [];\n                  chartConfigures.chart_legend_list.push({\n                    id: theMatchedLegend.id,\n                    legend: theMatchedLegend.legend,\n                    show: !theMatchedLegend.show\n                  });\n                }\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"chart_legend_list\",\n                  value: chartConfigures.chart_legend_list\n                });\n              }\n            }\n          },\n          mouseoverEventCallback: function (options) {\n            // 高亮当前图例所在的图形元素，置灰其他元素\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend && theMatchedLegend.id && theMatchedLegend.show) {\n                const resultD3 = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom);\n                resultD3.selectAll(\".chart-detail .pointer\").attr(\"class\", \"pointer fill-grey\");\n                let theSelectPointer = resultD3.selectAll(`.chart-detail .pointer[pointer-id=pointer${theMatchedLegend.index}]`);\n                theSelectPointer.attr(\"class\", \"pointer\");\n                resultD3.selectAll(\".chart-detail .range\").attr(\"class\", \"range fill-grey\");\n                resultD3.selectAll(`.chart-detail .range[pointer-id=pointer${theMatchedLegend.index}]`).attr(\"class\", \"range\");\n                resultD3.selectAll(\".chart-detail .pointer-name\").text(theSelectPointer.attr('pointer-name'));\n                resultD3.selectAll(\".chart-detail .pointer-value\").text(theSelectPointer.attr('pointer-value'));\n                if (options.legendDom) {\n                  $(options.legendDom).find(\"svg\").removeClass(\"fill-grey\");\n                  $(options.legendDom).siblings().find(\"svg\").addClass(\"fill-grey\");\n                }\n              }\n            }\n          },\n          mouseoutEventCallback: function (options) {\n            options = options || {};\n            // // 恢复高亮所有显示的图例的图形元素\n            const resultD3 = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom);\n            resultD3.selectAll(`.chart-detail .pointer`).attr(\"class\", \"pointer\");\n            resultD3.selectAll(`.chart-detail .range`).attr(\"class\", \"range\");\n            let thePointerName = resultD3.selectAll(\".chart-detail .pointer-name\");\n            thePointerName.text(thePointerName.attr('pointer-name'));\n            let thePointerValue = resultD3.selectAll(\".chart-detail .pointer-value\");\n            thePointerValue.text(thePointerValue.attr('pointer-value'));\n            if (options.legendDom) $(options.legendDom).parent().find(\"svg\").removeClass(\"fill-grey\");\n          }\n        });\n      }\n    }\n\n    // 再填充画图区域\n    // 0. 先计算Y轴刻度比例尺[ 左Y轴比例尺 及 右Y轴比例尺 及 左右Y轴宽度 ]\n    if (!chartAxis.curYAxis || !chartAxis.curYAxis.length) {\n      console.log('当前图形Y轴配置异常');\n      return false;\n    }\n    let svgDrawWidth = $(containerResult.svgJqDom).width(),\n      svgDrawHeight = $(containerResult.svgJqDom).height();\n    let showYTitleFlag = !conf.inPinboard;\n    if (!chartConfigures.y_axis_title_visible || chartConfigures.y_axis_title_visible === 'system_auto_default') {\n      showYTitleFlag = !conf.inPinboard;\n    } else {\n      showYTitleFlag = !!(chartConfigures.y_axis_title_visible === \"option_title_visible_show\");\n    }\n\n    // 刻度最值\n    const yDataStatics = curYAxis.map(axis => {\n      return [axis.min, axis.max];\n    });\n    const limitData = {\n      min: _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min(yDataStatics, v => v[0]),\n      max: _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].max(yDataStatics, v => v[1])\n    };\n\n    // 范围配置\n    let userScope = [];\n    if (chartConfigures) {\n      // 仪表盘的刻度范围配置\n      userScope = [{\n        min: chartConfigures && chartConfigures.range_1_min,\n        // 范围1刻度开始值\n        max: chartConfigures && chartConfigures.range_1_max,\n        // 范围1刻度结束值\n        color: chartConfigures && chartConfigures.range_1_color // 范围1刻度颜色\n      }, {\n        min: chartConfigures && chartConfigures.range_2_min,\n        // 范围2刻度开始值\n        max: chartConfigures && chartConfigures.range_2_max,\n        // 范围2刻度结束值\n        color: chartConfigures && chartConfigures.range_2_color // 范围2刻度颜色\n      }, {\n        min: chartConfigures && chartConfigures.range_3_min,\n        // 范围3刻度开始值\n        max: chartConfigures && chartConfigures.range_3_max,\n        // 范围3刻度结束值\n        color: chartConfigures && chartConfigures.range_3_color // 范围3刻度颜色\n      }, {\n        min: chartConfigures && chartConfigures.range_4_min,\n        // 范围4刻度开始值\n        max: chartConfigures && chartConfigures.range_4_max,\n        // 范围4刻度结束值\n        color: chartConfigures && chartConfigures.range_4_color // 范围4刻度颜色\n      }, {\n        min: chartConfigures && chartConfigures.range_5_min,\n        // 范围5刻度开始值\n        max: chartConfigures && chartConfigures.range_5_max,\n        // 范围5刻度结束值\n        color: chartConfigures && chartConfigures.range_5_color // 范围5刻度颜色\n      }, {\n        min: chartConfigures && chartConfigures.range_6_min,\n        // 范围6刻度开始值\n        max: chartConfigures && chartConfigures.range_6_max,\n        // 范围6刻度结束值\n        color: chartConfigures && chartConfigures.range_6_color // 范围6刻度颜色\n      }];\n      if (chartConfigures.color_range && chartConfigures.open_color_range) {\n        userScope = chartConfigures.color_range;\n      }\n      userScope = userScope.filter(function (range) {\n        // 如果6个范围中任意一个范围中的三个值不完整，则忽略该范围配置\n\n        // 因为配置中min , max , color全部是字符串， 只要值为空的话就忽略使用\n        if (!_DataFocusMethod.isPureNumber(range.min)) return false;\n        if (!_DataFocusMethod.isPureNumber(range.max)) return false;\n        if (!range.color) return false;\n        range.min = parseFloat(range.min);\n        range.max = parseFloat(range.max);\n        return true;\n      }).sort(function (a, b) {\n        return a.min - b.min && a.max - b.max;\n      });\n    }\n\n    // 刻度配置\n    let tickType = chartConfigures && chartConfigures.measure_scale_type === 'option_measure_scale_type_define' ? 'defined' : '',\n      tickmin = chartConfigures && chartConfigures.measure_scale_min,\n      tickmax = chartConfigures && chartConfigures.measure_scale_max,\n      separate = chartConfigures && chartConfigures.measure_scale_step,\n      separateStep = chartConfigures && chartConfigures.measure_scale_step_number || 5;\n    if (tickType === 'defined' && _DataFocusMethod.isPureNumber(chartConfigures && chartConfigures.measure_scale_defined_min) && _DataFocusMethod.isPureNumber(chartConfigures && chartConfigures.measure_scale_step)) {\n      if (_DataFocusMethod.isPureNumber(chartConfigures && chartConfigures.measure_scale_defined_min)) {\n        limitData.min = chartConfigures.measure_scale_defined_min;\n      }\n      limitData.separate = separate;\n      limitData.step = separateStep;\n      limitData.type = tickType;\n    } else {\n      if (_DataFocusMethod.isPureNumber(tickmin)) {\n        limitData.definedMin = tickmin;\n      }\n      if (_DataFocusMethod.isPureNumber(tickmax)) {\n        limitData.definedMax = tickmax;\n      }\n    }\n\n    // 计算仪表仪表盘的刻度\n    var ticks = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].calcMeasureTicks(limitData),\n      ticksValues = ticks.values,\n      tickes = ticks.ticks,\n      min = ticks.min,\n      max = ticks.max,\n      ticksScale = ticks.separate,\n      uInc = max - min,\n      ticksLen = ticks.ticksLength - 1,\n      dataset = [],\n      // 表盘颜色每个区域的数值和颜色\n      scaleData = []; // 刻度位置\n\n    if (userScope.length) {\n      // 根据限制条件将用户自定义范转化为合法条件\n      for (let i = 0; i < userScope.length; i++) {\n        var uMIn = parseFloat(userScope[i].min),\n          uMax = parseFloat(userScope[i].max),\n          uColor = userScope[i].color,\n          pre;\n        if (uMIn < min) uMIn = min;\n        if (uMax > max) uMax = max;\n        if (!(uMIn > max || uMax < min || uMIn > uMax)) {\n          pre = dataset[dataset.length - 1] && dataset[dataset.length - 1].max;\n          if (pre !== undefined && uMIn > pre) {\n            if (uMIn !== min) {\n              dataset.push({\n                min: pre,\n                max: uMIn,\n                color: \"#eee\"\n              });\n            }\n          }\n          dataset.push({\n            min: pre !== undefined && uMIn <= pre ? pre : uMIn,\n            max: uMax,\n            color: uColor\n          });\n        }\n      }\n      // 末尾补漏处理 [ 往后补齐 且 往前补齐 ]\n      if (dataset[dataset.length - 1] && dataset[dataset.length - 1].max < max) {\n        dataset.push({\n          min: dataset[dataset.length - 1].max,\n          max: max,\n          color: \"#eee\"\n        });\n      }\n      if (dataset[0] && dataset[0].min > min) {\n        dataset.unshift({\n          min: min,\n          max: dataset[0].min,\n          color: \"#eee\"\n        });\n      }\n      dataset = dataset.map(function (e) {\n        return {\n          value: e.max - e.min,\n          // 换算为与刻度相匹配的比率\n          color: e.color\n        };\n      });\n    }\n    if (!dataset || !dataset.length) {\n      var num = Math.ceil(ticksLen * 0.2);\n      for (let i = 0; i < ticksLen; i++) {\n        let value = tickes[i + 1].value - tickes[i].value;\n        if (ticksLen < 3) dataset.push({\n          value: value,\n          color: conf.colors(i)\n        });else if (i < num) dataset.push({\n          value: value,\n          color: conf.colors(i)\n        });else if (i > ticksLen - num - 1) dataset.push({\n          value: value,\n          color: conf.colors(i)\n        });else dataset.push({\n          value: value,\n          color: conf.colors(i)\n        });\n      }\n    }\n\n    // 是否显示X轴标题的配置\n    let showXTitleFlag = !conf.inPinboard; //  用户没有配置X轴或配置为自动的情况下，系统按是否是看板自动分配\n    if (!chartConfigures.x_axis_title_visible || chartConfigures.x_axis_title_visible === 'system_auto_default') {\n      showXTitleFlag = !conf.inPinboard;\n    } else {\n      showXTitleFlag = chartConfigures.x_axis_title_visible === \"option_title_visible_show\";\n    }\n    let animateFlag = !chartConfigures.animation_forbidden,\n      //  是否禁止动画的标志\n      colorAssignedToScaleFlag = !!chartConfigures.chart_color_assigned_to_x_scale,\n      //  在没有图例且单个Y轴的情况下，将颜色按X轴刻度分配的标志\n      chartCustomLegend = chartConfigures.chart_custom_label_color,\n      //  用户自定义的颜色\n      thePositiveOutlierColor = '#0000ff',\n      //  离群分析正向颜色\n      theNegativeOutlierColor = '#eeeeee'; //  离群分析负向颜色\n    // 如果当前图形可以配置将颜色分配给X轴刻度，则计算当前X轴刻度的颜色\n    let theXLabelColorList = [],\n      defaultXLabelColorList = [];\n    if (!hasLegendFlag) {\n      let theLabelColorConfig = chartConfigures.chart_custom_label_color;\n      translateData.xLabelDistinct && translateData.xLabelDistinct.forEach(function (xLabel, index) {\n        let theMatchedColorConfig = theLabelColorConfig && theLabelColorConfig.find(function (theConfig) {\n          return theConfig.legend === xLabel;\n        });\n        theXLabelColorList.push({\n          id: xLabel,\n          legend: xLabel,\n          //  因为使用的legendList组件，所以显示名命名都是legend\n          color: theMatchedColorConfig && theMatchedColorConfig.color || colorFunc(index)\n        });\n        defaultXLabelColorList.push({\n          id: xLabel,\n          legend: xLabel,\n          color: colorFunc(index)\n        });\n      });\n    }\n\n    // 画X轴标题[ 如果看板中显示 或者 强制显示的情况 ]\n    let attributeTitleHeight = 0,\n      //  X轴横向摆放的高度\n      scalePaddingTop = 10,\n      //  垂直方向的刻度轴顶部需要预留10px空白\n      theXTitleSize;\n    if (showXTitleFlag) {\n      let theSettingXTitleText = chartConfigures.x_axis_title_content,\n        theDefaultXTitleText = [];\n      chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n        theDefaultXTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, xAxis, {\n          hideOperator: hideOperatorFlag\n        }));\n      });\n      theXTitleSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', \"KKK\", {\n        fontSize: theXTitleFontSize\n      });\n      _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_8__[\"default\"].drawAxisTitle({\n        svgContainer: containerResult.svgJqDom,\n        direction: 'horizontal',\n        titleText: theSettingXTitleText || theDefaultXTitleText.join(','),\n        //  标题内容\n        titleAlignment: chartConfigures.x_axis_title_alignment || 'center',\n        titleFontSize: theXTitleFontSize,\n        titleFontColor: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontColor,\n        titleFontBold: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontBold,\n        titleFontItalic: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontItalic,\n        translateTop: svgDrawHeight - theXTitleSize.height,\n        translateLeft: 0,\n        titleHeight: theXTitleSize.height,\n        titleWidth: svgDrawWidth,\n        titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? chartAxis.curXAxis : null\n      });\n\n      // attributeTitleHeight = theXTitleSize.height + titleSeparate ;\n    }\n    if (showYTitleFlag) {\n      let theYTitleSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', \"KKK\", {\n        fontSize: theYTitleFontSize\n      });\n      let yAxisBasicMessage = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].calcMeasureAxisBasicMessage({\n        direction: 'horizontal',\n        language: systemLanguage,\n        axisFontSize: theYAxisFontSize,\n        drawWidth: svgDrawWidth,\n        drawHeight: svgDrawHeight,\n        firstMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].translateMeasureAxis(chartAxis.curYAxis.filter(function (axis) {\n          return axis.direction !== 'right';\n        }), {\n          axisType: 'normal',\n          scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].translateScaleType(chartConfigures.measure_scale_type),\n          min: chartConfigures.measure_scale_min,\n          max: chartConfigures.measure_scale_max,\n          definedMin: chartConfigures.measure_scale_defined_min,\n          definedSeparate: chartConfigures.measure_scale_step,\n          definedStep: chartConfigures.measure_scale_step_number,\n          definedScaleFormat: chartConfigures.measure_left_y_configure\n        }),\n        secondMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].translateMeasureAxis(chartAxis.curYAxis.filter(function (axis) {\n          return axis.direction === 'right';\n        }), {\n          axisType: 'normal',\n          scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].translateScaleType(chartConfigures.measure_scale_type_right),\n          min: chartConfigures.measure_scale_min_right,\n          max: chartConfigures.measure_scale_max_right,\n          definedMin: chartConfigures.measure_scale_defined_min_right,\n          definedSeparate: chartConfigures.measure_scale_step_right,\n          definedStep: chartConfigures.measure_scale_step_number_right,\n          definedScaleFormat: chartConfigures.measure_right_y_configure\n        }),\n        showAxisTitleFlag: showYTitleFlag,\n        // Y轴标签没有配置的情况下, 默认是显示的\n        measureAxisVisible: chartConfigures.y_axis_label_visible === undefined ? true : chartConfigures.y_axis_label_visible,\n        titleFontSize: theYTitleFontSize,\n        maxLabelWidthPercent: chartConfigures.y_axis_label_max_width_percent,\n        alignZeroFlag: chartConfigures.measure_scale_parallel\n      });\n      let theDefaultTitleText = [];\n      let theMeasureAxis = yAxisBasicMessage.firstMeasure.measureAxis;\n      theMeasureAxis && theMeasureAxis.axisList && theMeasureAxis.axisList.forEach(function (yAxis) {\n        theDefaultTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n          hideOperator: hideOperatorFlag\n        }));\n      });\n      let theSettingTitleText = chartConfigures.y_axis_title_content;\n      _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_8__[\"default\"].drawAxisTitle({\n        svgContainer: containerResult.svgJqDom,\n        direction: 'horizontal',\n        titleText: theSettingTitleText || theDefaultTitleText.join(','),\n        //  标题内容\n        titleAlignment: chartConfigures.y_axis_title_alignment || 'center',\n        titleFontSize: theYTitleFontSize,\n        titleFontColor: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontColor,\n        titleFontBold: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontBold,\n        titleFontItalic: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontItalic,\n        translateLeft: 0,\n        translateTop: svgDrawHeight - theYTitleSize.height - (theXTitleSize && theXTitleSize.height || 0),\n        titleHeight: theYTitleSize.height,\n        titleWidth: svgDrawWidth,\n        titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? theMeasureAxis && theMeasureAxis.axisList : null\n      });\n    }\n\n    // 画截取区域\n    let chartClipDefId = _pc_assets_js_charts_components_SvgClipPathComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].drawClipPath({\n      svgContainer: containerResult.svgJqDom,\n      chartUUID: chartUUID,\n      width: svgDrawWidth,\n      height: svgDrawHeight,\n      x: 0,\n      y: 0\n    });\n\n    // 创建需要超出区域截取的容器，该容器上不允许增加transform的属性，会影响clipPath的作用位置\n    let theChartDetailContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).append(\"g\").style(\"font-size\", chartFontSize + 'px').attr(\"class\", \"chart-detail\").attr(\"clip-path\", \"url(#\" + chartClipDefId + \")\");\n    let leftYFormat = \"\";\n    let arch = chartConfigures && chartConfigures.option_arch || 270;\n    let innerPercent = chartConfigures && chartConfigures.option_inner_percent || 0.05;\n\n    // 表盘数据处理，刻度值和角度\n    for (let i = 0; i < ticksValues.length; i++) {\n      if (i > 0) {\n        var value = ticksValues[i] - ticksValues[i - 1],\n          preAngel,\n          preTextAngel;\n        if (value === ticksScale) {\n          for (let j = 0; j < 5; j++) {\n            preAngel = scaleData[scaleData.length - 1].angle;\n            preTextAngel = scaleData[scaleData.length - 1].textAngle;\n            // console.log(preAngel, preTextAngel);\n            scaleData.push({\n              angle: preAngel + arch * (value / 5 / uInc),\n              textAngle: preTextAngel + Math.PI * arch / 180 * (value / 5 / uInc),\n              textFlag: !!(j === 4)\n            });\n          }\n        } else {\n          preAngel = scaleData[scaleData.length - 1].angle;\n          preTextAngel = scaleData[scaleData.length - 1].textAngle;\n          // console.log(preAngel, preTextAngel);\n          scaleData.push({\n            angle: preAngel + arch * (value / uInc),\n            textAngle: preTextAngel + Math.PI * arch / 180 * (value / uInc),\n            textFlag: true\n          });\n        }\n      } else {\n        scaleData.push({\n          angle: 90 - arch / 2,\n          textAngle: Math.PI * (360 - arch) / 360,\n          textFlag: true\n        });\n      }\n    }\n\n    // 获取配置\n    let legendIndex = -1,\n      showValueFlag = false,\n      showValueScale = 1,\n      // 2.5\n      showTextFlag = false,\n      showTextScale = 1.5,\n      theBorderThickness = 1,\n      theBorderColor = '#fff',\n      theClassLabelFontSize = chartFontSize || 13,\n      theClassLabelFontColor = \"\",\n      theClassLabelFontBold = false,\n      theClassLabelFontItalic = false,\n      theLabelValueFontSize = chartFontSize || 13,\n      theLabelValueFontColor = \"\",\n      theLabelValueFontBold = false,\n      theLabelValueFontItalic = false,\n      showLabelTextFlag = true,\n      theLabelFontSize = chartFontSize || 13,\n      theLabelFontColor = \"\",\n      theLabelFontBold = false,\n      theLabelFontItalic = false,\n      showLabel = true;\n    if (chartConfigures) {\n      // 是否显示指针名的标志\n      if (chartConfigures.instrument_text_show_flag) {\n        showTextFlag = true;\n      }\n      // 显示指针名的大小\n      if (chartConfigures.class_label_font_adaptation === undefined || chartConfigures.class_label_font_adaptation) {\n        if (_DataFocusMethod.isPureNumber(chartConfigures.instrument_center_text_scale)) {\n          let theScaleNum = chartConfigures.instrument_center_text_scale;\n          showTextScale = parseFloat(theScaleNum);\n          showTextScale = Math.max(showTextScale, 0.5);\n        } else {\n          showTextScale = 1.5;\n        }\n      } else {\n        showTextScale = 1;\n      }\n      if (chartConfigures.instrument_open_label === undefined) {\n        showLabelTextFlag = true;\n      } else {\n        showLabelTextFlag = chartConfigures.instrument_open_label;\n      }\n\n      // 是否显示指针数值的标志\n      if (chartConfigures.instrument_number_show_flag) {\n        showValueFlag = true;\n      }\n      // 显示数值的大小\n      if (chartConfigures.label_value_font_adaptation === undefined || chartConfigures.label_value_font_adaptation) {\n        if (_DataFocusMethod.isPureNumber(chartConfigures.instrument_center_number_scale)) {\n          let theScaleNum = chartConfigures.instrument_center_number_scale;\n          showValueScale = parseFloat(theScaleNum);\n          showValueScale = Math.max(showValueScale, 0.5);\n        } else {\n          showValueScale = 2.5;\n        }\n      } else {\n        showValueScale = 1;\n      }\n\n      // 边框宽度\n      if (_DataFocusMethod.isPureNumber(chartConfigures.instrument_border_thickness)) {\n        let theBorderNum = chartConfigures.instrument_border_thickness;\n        theBorderThickness = parseFloat(theBorderNum);\n        theBorderThickness = Math.max(theBorderThickness, 0);\n      }\n      // 边框颜色\n      if (chartConfigures.instrument_border_color) {\n        theBorderColor = chartConfigures.instrument_border_color;\n      }\n\n      // 左y轴格式配置\n      if (conf.chartConfigures.measure_left_y_configure) {\n        leftYFormat = conf.chartConfigures.measure_left_y_configure;\n      }\n\n      // 类别（指针名）标签字体样式\n      if (chartConfigures.class_label_font_style) {\n        const fontStyle = chartConfigures.class_label_font_style;\n        if (fontStyle.fontColor) {\n          theClassLabelFontColor = fontStyle.fontColor;\n        }\n        if (_DataFocusMethod.isPureNumber(fontStyle.fontSize)) {\n          theClassLabelFontSize = fontStyle.fontSize;\n        }\n        if (fontStyle.fontBold) {\n          theClassLabelFontBold = fontStyle.fontBold;\n        }\n        if (fontStyle.fontItalic) {\n          theClassLabelFontItalic = fontStyle.fontItalic;\n        }\n      }\n\n      // 标注值(指针数值)\n      if (chartConfigures.label_value_font_style) {\n        const fontStyle = chartConfigures.label_value_font_style;\n        if (fontStyle.fontColor) {\n          theLabelValueFontColor = fontStyle.fontColor;\n        }\n        if (_DataFocusMethod.isPureNumber(fontStyle.fontSize)) {\n          theLabelValueFontSize = fontStyle.fontSize;\n        }\n        if (fontStyle.fontBold) {\n          theLabelValueFontBold = fontStyle.fontBold;\n        }\n        if (fontStyle.fontItalic) {\n          theLabelValueFontItalic = fontStyle.fontItalic;\n        }\n      }\n      if (chartConfigures.label_text_font_style) {\n        const fontStyle = chartConfigures.label_text_font_style;\n        if (fontStyle.fontColor) {\n          theLabelFontColor = fontStyle.fontColor;\n        }\n        if (_DataFocusMethod.isPureNumber(fontStyle.fontSize)) {\n          theLabelFontSize = fontStyle.fontSize;\n        }\n        if (fontStyle.fontBold) {\n          theLabelFontBold = fontStyle.fontBold;\n        }\n        if (fontStyle.fontItalic) {\n          theLabelFontItalic = fontStyle.fontItalic;\n        }\n      }\n    }\n    const instrumentType = chartConfigures && chartConfigures.chart_instrument_type;\n    if (instrumentType === undefined || instrumentType === 'option_default_value') {\n      _InstrumentChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].drawStandardInstrument({\n        chartDetailContainer: theChartDetailContainer,\n        containerResult: containerResult,\n        curXAxis: curXAxis,\n        curYAxis: curYAxis,\n        chartAxis: chartAxis,\n        translateData,\n        tableData: conf.datas,\n        legendValueList,\n        getColorFunc: colorFunc,\n        xLabelColorList: theXLabelColorList,\n        dataset: dataset,\n        radian: arch / 360,\n        angle: arch,\n        radius: _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min([svgDrawWidth, svgDrawHeight]),\n        innerPercent: innerPercent,\n        width: svgDrawWidth,\n        height: svgDrawHeight,\n        ticks: tickes,\n        scaleData: scaleData,\n        theBorderColor,\n        theBorderThickness,\n        leftYFormat,\n        showTextFlag,\n        showTextScale,\n        showValueFlag,\n        showValueScale,\n        animateFlag,\n        min,\n        max,\n        theClassLabelFontColor,\n        theClassLabelFontSize,\n        theClassLabelFontBold,\n        theClassLabelFontItalic,\n        theLabelValueFontColor,\n        theLabelValueFontSize,\n        theLabelValueFontBold,\n        theLabelValueFontItalic,\n        showLabelTextFlag,\n        theLabelFontColor,\n        theLabelFontSize,\n        theLabelFontBold,\n        theLabelFontItalic,\n        pointerSize,\n        showPointer\n      });\n    } else {\n      _InstrumentChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].drawProgressInstrument({\n        chartDetailContainer: theChartDetailContainer,\n        containerResult: containerResult,\n        curXAxis: curXAxis,\n        curYAxis: curYAxis,\n        chartAxis,\n        translateData,\n        tableData: conf.datas,\n        legendValueList,\n        getColorFunc: colorFunc,\n        xLabelColorList: theXLabelColorList,\n        dataset: dataset,\n        radian: arch / 360,\n        angle: arch,\n        radius: _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min([svgDrawWidth, svgDrawHeight]),\n        innerPercent: innerPercent,\n        width: svgDrawWidth,\n        height: svgDrawHeight,\n        ticks: tickes,\n        scaleData: scaleData,\n        theBorderColor,\n        theBorderThickness,\n        leftYFormat,\n        showTextFlag,\n        showTextScale,\n        showValueFlag,\n        showValueScale,\n        animateFlag,\n        min,\n        max,\n        theClassLabelFontColor,\n        theClassLabelFontSize,\n        theClassLabelFontBold,\n        theClassLabelFontItalic,\n        theLabelValueFontColor,\n        theLabelValueFontSize,\n        theLabelValueFontBold,\n        theLabelValueFontItalic,\n        showLabelTextFlag,\n        theLabelFontColor,\n        theLabelFontSize,\n        theLabelFontBold,\n        theLabelFontItalic,\n        pointerSize,\n        showPointer\n      });\n    }\n\n    // 如果当前图形配置有图例，则将图例配置传给图形\n    const returnConfigureAutoValue = {};\n    if (hasLegendFlag) {\n      returnConfigureAutoValue.has_legend_flag = hasLegendFlag;\n      returnConfigureAutoValue.legendValueList = legendValueList;\n      returnConfigureAutoValue.defaultLegendList = defaultLegendList;\n    } else {\n      returnConfigureAutoValue.xLabelColorList = theXLabelColorList;\n      returnConfigureAutoValue.defaultXLabelColorList = defaultXLabelColorList;\n    }\n    return {\n      chartAutoConfigures: returnConfigureAutoValue\n    };\n  },\n  // [*必填项]图表配置列表，其中的require条件不仅可以使用以下配置项的key，也可以使用drawChart中返回的chartAutoConfigures中的值\n  // drawChart返回的chartAutoConfigures是图形返回给图形配置组件的信息，用于开发者可以控制配置的显示与隐藏\n  chartConfigureList: [\n  // 通用 ： 字体大小，动画，最小柱宽，\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"theme\",\n      selection: [\"option_chart_theme_eight\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"],\n      defaultValue: \"option_chart_theme_one\"\n    },\n    //自定义主题颜色\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    // 隐藏聚合方式 [ 图例的聚合方式 ]\n    {\n      key: \"hide_operator_label\",\n      title: \"option_hide_operator_label\",\n      description: \"option_hide_operator_label_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 禁止图形动画\n    {\n      key: \"animation_forbidden\",\n      title: \"option_animation_forbidden\",\n      description: \"option_animation_forbidden_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 字体\n    {\n      key: \"font_size_label\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#1c1c1c\",\n        fontSize: 13\n      }\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 颜色范围\n  {\n    key: \"category_color_range\",\n    title: \"category_color_range\",\n    options: [\n    // 开启隐藏颜色范围\n    {\n      key: \"open_color_range\",\n      title: \"option_open_color_range\",\n      description: \"option_open_color_range_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 颜色范围\n    {\n      key: \"color_range\",\n      description: \"option_color_range_desc\",\n      type: \"color-range\",\n      require: \"open_color_range\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }],\n    require: 'chart_instrument_type;chart_instrument_type=option_default_value'\n  },\n  // 样式\n  {\n    key: \"option_scale_config_value_style\",\n    title: \"option_scale_config_value_style\",\n    options: [{\n      key: \"chart_instrument_type\",\n      title: \"option_chart_instrument_type\",\n      description: \"option_chart_instrument_type\",\n      type: \"select\",\n      selection: ['option_default_value', 'option_instrument_multiple_type']\n    }, {\n      key: \"option_arch\",\n      title: \"option_arch\",\n      description: \"option_arch_desc\",\n      type: \"input\",\n      min: 90,\n      max: 360,\n      defaultNumber: 270\n    }, {\n      key: \"option_inner_percent\",\n      title: \"option_inner_percent\",\n      description: \"option_inner_percent_desc\",\n      type: \"input\",\n      min: 0.01,\n      max: 0.15,\n      defaultNumber: 0.05,\n      step: 0.01\n    }, {\n      key: \"instrument_border_thickness\",\n      title: \"option_instrument_border_thickness\",\n      description: \"option_instrument_border_thickness_desc\",\n      type: \"input\",\n      defaultNumber: 1,\n      withoutSlider: true,\n      min: 0\n    }, {\n      key: \"instrument_border_color\",\n      title: \"option_instrument_border_color\",\n      description: \"option_instrument_border_color_desc\",\n      type: \"color\"\n    }, {\n      key: \"instrument_show_pointer\",\n      title: \"option_instrument_show_pointer\",\n      description: \"option_instrument_show_pointer\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    }, {\n      key: \"instrument_pointer_size\",\n      title: \"option_instrument_pointer_size\",\n      description: \"option_instrument_pointer_size\",\n      type: \"input\",\n      min: 10,\n      max: 100,\n      defaultNumber: 95\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  //图例： 是否隐藏，图例色块形状，图例位置，图例宽度，图例间隔 ， 图例限制条目数\n  {\n    key: \"category_legend_config\",\n    title: \"category_legend_config\",\n    require: \"has_legend_flag\",\n    options: [\n    // 隐藏图例\n    {\n      key: \"show_legend\",\n      title: \"option_map_info_show\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"legend_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 12\n      },\n      min: 12,\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"show_legend\"\n    },\n    // 图例形状\n    {\n      key: \"legend_shape_type\",\n      title: \"option_legend_shape_type\",\n      description: \"option_legend_shape_type_desc\",\n      type: \"select\",\n      selection: [\n      // \"option_default_value\",\n      \"option_legend_shape_type_circle\", \"option_legend_shape_type_three\", \"option_legend_shape_type_four\", \"option_legend_shape_type_rect\", \"option_legend_shape_type_five\", \"option_legend_shape_type_diamond\", \"option_legend_shape_type_loop\"],\n      require: \"show_legend\"\n    },\n    // 图例位置\n    {\n      key: \"legend_position\",\n      title: \"option_legend_position\",\n      description: \"option_legend_position_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_position_right\", \"option_position_top\", \"option_position_bottom\", \"option_position_right_top\"],\n      require: \"show_legend\"\n    },\n    // 图例宽度\n    {\n      key: \"legend_position_width\",\n      title: \"option_legend_position_width\",\n      description: \"option_legend_position_width_desc\",\n      type: \"input\",\n      withoutSlider: true,\n      min: 0,\n      max: 200,\n      defaultNumber: 80,\n      require: \"show_legend;legend_position=option_position_top,option_position_bottom\"\n    },\n    // 图例离画图区域的间隔\n    {\n      key: \"legend_position_offset\",\n      title: \"option_legend_position_offset\",\n      description: \"option_legend_position_offset_desc\",\n      type: \"input\",\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      defaultNumber: 5,\n      require: \"show_legend\"\n    },\n    // 图例之间的间隔\n    {\n      key: \"legend_position_interval\",\n      title: \"option_legend_position_interval\",\n      description: \"option_legend_position_interval_desc\",\n      type: \"input\",\n      allowNullFlag: true,\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      require: \"show_legend\"\n    }, {\n      key: \"legend_count_limit\",\n      title: \"option_legend_count_limit\",\n      description: \"option_legend_count_limit_desc\",\n      defaultNumber: 50,\n      max: 1000,\n      withoutSlider: true,\n      type: \"input\",\n      reTranslateResult: true,\n      require: \"!hide_legend\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 类别标签\n  {\n    key: \"category_class_label\",\n    title: \"category_class_label\",\n    options: [\n    // 开启隐藏\n    {\n      key: \"instrument_text_show_flag\",\n      title: \"option_open_class_label\",\n      description: \"option_open_class_label_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 字体自适应\n    {\n      key: \"class_label_font_adaptation\",\n      title: \"option_font_adaptation\",\n      description: \"option_font_adaptation\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"class_label_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#1c1c1c\",\n        fontSize: 13\n      }\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 标注值\n  {\n    key: \"category_label_value\",\n    title: \"category_label_value\",\n    options: [\n    // 开启隐藏\n    {\n      key: \"instrument_number_show_flag\",\n      title: \"option_open_label_value\",\n      description: \"option_open_label_value_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 字体自适应\n    {\n      key: \"label_value_font_adaptation\",\n      title: \"option_font_adaptation\",\n      description: \"option_font_adaptation\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"label_value_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#1c1c1c\",\n        fontSize: 13\n      }\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 数据标签\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [{\n      key: \"instrument_open_label\",\n      title: \"option_open_color_range\",\n      description: \"option_open_color_range\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"label_text_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      }\n    }, {\n      key: \"measure_left_y_configure\",\n      title: \"option_label_format_config\",\n      require: '!stacked_column_show_percent',\n      description: \"option_measure_left_y_configure_desc\",\n      type: \"axisFormat\"\n    },\n    // 刻度类型\n    {\n      key: \"measure_scale_type\",\n      title: \"option_measure_scale_type\",\n      require: '!stacked_column_show_percent',\n      description: \"option_measure_scale_type_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_measure_scale_type_define\"]\n    },\n    // 最小值\n    {\n      key: \"measure_scale_min\",\n      title: \"option_measure_scale_min\",\n      require: '!stacked_column_show_percent;measure_scale_type!=option_measure_scale_type_define',\n      description: \"option_measure_scale_min_desc\",\n      type: \"text\"\n    },\n    // 最大值\n    {\n      key: \"measure_scale_max\",\n      title: \"option_measure_scale_max\",\n      require: '!stacked_column_show_percent;measure_scale_type!=option_measure_scale_type_define',\n      description: \"option_measure_scale_max_desc\",\n      type: \"text\"\n    },\n    // 最小值\n    {\n      key: \"measure_scale_defined_min\",\n      title: \"option_measure_scale_min\",\n      require: '!stacked_column_show_percent;measure_scale_type=option_measure_scale_type_define',\n      description: \"option_measure_scale_defined_min_desc\",\n      type: \"text\",\n      default: \"0\"\n    },\n    // 刻度间隔\n    {\n      key: \"measure_scale_step\",\n      title: \"option_measure_scale_step\",\n      require: '!stacked_column_show_percent;measure_scale_type=option_measure_scale_type_define',\n      description: \"option_measure_scale_step_desc\",\n      type: \"text\"\n    },\n    // 刻度数量\n    {\n      key: \"measure_scale_step_number\",\n      title: \"option_measure_scale_step_number\",\n      require: '!stacked_column_show_percent;measure_scale_type=option_measure_scale_type_define',\n      description: \"option_measure_scale_step_number_desc\",\n      type: \"input\",\n      min: 2,\n      defaultNumber: 5\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  /**\r\n   * 图形配置的辅助对象：当前图形定义的宏列表 及 宏 解析方法 ； 适配之前图形配置值的方法 ；\r\n   *\r\n   * 当前图形提供的宏列表[ 宏名的命名规则： 开头是%_ 用_连接的大写字符字符串 ]\r\n   * 供自定义数据标签 及 悬浮文本使用，可以让用户配置显示内容\r\n   * 键值对  MacroName : MacroDisplayNameKey\r\n   * */\n  chartConfigureAdvanced: {\n    // 根据宏配置列表，已足够外部组件将 %_NAME:%_VALUE 翻译成 [属性]：[值] 显示给用户\n    // 如果当前图形支持换行的宏，则输入时允许输入换行符 ； 否则编辑时也不支持换行符 ；\n    chartMacroList: [{\n      key: '%_NAME',\n      nameKey: '%_NAME',\n      descriptionKey: '%_NAME_desc'\n    }, {\n      key: '%_CATEGORY_NAME',\n      nameKey: '%_CATEGORY_NAME',\n      descriptionKey: '%_CATEGORY_NAME_desc'\n    }, {\n      key: '%_CATEGORY_NUMBER',\n      nameKey: '%_CATEGORY_NUMBER',\n      descriptionKey: '%_CATEGORY_NUMBER_desc'\n    }, {\n      key: '%_SERIES_NAME',\n      nameKey: '%_SERIES_NAME',\n      descriptionKey: '%_SERIES_NAME_desc'\n    }, {\n      key: '%_SERIES_NUMBER',\n      nameKey: '%_SERIES_NUMBER',\n      descriptionKey: '%_SERIES_NUMBER_desc'\n    }, {\n      key: '%_VALUE_NAME',\n      nameKey: '%_VALUE_NAME',\n      descriptionKey: '%_VALUE_NAME_desc'\n    }, {\n      key: '%_VALUE',\n      nameKey: '%_VALUE',\n      descriptionKey: '%_VALUE_desc'\n    }, {\n      key: '%_CATEGORY_TOTAL',\n      nameKey: '%_CATEGORY_TOTAL',\n      descriptionKey: '%_CATEGORY_TOTAL_desc'\n    }, {\n      key: '%_CATEGORY_AVERAGE',\n      nameKey: '%_CATEGORY_AVERAGE',\n      descriptionKey: '%_CATEGORY_AVERAGE_desc'\n    }, {\n      key: '%_PERCENT_OF_CATEGORY',\n      nameKey: '%_PERCENT_OF_CATEGORY',\n      descriptionKey: '%_PERCENT_OF_CATEGORY_desc'\n    }, {\n      key: '%_PERCENT_OF_TOTAL',\n      nameKey: '%_PERCENT_OF_TOTAL',\n      descriptionKey: '%_PERCENT_OF_TOTAL_desc'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR',\n      descriptionKey: '%_BR_desc'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type        -\r\n     *\r\n     *              xLabel       -   图形单元对应的属性值 用于实现%_NAME %_CATEGORY_NAME\r\n     *              xLabelIndex  -   图形单元对应的属性索引，用于实现 %_CATEGORY_NUMBER\r\n     *              xLabelTotal  -   图形单元对应的属性上所有值的总和用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              xLabelNumber -   图形单元对应的属性上所有值的个数用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              yValue       -   图形单元对应的值 用于实现 %_VALUE\r\n     *              yAxis        -   图形单元对应的值列 用于实现 %_VALUE_NAME  %_SERIES_NAME\r\n     *              legend       -   图形单元对应的图例名(为空时说明是多Y轴) 用于实现 %_SERIES_NAME\r\n     *              legendIndex  -   图形单元对应的图例索引 用于实现 %_SERIES_NUMBER\r\n     *              legendTotal  -   图形单元对应的图例上所有值的总和,用于实现 %_PERCENT_OF_TOTAL\r\n     *              rowData -  图形单元对应的一整行数据 用于实现%_COLUMN_N的宏\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case \"%_NAME\":\n          case \"%_CATEGORY_NAME\":\n            theMatchedTextValue += options.xLabel || '';\n            break;\n          case \"%_CATEGORY_NUMBER\":\n            theMatchedTextValue += options.xLabelIndex || '';\n            break;\n          case \"%_SERIES_NAME\":\n            if (options.legend) {\n              theMatchedTextValue += options.legend || '';\n            } else if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_SERIES_NUMBER\":\n            theMatchedTextValue += options.legendIndex || '';\n            break;\n          case \"%_VALUE_NAME\":\n            if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.yValue, options.yAxis) || '';\n            break;\n          case \"%_CATEGORY_TOTAL\":\n            theMatchedTextValue += options.xLabelTotal || '';\n            break;\n          case \"%_CATEGORY_AVERAGE\":\n            let theAverage = options.xLabelTotal / (options.xLabelNumber || 1);\n            if (!isNaN(theAverage)) {\n              theMatchedTextValue += _DataFocusMethod.formatData(_DataFocusMethod.getValidNum(theAverage, 2), options.yAxis);\n            }\n            break;\n          case \"%_PERCENT_OF_CATEGORY\":\n            let theCPercent = options.yValue / (options.xLabelTotal || 1);\n            if (!isNaN(theCPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theCPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_PERCENT_OF_TOTAL\":\n            let theTPercent = options.yValue / (options.legendTotal || 1);\n            if (!isNaN(theTPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theTPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n              let theColumnN = parseInt(theMatchStr.substring(9));\n              if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN < options.rowData.length) {\n                theMatchedTextValue += options.rowData[theColumnN - 1];\n              }\n            }\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    },\n    // 如果当前图形配置在上线后需要更新配置，需要兼容行为，则在此处处理[ 不同图形兼容方法不一样 ]\n    compatibleHistoryConfigure: function (chartConfigure) {\n      if (!chartConfigure) return false;\n\n      // 图形字体大小修改了值结构\n      if (_DataFocusMethod.isPureNumber(chartConfigure.font_size_label)) {\n        let theFontSize = parseInt(chartConfigure.font_size_label);\n        chartConfigure.font_size_label = {\n          fontSize: theFontSize\n        };\n      }\n\n      // 图形标题隐藏配置调整为两个配置值\n      if (chartConfigure.hidden_chart_title) {\n        chartConfigure.x_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.y_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.hidden_chart_title = undefined;\n      }\n\n      // 属性图例颜色 与 Y轴颜色只会存在其中一个\n      // 图例配置列表配置了属性图例的颜色\n      if (chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.length) {\n        let theLegendList = [];\n        chartConfigure.chart_custom_legend_new.forEach(function (legend) {\n          if (legend.legend !== undefined && legend.color) {\n            theLegendList.push({\n              id: _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId(\"legendAxis\", legend.legend),\n              legend: legend.legend,\n              color: legend.color\n            });\n          }\n        });\n        chartConfigure.chart_custom_legend_new = undefined;\n        chartConfigure.chart_legend_list = theLegendList;\n      }\n      // 图例配置列表配置了Y轴的颜色\n      if (chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.length) {\n        let theLegendList = [];\n        chartConfigure.chart_custom_legend_new_measure.forEach(function (configLeg) {\n          let theLegendNameObj = configLeg.options && configLeg.options.find(function (obj) {\n              return obj.title === 'option_chart_legend_measure_name';\n            }),\n            theLegendName = theLegendNameObj && theLegendNameObj.value || '',\n            theLegendColorObj = configLeg.options && configLeg.options.find(function (obj) {\n              return obj.title === 'option_chart_legend_color';\n            }),\n            theLegendColor = theLegendColorObj && theLegendColorObj.value || '';\n          theLegendName = theLegendName.replace(\"-y-axis-\", \"\");\n          let theYAxisArray = theLegendName.split('-'),\n            theColIdx = theYAxisArray[0],\n            theColName = theYAxisArray[1];\n          if (theLegendName && theLegendColor) {\n            theLegendList.push({\n              id: _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('YAxis', theColIdx),\n              legend: theColName,\n              color: theLegendColor\n            });\n          }\n        });\n        chartConfigure.chart_custom_legend_new_measure = undefined;\n        chartConfigure.chart_legend_list = theLegendList;\n      }\n\n      // 显示图例\n      if (chartConfigure.hide_legend && chartConfigure.show_legend === undefined) {\n        chartConfigure.show_legend = false;\n      }\n      if (chartConfigure.color_range === undefined) {\n        // 颜色范围\n        let userScope = [{\n          min: chartConfigure && chartConfigure.range_1_min,\n          // 范围1刻度开始值\n          max: chartConfigure && chartConfigure.range_1_max,\n          // 范围1刻度结束值\n          color: chartConfigure && chartConfigure.range_1_color // 范围1刻度颜色\n        }, {\n          min: chartConfigure && chartConfigure.range_2_min,\n          // 范围2刻度开始值\n          max: chartConfigure && chartConfigure.range_2_max,\n          // 范围2刻度结束值\n          color: chartConfigure && chartConfigure.range_2_color // 范围2刻度颜色\n        }, {\n          min: chartConfigure && chartConfigure.range_3_min,\n          // 范围3刻度开始值\n          max: chartConfigure && chartConfigure.range_3_max,\n          // 范围3刻度结束值\n          color: chartConfigure && chartConfigure.range_3_color // 范围3刻度颜色\n        }, {\n          min: chartConfigure && chartConfigure.range_4_min,\n          // 范围4刻度开始值\n          max: chartConfigure && chartConfigure.range_4_max,\n          // 范围4刻度结束值\n          color: chartConfigure && chartConfigure.range_4_color // 范围4刻度颜色\n        }, {\n          min: chartConfigure && chartConfigure.range_5_min,\n          // 范围5刻度开始值\n          max: chartConfigure && chartConfigure.range_5_max,\n          // 范围5刻度结束值\n          color: chartConfigure && chartConfigure.range_5_color // 范围5刻度颜色\n        }, {\n          min: chartConfigure && chartConfigure.range_6_min,\n          // 范围6刻度开始值\n          max: chartConfigure && chartConfigure.range_6_max,\n          // 范围6刻度结束值\n          color: chartConfigure && chartConfigure.range_6_color // 范围6刻度颜色\n        }].filter(function (range) {\n          // 因为配置中min , max , color全部是字符串， 只要值为空的话就忽略使用\n          if (!_DataFocusMethod.isPureNumber(range.min)) return false;\n          if (!_DataFocusMethod.isPureNumber(range.max)) return false;\n          if (!range.color) return false;\n          range.min = parseFloat(range.min);\n          range.max = parseFloat(range.max);\n          return true;\n        }).sort(function (a, b) {\n          return a.min - b.min && a.max - b.max;\n        });\n        if (userScope.length) {\n          chartConfigure.open_color_range = true;\n        } else {\n          chartConfigure.open_color_range = false;\n        }\n        chartConfigure.color_range = userScope;\n      }\n      if (chartConfigure.instrument_show_pointer === undefined) {\n        chartConfigure.instrument_show_pointer = true;\n      }\n    }\n  },\n  // [*必填项]图轴及图表自定义的中英文\n  i18nObj: {\n    chinese: {\n      \"system_auto_default\": \"自动\",\n      \"user_define_text\": \"自定义\",\n      \"category_x_axis\": \"X轴\",\n      \"option_x_axis_draw_type\": \"X轴类型\",\n      \"option_select_x_axis_dot_line\": \"单层散点\",\n      \"option_x_axis_draw_type_desc\": \"X轴总共有三种类型：\" + \"<br /> 多层属性[自动]：X轴有2个或3个属性列时，自动会识别使用多层属性展示X轴刻度\" + \"<br /> 时间轴[自动]：X轴只有1个时间列 且 经过每天/每小时/每分钟聚合时，自动会识别使用时间轴展示X轴刻度\" + \"<br /> 单层散点：所有数据均可以强制使用单层三点的模式展示X轴刻度\" + \"<br /> 系统会自动适配合适的X轴，但是您可以强制切换称单层单点模式\",\n      \"option_axis_label_visible\": \"轴标签\",\n      \"option_axis_title_visible\": \"轴标题\",\n      \"option_axis_title_visible_desc\": \"自动情况下，会在详情页面显示标题，看板中隐藏标题\",\n      \"option_title_visible_show\": \"显示\",\n      \"option_title_visible_hide\": \"隐藏\",\n      \"option_axis_title_content\": \"标题内容\",\n      \"option_axis_title_content_desc\": \"默认会使用X轴的列名\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"旋转角度\",\n      \"option_x_axis_label_dot_line_space_width\": \"刻度间距\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"X轴刻度是单层散点模式下，刻度之间的最小间距，默认是50（即每50px显示一个刻度）\",\n      \"option_x_axis_label_max_height_percent\": \"最大高度(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"X轴是单层散点模式下，超出最大高度百分比时，截取字符串显示；其他模式下，超出最大高度时，将不显示X轴刻度\",\n      \"option_font_style\": \"字体\",\n      \"option_font_alignment\": \"对齐方式\",\n      \"category_y_axis\": \"Y轴\",\n      \"option_y_axis_label_max_width_percent\": \"最大宽度(%)\",\n      \"option_measure_configure\": \"格式配置\",\n      \"category_right_y_axis\": \"右Y轴\",\n      \"category_color\": \"颜色\",\n      \"option_chart_column_minimum_width\": \"自适应最小柱宽\",\n      \"option_chart_column_minimum_width_desc\": \"默认情况下，依据画图区域及画图数据自适应的柱宽值，默认最小值是5px，设置刻度固定宽度后，该值就无效\",\n      \"option_chart_column_width\": \"刻度固定宽度\",\n      \"option_chart_column_width_desc\": \"默认依据画图区域宽度自适应刻度宽度，设置固定刻度宽度后，固定刻度宽度，最小值为5px\",\n      \"option_suspend_text_regex_desc\": \"要显示的文本。有以下替换宏可用：<br /> \" + \"<span class='mr3'>[值]</span> - 对应的Y轴的数值 <br />\" + \"<span class='mr3'>[属性]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[刻度]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[刻度索引]</span> - 数值标签为对应的X轴值的顺序 <br /> \" + \"<span class='mr3'>[类别]</span> - 对应的图例的类别值<br /> \" + \"<span class='mr3'>[类别索引]</span> - 对应的图例的类别顺序索引<br /> \" + \"<span class='mr3'>[刻度总和]</span> - 可显示X轴为某个值时所有Y轴的数值之和 <br /> \" + \"<span class='mr3'>[刻度平均值]</span> - 可显示X轴为某个值时所有Y轴的平均值<br /> \" + \"<span class='mr3'>[类别百分比]</span> - X轴的刻度上Y值占所有Y值总和的百分比 <br />\" + \"<span class='mr3'>[刻度百分比]</span> - X轴的刻度上Y值占该X刻度上所有Y值总和的百分比 <br /> \" + \"<span class='mr3'>[(列N)]</span> - 第N列的数值 <br /> \" + \"<span class='mr3'>[换行]</span> - 换行符\",\n      \"%_NAME\": \"属性\",\n      \"%_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_VALUE\": \"值\",\n      \"%_VALUE_desc\": \"对应的Y轴的数值\",\n      \"%_VALUE_NAME\": \"值名称\",\n      \"%_VALUE_NAME_desc\": \"对应的Y轴的名称\",\n      \"%_SERIES_NAME\": \"类别\",\n      \"%_SERIES_NAME_desc\": \"对应的图例的类别值\",\n      \"%_SERIES_NUMBER\": \"类别索引\",\n      \"%_SERIES_NUMBER_desc\": \"对应的图例的类别顺序索引\",\n      \"%_CATEGORY_NAME\": \"刻度\",\n      \"%_CATEGORY_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_CATEGORY_NUMBER\": \"刻度索引\",\n      \"%_CATEGORY_NUMBER_desc\": \"对应的X轴的刻度顺序索引\",\n      \"%_CATEGORY_TOTAL\": \"刻度总和\",\n      \"%_CATEGORY_TOTAL_desc\": \"各个X轴刻度上所有Y轴值的总和\",\n      \"%_CATEGORY_AVERAGE\": \"刻度平均值\",\n      \"%_CATEGORY_AVERAGE_desc\": \"各个X轴刻度上所有Y轴值的平均值\",\n      \"%_PERCENT_OF_TOTAL\": \"类别百分比\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"X轴的刻度上Y值占所有Y值总和的百分比\",\n      \"%_PERCENT_OF_CATEGORY\": \"刻度百分比\",\n      \"%_PERCENT_OF_CATEGORY_desc\": \"X轴的刻度上Y值占该X刻度上所有Y值总和的百分比\",\n      \"%_BR\": \"换行\",\n      \"option_grid_show_all_line\": \"显示全部网格线\",\n      \"option_grid_line_style\": \"网格线样式\",\n      \"option_grid_line_style_desc\": \"配置所有网格线的样式，包括虚实，颜色及粗细\",\n      \"option_grid_show_only_zero_line\": \"只显示零线\",\n      \"option_grid_show_only_zero_line_desc\": \"配置后，网格线中非零线将全部隐藏，只显示零线 <br /> 如果Y轴最小值大于0，则没有零线，所有网格线均都不显示 \",\n      \"option_grid_zero_line_style\": \"零线样式\",\n      \"option_grid_zero_line_style_desc\": \"配置零线的样式，包括虚实，颜色及粗细\",\n      \"option_scale_y_visible\": \"显示/隐藏\"\n    },\n    english: {\n      \"system_auto_default\": \"Auto\",\n      \"user_define_text\": \"Define\",\n      \"category_x_axis\": \"X Axis\",\n      \"option_x_axis_draw_type\": \"X axis type\",\n      \"option_select_x_axis_dot_line\": \"Single level\",\n      \"option_x_axis_draw_type_desc\": \"There are three types of X-axis in total:\" + \"<br /> Multi level[Auto]: 2 or 3 attribute columns on the X-axis, it will automatically recognize the multi level \" + \"<br /> Time line[Auto]: only one time column on the X-axis and it is aggregated daily / hourly / minutely , it will automatically recognize the time line\" + \"<br /> Single level: All data can be forced to display the single level\" + \"<br /> The system will automatically adapt to the appropriate X-axis, but you can forcibly switch to the single level\",\n      \"option_axis_label_visible\": \"Axis Label\",\n      \"option_axis_title_visible\": \"Axis Title\",\n      \"option_axis_title_visible_desc\": \"In automatic mode, the title will be displayed on the answer detail page and hidden in the pinboard\",\n      \"option_title_visible_show\": \"Show\",\n      \"option_title_visible_hide\": \"Hidden\",\n      \"option_axis_title_content\": \"Title Content\",\n      \"option_axis_title_content_desc\": \"By default, column names on the axis will be used\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"Rotate\",\n      \"option_x_axis_label_dot_line_space_width\": \"Label Spacing\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"The scale is the minimum spacing between labels in single level axis, with a default of 50 (i.e. one scale displayed every 50px)\",\n      \"option_x_axis_label_max_height_percent\": \"Max height(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"The axis is in single level, and when the maximum height percentage is exceeded, the string is truncated and displayed; In other modes, when the maximum height is exceeded, the scale will not be displayed\",\n      \"option_font_style\": \"Font\",\n      \"option_font_alignment\": \"Alignment\",\n      \"category_y_axis\": \"Y Axis\",\n      \"option_y_axis_label_max_width_percent\": \"Max Width(%)\",\n      \"option_measure_configure\": \"Data Format\",\n      \"category_right_y_axis\": \"Right Y Axis\",\n      \"category_color\": \"Color\",\n      \"option_chart_column_minimum_width\": \"Adaptive minimum column width\",\n      \"option_chart_column_minimum_width_desc\": \"By default, the column width value is adaptively adjusted based on the drawing area and data. The default minimum value is 5px. After setting the fixed width of the scale, this value is invalid\",\n      \"option_chart_column_width\": \"Fixed column width\",\n      \"option_chart_column_width_desc\": \"By default, the width is adaptive based on the width of the drawing area. After setting a fixed scale width, the scale width is fixed, with a minimum value of 5px\",\n      \"option_suspend_text_regex_desc\": \"The text to be displayed. The following replacement macros are available:<br /> \" + \"<span class='mr3'>[Value]</span> - The corresponding value of the Y-axis <br />\" + \"<span class='mr3'>[Attribute]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Label]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Label Index]</span> - The order in which the numerical labels correspond to the X-axis values <br /> \" + \"<span class='mr3'>[Series]</span> - The series value of the corresponding legend<br /> \" + \"<span class='mr3'>[Series Index]</span> - The series order of the corresponding legend<br /> \" + \"<span class='mr3'>[Label Total]</span> - Can display the sum of all Y-axis values when the X-axis is a certain value <br /> \" + \"<span class='mr3'>[Label AVG]</span> - Can display the average value of all Y-axes when the X-axis is a certain value<br /> \" + \"<span class='mr3'>[Series Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on the legend<br />\" + \"<span class='mr3'>[Label Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on that scale <br /> \" + \"<span class='mr3'>[(ColumnN)]</span> - Value in column N <br /> \" + \"<span class='mr3'>[Wrap]</span> - Line break\",\n      \"%_NAME\": \"Attribute\",\n      \"%_NAME_desc\": \"The displayed numerical labels are the corresponding X-axis values\",\n      \"%_VALUE\": \"Value\",\n      \"%_VALUE_desc\": \"The corresponding value of the Y-axis\",\n      \"%_VALUE_NAME\": \"Value Name\",\n      \"%_VALUE_NAME_desc\": \"The corresponding y-axis column name\",\n      \"%_SERIES_NAME\": \"Series\",\n      \"%_SERIES_NAME_desc\": \"The category value of the corresponding legend\",\n      \"%_SERIES_NUMBER\": \"Series Index\",\n      \"%_SERIES_NUMBER_desc\": \"Category order index of corresponding legend\",\n      \"%_CATEGORY_NAME\": \"Label\",\n      \"%_CATEGORY_NAME_desc\": \"The corresponding X-axis scale value\",\n      \"%_CATEGORY_NUMBER\": \"Label Index\",\n      \"%_CATEGORY_NUMBER_desc\": \"Corresponding X-axis scale sequence index\",\n      \"%_CATEGORY_TOTAL\": \"Label Total\",\n      \"%_CATEGORY_TOTAL_desc\": \"The sum of all Y-axis values on each X-axis scale\",\n      \"%_CATEGORY_AVERAGE\": \"Label AVG\",\n      \"%_CATEGORY_AVERAGE_desc\": \"The average value of all Y-axis values on each X-axis scale\",\n      \"%_PERCENT_OF_TOTAL\": \"Series Percentage\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"The percentage of Y value on the X-axis scale to the total sum of all Y values\",\n      \"%_PERCENT_OF_CATEGORY\": \"Label Percentage\",\n      \"%_PERCENT_OF_CATEGORY_desc\": \"The percentage of Y value on the X-axis scale to the total sum of all Y values on that X-axis scale\",\n      \"%_BR\": \"Wrap\",\n      \"option_grid_show_all_line\": \"Show all grid lines\",\n      \"option_grid_line_style\": \"Line style\",\n      \"option_grid_line_style_desc\": \"Configure the styles of all grid lines, including virtual and solid, color, and thickness\",\n      \"option_grid_show_only_zero_line\": \"Only show the zero line\",\n      \"option_grid_show_only_zero_line_desc\": \"After configuration, all non zero lines in the grid lines will be hidden, and only zero lines will be displayed.<br/>If the minimum value of the Y-axis is greater than 0, there will be no zero lines, and all grid lines will not be displayed\",\n      \"option_grid_zero_line_style\": \"Zero line style\",\n      \"option_grid_zero_line_style_desc\": \"Configure the style of the zero line, including virtual and solid, color, and thickness\",\n      \"option_scale_y_visible\": \"Show/Hide\"\n    }\n  },\n  // [*必填项]生成当前图表类型的模板数据\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.basic/instrument/systemInstrumentChart.js?");

/***/ })

}]);
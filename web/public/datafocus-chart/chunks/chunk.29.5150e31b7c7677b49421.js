(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[29],{

/***/ "../src-v5/assets/js/charts.system.senior/3dGlobe.js":
/*!***********************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/3dGlobe.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../world */ \"../src-v5/assets/js/world.js\");\n/** 3D地球图组件 **/\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  chartType: 'globeThree',\n  //  图形名 [ * 必填项 ]\n  chartDisplayNameKey: \"chart-name-title\",\n  //  图形名称中英文Key [ * 必填项 ]\n  chartDescriptionKey: \"chart-description-title\",\n  //  图形描述中英文Key [ * 必填项 ]\n\n  /**\n   * 判断图形允许画的方法 [ * 必填项 ]\n   * 适合柱状图的条件 ， 聚合数据且至少一个属性列及至少一个数值列\n   * @param searchResultStatistic\n   *          {\n   *              aggregatedFlag  搜索数据是否聚合的标志\n   *\n   *              measureColumns    数值列数量\n   *                  {\n   *                      index\n                          columnId\n                          columnClassify\n                          parent\n   *                  }\n   *              attributeColumns  属性列数量\n   *              legendColumns     能作为图例的属性列数量（distinct_count < 50 的列）\n   *              dateColumns       日期列数量\n   *              lonColumns        经度列数量\n   *              latColumns        纬度列数量\n   *              queryResultCount    查询数据结果条目\n   *              regionColumns        地理列数组（1：国家集合；1.5：国家；2：省集合；2.5：省；3：市集合；3.5：市；4：区集合；4.5：区；0：其他地理列）\n   *          }\n   *\n   * @return Boolean  true: 当前数据适合画当前图形；false: 当前数据不适合画当前图形\n   * */\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n\n    // 搜索数据是聚合数据且至少一组(经、纬)地理属性列及至少一个数值列\n    if (searchResultStatistic && searchResultStatistic.aggregatedFlag && searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.measureColumns.length > 0 && searchResultStatistic.attributeColumns.length > 1) {\n        let isLat = 0;\n        let isLong = 0;\n        searchResultStatistic.attributeColumns.forEach(function (d) {\n          if (d.geo_type === \"LONGITUDE\") isLong++;\n          if (d.geo_type === \"LATITUDE\") isLat++;\n        });\n        if (isLat >= 1 && isLong >= 1) satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  // 图形配置元素 [ * 必填项 ]\n  needAxis: {\n    // 默认xAxis是属性列 [数组]\n    'xAxis': {\n      i18nKey: \"chart-x-axis-title\",\n      //  X轴显示名的key [ 非必填项 ]\n      columnType: \"lon&lat\" //   X轴是什么类型的数据  lon&lat - 经纬度   ；   lon -   经度  ；   lat -   纬度 ；\n    },\n    // 默认yAxis是数值列 [数组]\n    'yAxis': {\n      i18nKey: \"chart-y-axis-title\",\n      //  Y轴显示名的key [ 非必填项 ]\n      allowMultiYAxis: false,\n      //  是否允许左右侧边Y轴 [ 非必填项 ]\n      multiYAxisKey: \"chart-multi-y-axis-title\",\n      //  右侧轴的显示名的key [ 非必填项 ]\n\n      /**\n       * 默认Y轴的数量 [ 非必填项 ]\n       * 允许系统默认图形配置元素后 ，\n       * needAxis中存在Y轴，默认Y轴的数量，—1时即所有的除Size以外的数值列 ；\n       * 如果为>0的数值，则取相应数量以内的数值列\n       */\n      defaultYAxisNumber: -1\n    },\n    'legend': {\n      i18nKey: \"chart-legend-title\"\n    }\n    // 默认图例时distinct_count在50以内的属性列 [ 数值 ]\n  },\n  /**\n   * 判断当前图形的Axis配置是否合法 [ * 必填项 ]\n   * 例：X轴不允许为空，Y轴不允许为空，X轴不允许与图例列相同\n   * @params [Object]theAxisConfig      -   当前用户手动配置的规则\n   *          {\n   *              xAxis: [{\n   *                  index\n   *                  columnId\n   *                  type\n   *              }] ,\n   *              yAxis: [{\n   *                  index\n   *                  columnId\n   *              }] ,\n   *              legend: [{\n   *                  index\n   *                  columnId\n   *              }] ,\n   *\n   *              // 搜素数据的统计信息\n   *              searchResultStatistic: {\n   *                  aggregatedFlag  搜索数据是否聚合的标志\n   *\n   *                  measureColumns    数值列数量\n   *                  attributeColumns  属性列数量\n   *                  legendColumns     能作为图例的属性列数量（distinct_count < 50 的列）\n   *                  dateColumns       日期列数量\n   *                  lonColumns        经度列数量\n   *                  latColumns        纬度列数量\n   *                  queryResultCount    查询数据结果条目\n   *                  regionColumns        地理列数组（1：国家集合；1.5：国家；2：省集合；2.5：省；3：市集合；3.5：市；4：区集合；4.5：区；0：其他地理列）\n   *              }\n   *          }\n   *\n   * 判断条件：\n   * 1. xAxis不允许为空\n   * 2. yAxis不允许为空\n   * 3. 主Y轴不允许为空\n   * 4. legend只允许一个\n   * 5. legend存在时Y轴只允许一个\n   * 6. legend不允许与xAxis重复\n   *\n   * @return [String]errorKey -   错误提示对应的key;\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let theErrorMsgKey = '';\n    if (!theAxisConfig) {\n      theErrorMsgKey = 'chart-axis-config-null-error';\n      return theErrorMsgKey;\n    }\n\n    // 1.X轴不允许为空\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      theErrorMsgKey = 'chart-xy-axis-null';\n      return theErrorMsgKey;\n    }\n    // 2.Y轴不允许为空\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      theErrorMsgKey = 'chart-xy-axis-null';\n      return theErrorMsgKey;\n    }\n    // 3.主Y轴不允许为空\n    let theMainYAxis = theAxisConfig.yAxis.filter(function (yAxis) {\n      return yAxis.direction !== 'right';\n    });\n    if (!theMainYAxis || !theMainYAxis.length) {\n      theErrorMsgKey = 'chart-left-y-axis-null';\n      return theErrorMsgKey;\n    }\n    // 图例不为空的情况下\n    if (theAxisConfig.legend) {\n      // 3. 图例只允许一个\n      if (theAxisConfig.legend.length > 1) {\n        theErrorMsgKey = 'chart-legend-too-much';\n        return theErrorMsgKey;\n      }\n      // 4. 有图例的情况下，Y轴不允许多个\n      if (theAxisConfig.legend.length && theAxisConfig.yAxis.length > 1) {\n        theErrorMsgKey = 'chart-y-axis-too-much-with-legend';\n        return theErrorMsgKey;\n      }\n      // 5. 有图例的情况下，图例不允许与X轴相同\n      for (let i = 0; i < theAxisConfig.legend.length; i++) {\n        let theLegend = theAxisConfig.legend[i],\n          theMatchedLegend = theAxisConfig.xAxis && theAxisConfig.xAxis.find(function (xAxis) {\n            return xAxis.index === theLegend.index;\n          });\n        if (theMatchedLegend) {\n          theErrorMsgKey = 'chart-x-legend-axis-not-equal';\n          return theErrorMsgKey;\n          break;\n        }\n      }\n    }\n    // 当前图形需要将所有属性列利用起来\n    let theSearchResultStatistic = theAxisConfig.searchResultStatistic;\n    if (theSearchResultStatistic) {\n      let theUsedAttribute = 0;\n      if (theAxisConfig.xAxis) {\n        theUsedAttribute += theAxisConfig.xAxis.length;\n      }\n      if (theAxisConfig.legend) {\n        theUsedAttribute += theAxisConfig.legend.length;\n      }\n      if (theSearchResultStatistic.attributeColumns && theSearchResultStatistic.attributeColumns.length > theUsedAttribute) {\n        //theErrorMsgKey = 'chart-need-all-attribute-columns' ;\n        //return theErrorMsgKey ;\n      }\n    }\n    return theErrorMsgKey;\n  },\n  // 当前图形的配置项[ *新增图形必填项 ]\n  chartConfigureList: [\n  //公共配置\n  {\n    key: \"category_general\",\n    title: \"category_chart_general\",\n    options: [\n    //地表类型\n    {\n      key: \"globe_surface_type\",\n      title: \"option_globe_surface_type\",\n      description: \"option_globe_surface_type_desc\",\n      type: \"select\",\n      selection: [\"option_surface_normal\", \"option_surface_high_texture\", \"option_surface_policy_map\"]\n    },\n    //行政地图配置===================================\n    //区块颜色\n    {\n      key: \"policy_item_color\",\n      title: \"option_policy_item_color\",\n      description: \"option_policy_item_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //留白颜色\n    {\n      key: \"policy_empty_color\",\n      title: \"option_policy_empty_color\",\n      description: \"option_policy_empty_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //高亮颜色\n    {\n      key: \"policy_emphasis_color\",\n      title: \"option_policy_emphasis_color\",\n      description: \"option_policy_emphasis_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //边界颜色\n    {\n      key: \"policy_boundary_color\",\n      title: \"option_policy_boundary_color\",\n      description: \"option_policy_boundary_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //边界宽度\n    {\n      key: \"policy_boundary_width\",\n      title: \"option_policy_boundary_width\",\n      description: \"option_policy_boundary_width_desc\",\n      type: \"input\",\n      min: 1,\n      max: 5,\n      defaultNumber: 1,\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //标签大小\n    {\n      key: \"policy_label_size\",\n      title: \"option_policy_label_size\",\n      description: \"option_policy_label_size_desc\",\n      type: \"input\",\n      min: 12,\n      max: 100,\n      defaultNumber: 50,\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //标签颜色\n    {\n      key: \"policy_label_color\",\n      title: \"option_policy_label_color\",\n      description: \"option_policy_label_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //开启地理网络线\n    {\n      key: \"policy_open_geography_grid\",\n      title: \"option_policy_open_geography_grid\",\n      description: \"option_policy_open_geography_grid_desc\",\n      type: \"checkbox\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //地理网格线颜色\n    {\n      key: \"policy_geography_grid_color\",\n      title: \"option_policy_geography_grid_color\",\n      description: \"option_policy_geography_grid_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map;policy_open_geography_grid\"\n    },\n    //开启环境光源\n    {\n      key: \"globe_open_environment_light\",\n      title: \"option_globe_open_environment_light\",\n      description: \"option_globe_open_environment_light_desc\",\n      type: \"checkbox\"\n    },\n    //开启星空背景\n    {\n      key: \"globe_open_galaxy_environment\",\n      title: \"option_globe_open_galaxy_environment\",\n      description: \"option_globe_open_galaxy_environment_desc\",\n      type: \"checkbox\"\n    },\n    //太空颜色\n    {\n      key: \"globe_environment_color\",\n      title: \"option_globe_environment_color\",\n      description: \"option_globe_environment_color_desc\",\n      type: \"color\",\n      require: \"!globe_open_galaxy_environment\"\n    },\n    //开启自动旋转\n    {\n      key: \"globe_open_auto_revolt\",\n      title: \"option_globe_open_auto_revolt\",\n      description: \"option_globe_open_auto_revolt_desc\",\n      type: \"checkbox\"\n    },\n    //自动旋转速度\n    {\n      key: \"globe_open_auto_revolt_speed\",\n      title: \"option_globe_open_auto_revolt_speed\",\n      description: \"option_globe_open_auto_revolt_speed_desc\",\n      type: \"input\",\n      min: 0,\n      max: 50,\n      withoutSlider: true,\n      defaultNumber: 10\n    }]\n  },\n  //柱状配置\n  {\n    key: \"category_column\",\n    title: \"category_chart_column\",\n    options: [\n    // 柱体的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"]\n    },\n    //自定义柱体颜色主题\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    //柱体形状\n    {\n      key: \"chart_item_shape\",\n      title: \"option_chart_item_shape\",\n      description: \"option_chart_item_shape_desc\",\n      type: \"select\",\n      selection: [\"option_item_shape_rect\", \"option_item_shape_cylinder\"]\n    },\n    //柱体宽度\n    {\n      key: \"chart_item_width\",\n      title: \"option_chart_item_width\",\n      description: \"option_chart_item_width_desc\",\n      type: \"input\",\n      min: 0.1,\n      max: 5,\n      defaultNumber: 1,\n      step: 0.1,\n      withoutSlider: true\n    },\n    //缩放高度\n    {\n      key: \"chart_item_height_scale\",\n      title: \"option_chart_item_height_scale\",\n      description: \"option_chart_item_height_scale_desc\",\n      type: \"input\",\n      min: 0.1,\n      max: 5,\n      defaultNumber: 1,\n      step: 0.1,\n      withoutSlider: true\n    },\n    //柱体透明度\n    {\n      key: \"chart_item_transparent\",\n      title: \"option_chart_item_transparent\",\n      description: \"option_chart_item_transparent_desc\",\n      type: \"input\",\n      min: 0,\n      max: 1,\n      defaultNumber: 1,\n      step: 0.1,\n      withoutSlider: true\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    //显示数据标签\n    {\n      key: \"label_text_visible\",\n      title: \"option_label_text_visible\",\n      description: \"option_label_text_visible_desc\",\n      type: 'checkbox'\n    },\n    //数据标签颜色\n    {\n      key: \"label_text_color\",\n      title: \"option_label_text_color\",\n      description: \"option_label_text_color_desc\",\n      type: 'color'\n    },\n    //输入数据标签\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      description: \"option_label_text_regex_3dGlobe_desc\",\n      type: \"textArea\"\n    }]\n  }],\n  /**\n   * 使用个人画图方法画图形 [*必填项]\n   * @params [Object]options  -   当前图形的配置\n   *              {\n   *                  chartUUID       -   当前图形的唯一标识\n   *                  currentChart    -   当前画图对象\n   *                  container       -   当前画图的DOM元素\n   *                  chartAxis       -   当前图形的Axis配置\n   *                  datas           -   当前画图数据\n   *                  isResize        -   是否是窗口变化引起的画图\n   *                  chartConfigures -   图形配置\n   *                  mousedownCallback   -   图形中元素鼠标事件的回调\n   *                  plugins         -   DataFocus提供的第三方画图库\n   *                      {\n   *                          d3  -   d3的v3版本\n   *                          echarts -   echarts的\n   *                      }\n   *              }\n   * **/\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    $(options.container).css(\"background\", \"\");\n    let globeDom = $(options.container)[0];\n    if (!options.isChangeConfigFlag) {\n      _world__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerEmptyGeo(options.plugins.echarts);\n      _world__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerMap(options.plugins.echarts);\n      if (options.currentChart.rateChart != null && options.currentChart.rateChart != \"\" && options.currentChart.rateChart != undefined) {\n        options.currentChart.rateChart.dispose(); //销毁\n      }\n\n      // 因为其他图形也有使用echart，实例id与当前的实例id有冲突或其他了，导致echarts无法出图\n      globeDom.removeAttribute('_echarts_instance_');\n    }\n    let outerType = \"column3d\";\n    let itemColor = \"#ff613e\"; // 柱体的颜色\n    let itemColorEnd = \"#ff613e\"; // 柱体的结束颜色\n    let itemWidth = 1;\n    let itemShape = 0;\n    let itemTransparent = 1; // 柱体透明度\n    let surfaceType = \"normal\";\n    let openEnvironmentLight = false;\n    let openGlobeAtmosphere = false;\n    let environmentColor = \"#000\";\n    let openGalaxyEnvironment = false;\n    let openAutoRevolt = false;\n    let mapItemColor = \"rgb(120,120,120)\";\n    let mapEmptyColor = \"#fff\";\n    let mapEmphasisColor = \"#fff\";\n    let mapBoundaryColor = \"#000\";\n    let mapLabelSize = \"50\";\n    let mapLabelColor = \"#000\";\n    let mapBoundaryWidth = 1;\n    let mapOpenGeographyGrid = false;\n    let mapGeographyGridColor = \"#aaa\";\n    let autoRevoltSpeed = 10;\n    let itemHeightScale = 1; // 柱体的缩放高度\n    let localColor = options.currentChart.defaultConf.localColors.slice(0); //  主题颜色列表\n    let defaultLabelText = \"%_VALUE\";\n    let labelColor;\n    let labelShowFlag = false;\n    if (options.chartConfigures) {\n      //公共配置\n      if (options.chartConfigures.globe_surface_type) {\n        switch (options.chartConfigures.globe_surface_type) {\n          case \"option_surface_normal\":\n            surfaceType = \"normal\";\n            break;\n          case \"option_surface_high_texture\":\n            surfaceType = \"highTexture\";\n            break;\n          case \"option_surface_policy_map\":\n            surfaceType = \"policyMap\";\n            break;\n        }\n      }\n      if (options.chartConfigures.globe_open_environment_light) {\n        openEnvironmentLight = options.chartConfigures.globe_open_environment_light;\n      }\n      if (options.chartConfigures.globe_environment_color) {\n        environmentColor = options.chartConfigures.globe_environment_color;\n      }\n      if (options.chartConfigures.globe_open_galaxy_environment) {\n        openGalaxyEnvironment = options.chartConfigures.globe_open_galaxy_environment;\n      }\n      if (options.chartConfigures.globe_open_atmosphere) {\n        openGlobeAtmosphere = options.chartConfigures.globe_open_atmosphere;\n      }\n      if (options.chartConfigures.globe_open_auto_revolt) {\n        openAutoRevolt = options.chartConfigures.globe_open_auto_revolt;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.globe_open_auto_revolt_speed)) {\n        autoRevoltSpeed = options.chartConfigures.globe_open_auto_revolt_speed;\n      }\n      //行政地图配置\n      if (options.chartConfigures.policy_item_color) {\n        mapItemColor = options.chartConfigures.policy_item_color;\n      }\n      if (options.chartConfigures.policy_empty_color) {\n        mapEmptyColor = options.chartConfigures.policy_empty_color;\n      }\n      if (options.chartConfigures.policy_emphasis_color) {\n        mapEmphasisColor = options.chartConfigures.policy_emphasis_color;\n      }\n      if (options.chartConfigures.policy_boundary_color) {\n        mapBoundaryColor = options.chartConfigures.policy_boundary_color;\n      }\n      if (options.chartConfigures.policy_boundary_width) {\n        mapBoundaryWidth = options.chartConfigures.policy_boundary_width;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.policy_label_size)) {\n        mapLabelSize = options.chartConfigures.policy_label_size;\n      }\n      if (options.chartConfigures.policy_label_color) {\n        mapLabelColor = options.chartConfigures.policy_label_color;\n      }\n      if (options.chartConfigures.policy_open_geography_grid) {\n        mapOpenGeographyGrid = options.chartConfigures.policy_open_geography_grid;\n      }\n      if (options.chartConfigures.policy_geography_grid_color) {\n        mapGeographyGridColor = options.chartConfigures.policy_geography_grid_color;\n      }\n      // //柱体配置\n      // if (options.chartConfigures.chart_item_color) {\n      //     itemColor = options.chartConfigures.chart_item_color;\n      //     // localColor[0] = itemColor;\n      // }\n      // if (options.chartConfigures.chart_item_color_end) {\n      //     itemColorEnd = options.chartConfigures.chart_item_color_end;\n      // }\n      if (options.chartConfigures.chart_item_shape) {\n        // 柱体形状\n        switch (options.chartConfigures.chart_item_shape) {\n          case \"option_item_shape_rect\":\n            itemShape = 0;\n            break;\n          case \"option_item_shape_cylinder\":\n            itemShape = 2;\n            break;\n          default:\n            itemShape = 0;\n            break;\n        }\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.chart_item_width)) {\n        itemWidth = options.chartConfigures.chart_item_width;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.chart_item_transparent)) {\n        itemTransparent = options.chartConfigures.chart_item_transparent;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.chart_item_height_scale)) {\n        itemHeightScale = options.chartConfigures.chart_item_height_scale;\n      }\n      if (options.chartConfigures.label_text_visible) {\n        // 是否展示文本标签\n        labelShowFlag = true;\n      }\n      if (options.chartConfigures.label_text_color) {\n        labelColor = options.chartConfigures.label_text_color;\n      }\n    }\n    const csList = [];\n    const idxLats = [],\n      idxLongs = [],\n      idxMeas = [],\n      idxLegend = [];\n    const legendMap = {};\n    const legendList = [];\n    let meaMax = Infinity * -1;\n    let meaMin = Infinity;\n    // 从X轴中收集经纬度\n    if (options.chartAxis && options.chartAxis.curXAxis) {\n      for (const axisDetail of options.chartAxis.curXAxis) {\n        if (typeof axisDetail !== 'function') {\n          if (axisDetail.geo_type === \"LONGITUDE\") {\n            idxLongs.push(axisDetail.idx);\n          } else if (axisDetail.geo_type === 'LATITUDE') {\n            idxLats.push(axisDetail.idx); // 纬度\n          }\n        }\n      }\n    }\n    // 从Y轴中收集数值列\n    if (options.chartAxis && options.chartAxis.curYAxis) {\n      for (const axisDetail of options.chartAxis.curYAxis) {\n        if (typeof axisDetail !== 'function') {\n          idxMeas.push(axisDetail.idx);\n        }\n      }\n    }\n    // 从图例中收集经纬度，不是经纬度，才视为图例\n    if (options.chartAxis && options.chartAxis.curLegend) {\n      // 当前的图例： curLegend不是数组，永远只有一项，指向当前选中的图例，不需要遍历。\n      const legendDetail = options.chartAxis.curLegend;\n      if (typeof legendDetail !== 'function') {\n        if (legendDetail.geo_type === \"LONGITUDE\") {\n          idxLongs.push(legendDetail.idx);\n        } else if (legendDetail.geo_type === \"LATITUDE\") {\n          idxLats.push(legendDetail.idx);\n        } else {\n          idxLegend.push(legendDetail.idx);\n        }\n      }\n    }\n\n    // 有图例的情况下，初始化图例列表和图例的 map\n    if (idxLegend.length > 0) {\n      const [legendIndex] = idxLegend; // 图例的索引编号\n\n      for (const row of options.datas.columns) {\n        const legendVal = row[legendIndex];\n        if (!legendMap[legendVal]) {\n          legendMap[legendVal] = {\n            indexInList: legendList.length,\n            color: localColor[legendList.length % localColor.length]\n          }; // 在map中保存某图例值在图例列表中的索引号\n          legendList.push({\n            name: legendVal,\n            icon: 'circle',\n            itemStyle: {\n              color: localColor[legendList.length % localColor.length]\n            }\n          });\n        }\n      }\n    }\n    let legendScatterList = [];\n    let colorLinear;\n    const d3 = options.plugins.d3;\n    if (idxLegend.length > 0) {\n      // 有图例，对每种图例下的数据进行分组计算\n      const [latitudeIndex] = idxLats;\n      const [longitudeIndex] = idxLongs;\n      const [legendIndex] = idxLegend; // 图例的索引编号\n      const [measureIndex] = idxMeas;\n\n      // 求得总体的最大值和最小值：TODO: 头里的统计信息里有\n      options.datas.columns.forEach(function (row) {\n        if (row[measureIndex] > meaMax) meaMax = row[measureIndex];\n        if (row[measureIndex] < meaMin) meaMin = row[measureIndex];\n      });\n      // 最大最小值的线性颜色比例尺。（注：比较对象是全局的最大值和最小值，所以只有一个图例种类下有透明度为 1 的颜色，只有一个图例种类下有透明度为 0.5 的颜色）\n      colorLinear = d3.scale.linear().domain([meaMin, meaMax]).range([0, 1]);\n      options.datas.columns.forEach(function (c, cidx) {\n        const curRowLegendVal = c[legendIndex];\n        const curLegendIndex = legendMap[curRowLegendVal].indexInList;\n        let curLegendColor = legendMap[curRowLegendVal].color;\n\n        // 如果当前图例尚未加入数组，则先初始化\n        if (!legendScatterList[curLegendIndex]) legendScatterList[curLegendIndex] = [];\n        let theLabel = options.currentChart.generateTextByMacros({\n          x: null,\n          y: c[measureIndex],\n          rowData: c,\n          latitude: c[latitudeIndex],\n          longitude: c[longitudeIndex],\n          yAxis: options.chartAxis.curYAxis[0],\n          total: 1,\n          legend: null,\n          index: 1,\n          defaultRegexText: defaultLabelText\n        }, \"label\");\n        legendScatterList[curLegendIndex].push({\n          value: [c[longitudeIndex], c[latitudeIndex], c[measureIndex], cidx],\n          labelText: theLabel,\n          itemStyle: {\n            color: _DataFocusMethod.hex2Rgba(_DataFocusMethod.rgba2Hex(curLegendColor, true), itemTransparent)\n          }\n        });\n      });\n    } else {\n      // 没有图例，对所有数据进行总体计算\n      options.datas.columns.forEach(function (c, index) {\n        const curRowVal = [c[idxLongs[0]], c[idxLats[0]], c[idxMeas[0]], index];\n        let theLegendColor = localColor[0];\n        let theLabel = options.currentChart.generateTextByMacros({\n          x: null,\n          y: c[idxMeas[0]],\n          rowData: c,\n          latitude: c[idxLats[0]],\n          longitude: c[idxLongs[0]],\n          yAxis: options.chartAxis.curYAxis[0],\n          total: 1,\n          legend: null,\n          index: 1,\n          defaultRegexText: defaultLabelText\n        }, \"label\");\n        csList.push({\n          value: curRowVal,\n          labelText: theLabel,\n          itemStyle: {\n            color: _DataFocusMethod.hex2Rgba(_DataFocusMethod.rgba2Hex(theLegendColor, true), itemTransparent)\n          }\n        });\n\n        // 顺便计算总体的最大最小值供后面使用\n        if (c[idxMeas[0]] > meaMax) meaMax = c[idxMeas[0]];\n        if (c[idxMeas[0]] < meaMin) meaMin = c[idxMeas[0]];\n      });\n    }\n    if (mapEmptyColor) {\n      $(options.container).css(\"background\", \"linear-gradient(to bottom, \" + mapEmptyColor + \" 0%,\" + mapEmptyColor + \" 95%,rgba(255,255,255,0) 96%,rgba(255,255,255,0) 100%)\");\n    }\n    setTimeout(function () {\n      let echarts = options.plugins.echarts;\n      let myChart;\n      if (!options.isChangeConfigFlag) {\n        myChart = echarts.init(globeDom);\n        options.currentChart.rateChart = myChart;\n      } else {\n        myChart = options.currentChart.rateChart;\n      }\n      let canvasGrid = document.createElement('canvas');\n      //地理网格线组件\n      let gridChart = echarts.init(canvasGrid, null, {\n        width: 4096,\n        height: 2048\n      });\n      let gridLines = [];\n      for (let i = 1; i <= 24; i++) {\n        if (i === 24) {\n          gridLines.push([[parseInt(-181 + i * 15), 90], [parseInt(-181 + i * 15), -90]]);\n        } else {\n          gridLines.push([[parseInt(-180 + i * 15), 90], [parseInt(-180 + i * 15), -90]]);\n        }\n      }\n      for (let i = 1; i < 12; i++) {\n        gridLines.push([[-180, -90 + i * 15], [180, -90 + i * 15]]);\n      }\n      gridChart.setOption({\n        geo: {\n          name: \"grid0\",\n          show: false,\n          type: 'map',\n          map: 'emptyGeo',\n          // 绘制完整尺寸的 echarts 实例\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          silent: true,\n          boundingCoords: [[-180, 90], [180, -90]]\n        },\n        series: [{\n          type: 'lines',\n          coordinateSystem: 'geo',\n          data: gridLines,\n          lineStyle: {\n            color: mapGeographyGridColor,\n            opacity: 0.8,\n            width: 2\n          }\n        }]\n      });\n      let canvas = document.createElement('canvas');\n      //行政地图组件\n      let mapChart = echarts.init(canvas, null, {\n        width: 4096,\n        height: 2048\n      });\n      mapChart.setOption({\n        geo: {\n          name: \"map0\",\n          show: true,\n          type: 'map',\n          map: 'world',\n          // 绘制完整尺寸的 echarts 实例\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          silent: false,\n          boundingCoords: [[-180, 90], [180, -90]],\n          itemStyle: {\n            normal: {\n              areaColor: mapItemColor,\n              borderColor: mapBoundaryColor,\n              borderWidth: mapBoundaryWidth\n            }\n          },\n          label: {\n            color: mapLabelColor,\n            fontSize: mapLabelSize\n          },\n          emphasis: {\n            itemStyle: {\n              color: mapEmphasisColor\n            },\n            label: {\n              color: mapLabelColor,\n              fontSize: mapLabelSize\n            }\n          }\n        }\n      });\n      let chartSeries = [];\n      if (outerType === \"column3d\") {\n        if (idxLegend.length > 0) {\n          // 有图例\n          legendList.forEach(function (lg, index) {\n            chartSeries.push({\n              name: lg.name,\n              type: 'bar3D',\n              coordinateSystem: 'globe',\n              blendMode: \"color\",\n              shading: 'color',\n              bevelSize: 1,\n              bevelSmoothness: itemShape,\n              data: legendScatterList[index],\n              barSize: itemWidth,\n              minHeight: 0.2,\n              silent: false,\n              label: {\n                show: labelShowFlag,\n                textStyle: {\n                  borderWidth: 0,\n                  color: labelColor || legendList[index] && legendList[index].itemStyle && legendList[index].itemStyle.color\n                },\n                formatter: params => {\n                  return params.data && params.data.labelText;\n                }\n              }\n            });\n          });\n        } else {\n          // 无图例\n          chartSeries.push({\n            name: \"bar03D\",\n            type: 'bar3D',\n            coordinateSystem: 'globe',\n            blendMode: \"color\",\n            shading: 'color',\n            bevelSize: 1,\n            bevelSmoothness: itemShape,\n            data: csList,\n            barSize: itemWidth,\n            minHeight: 0.2,\n            silent: false,\n            label: {\n              show: labelShowFlag,\n              // 数据标签的颜色得和柱体颜色的透明度分开\n              textStyle: {\n                borderWidth: 0,\n                color: labelColor || localColor[0]\n              },\n              formatter: params => {\n                return params.data && params.data.labelText;\n              }\n            }\n          });\n        }\n      }\n\n      // controller 的配置\n      let layers;\n      let baseTexture;\n      let heightTexture;\n      let displacementScale;\n      let environmentTexture = environmentColor;\n      let shading = \"color\";\n      if (openEnvironmentLight) {\n        shading = 'lambert';\n      }\n      if (surfaceType === \"policyMap\" && mapOpenGeographyGrid) {\n        layers = [{\n          type: \"blend\",\n          texture: mapChart,\n          intensity: 1\n        }];\n        baseTexture = gridChart;\n        heightTexture = \"\";\n        displacementScale = 0;\n      } else {\n        if (surfaceType === \"normal\") {\n          baseTexture = __webpack_require__(/*! ../../images/globe-assets/earth.jpg */ \"../src-v5/assets/images/globe-assets/earth.jpg\");\n          heightTexture = \"\";\n          displacementScale = 0;\n        } else if (surfaceType === \"highTexture\") {\n          baseTexture = __webpack_require__(/*! ../../images/globe-assets/world.topo.bathy.200401.jpg */ \"../src-v5/assets/images/globe-assets/world.topo.bathy.200401.jpg\");\n          heightTexture = __webpack_require__(/*! ../../images/globe-assets/world.topo.bathy.200401.jpg */ \"../src-v5/assets/images/globe-assets/world.topo.bathy.200401.jpg\");\n          displacementScale = 0.04;\n          shading = 'realistic';\n        } else if (surfaceType === \"policyMap\") {\n          baseTexture = mapChart;\n          heightTexture = \"\";\n          displacementScale = 0;\n        } else {\n          baseTexture = __webpack_require__(/*! ../../images/globe-assets/earth.jpg */ \"../src-v5/assets/images/globe-assets/earth.jpg\");\n        }\n      }\n      if (openGalaxyEnvironment) {\n        environmentTexture = __webpack_require__(/*! ../../images/globe-assets/starfield.jpg */ \"../src-v5/assets/images/globe-assets/starfield.jpg\");\n      }\n      let option = {\n        legend: idxLegend.length > 0 ? {\n          left: 'left',\n          data: legendList,\n          orient: 'vertical',\n          textStyle: {\n            color: '#fff'\n          }\n        } : null,\n        globe: {\n          name: \"globe0\",\n          show: true,\n          baseTexture: baseTexture,\n          heightTexture: heightTexture,\n          displacementScale: displacementScale,\n          shading: shading,\n          atmosphere: {\n            show: openGlobeAtmosphere\n          },\n          environment: environmentTexture,\n          viewControl: {\n            projection: \"orthographic\",\n            rotateSensitivity: 1,\n            //鼠标旋转灵敏度\n            zoomSensitivity: 3.2,\n            //鼠标缩放灵敏度\n            autoRotate: true,\n            autoRotateDirection: 'ccw',\n            autoRotateSpeed: 0,\n            autoRotateAfterStill: 0.5,\n            //鼠标停止后多久恢复旋转(为0时暂停后不恢复旋转)\n            //alpha:160,//视角绕 x 轴，即上下旋转的角度\n            //beta:-20,//视角绕 y 轴，即左右旋转的角度。\n            targetCoord: [116.46, 39.92],\n            //定位到哪里\n            minOrthographicSize: 200,\n            maxOrthographicSize: 600,\n            orthographicSize: 300\n          },\n          globeRadius: 100,\n          globeOuterRadius: 100 + 50 * itemHeightScale,\n          layers: layers\n        },\n        series: chartSeries\n      };\n      myChart.clear();\n      myChart.setOption(option);\n      option = {\n        globe: {\n          name: \"globe0\",\n          viewControl: {\n            autoRotate: openAutoRevolt,\n            autoRotateSpeed: autoRevoltSpeed\n          }\n        }\n      };\n      setTimeout(function () {\n        myChart.setOption(option);\n      }, 50);\n    }, 20);\n  },\n  // 为模板问答生成样例数据\n  getTemplateData: function () {\n    let theTemplateData = {\n      headers: [{\n        idx: 0,\n        col_id: '10001',\n        col_uuid: '10001',\n        col_name: '样例经度',\n        data_type: 'ATTRIBUTE',\n        operator: '',\n        geo_type: 'LONGITUDE',\n        col_type: 'double'\n      }, {\n        idx: 1,\n        col_id: '10002',\n        col_uuid: '10002',\n        col_name: '样例维度',\n        data_type: 'ATTRIBUTE',\n        operator: '',\n        geo_type: 'LATITUDE',\n        col_type: 'double'\n      }, {\n        idx: 2,\n        col_id: '10003',\n        col_uuid: '10003',\n        col_name: '样例数值',\n        data_type: 'MEASURE',\n        operator: '',\n        geo_type: '',\n        col_type: 'double'\n      }],\n      columns: [[100.58, 25.60, 11], [101.77, 36.67, 57], [108.80, 23.22, 135], [109.57, 19.52, 847], [110.33, 31.05, 952], [113.22, 40.78, 475]],\n      default_chart: {\n        type: 'globeThreeScatter',\n        xAxis: [0, 1],\n        yAxis: [2]\n      },\n      charts: [{\n        type: 'globeThreeScatter',\n        xAxis: [0, 1],\n        yAxis: [2]\n      }]\n    };\n    return theTemplateData;\n  },\n  // 当前图形定制的中英文[ 配置XY轴，图表配置 ] [ *新增图形必填项 ]\n  i18nObj: {\n    chinese: {\n      \"chart-name-title\": \"3D地球柱状图\",\n      \"chart-description-title\": \"有且仅有一组经纬度数据，且至少一个数值列\",\n      \"chart-x-axis-title\": \"经纬度\",\n      \"chart-y-axis-title\": \"数值\",\n      \"chart-multi-y-axis-title\": \"右侧副Y轴\",\n      \"chart-legend-title\": \"图例\",\n      \"chart-axis-config-null-error\": \"系统没有传入当前用户的Axis配置信息\",\n      \"chart-xy-axis-null\": \"X轴或Y轴不能为空\",\n      \"chart-left-y-axis-null\": \"左侧主Y轴不允许为空\",\n      \"chart-legend-too-much\": \"图例只允许一个\",\n      \"chart-y-axis-too-much-with-legend\": \"图例存在时，Y轴只允许一个\",\n      \"chart-x-legend-axis-not-equal\": \"X轴不允许与图例相同\",\n      \"chart-need-all-attribute-columns\": \"当前图形需要将所有的属性列利用起来\",\n      \"category_chart_general\": \"地球容器\",\n      \"category_chart_policy_map\": \"地图配置\",\n      \"category_chart_column\": \"柱体配置\",\n      \"option_globe_surface_type\": \"地表类型\",\n      \"option_globe_surface_type_desc\": \"设置地表类型\",\n      \"option_surface_normal\": \"地球\",\n      \"option_surface_high_texture\": \"高材质地球\",\n      \"option_surface_policy_map\": \"行政地图\",\n      \"option_globe_open_environment_light\": \"开启环境光\",\n      \"option_globe_open_environment_light_desc\": \"开启环境光源\",\n      \"option_globe_environment_color\": \"太空颜色\",\n      \"option_globe_environment_color_desc\": \"设置太空颜色\",\n      \"option_globe_open_galaxy_environment\": \"开启星空背景\",\n      \"option_globe_open_galaxy_environment_desc\": \"将太空背景设置为星空\",\n      \"option_globe_open_atmosphere\": \"开启大气层\",\n      \"option_globe_open_atmosphere_desc\": \"开启大气层特效\",\n      \"option_globe_open_auto_revolt\": \"开启自动旋转\",\n      \"option_globe_open_auto_revolt_desc\": \"开启自动旋转\",\n      \"option_globe_open_auto_revolt_speed\": \"旋转速度\",\n      \"option_globe_open_auto_revolt_speed_desc\": \"设置旋转速度\",\n      \"option_policy_item_color\": \"板块颜色\",\n      \"option_policy_item_color_desc\": \"地球表面使用行政地图的情况下，设置板块颜色\",\n      \"option_policy_empty_color\": \"留白颜色\",\n      \"option_policy_empty_color_desc\": \"地球表面使用行政地图的情况下，设置空白处颜色\",\n      \"option_policy_emphasis_color\": \"高亮颜色\",\n      \"option_policy_emphasis_color_desc\": \"地球表面使用行政地图的情况下，设置高亮颜色\",\n      \"option_policy_boundary_color\": \"边界颜色\",\n      \"option_policy_boundary_color_desc\": \"地球表面使用行政地图的情况下 ，设置板块边界颜色\",\n      \"option_policy_boundary_width\": \"边界宽度\",\n      \"option_policy_boundary_width_desc\": \"地球表面使用行政地图的情况下 ，设置板块边界宽度\",\n      \"option_policy_label_size\": \"标签大小\",\n      \"option_policy_label_size_desc\": \"地球表面使用行政地图的情况下，设置地球上地理标签文字大小\",\n      \"option_policy_label_color\": \"标签颜色\",\n      \"option_policy_label_color_desc\": \"地球表面使用行政地图的情况下，设置地球上标签文字颜色\",\n      \"option_policy_open_geography_grid\": \"开启地理网格线\",\n      \"option_policy_open_geography_grid_desc\": \"地球表面使用行政地图的情况下 ， 开启地理网格线\",\n      \"option_policy_geography_grid_color\": \"地理网格线颜色\",\n      \"option_policy_geography_grid_color_desc\": \"地球表面使用行政地图的情况下 ， 设置地理网格线颜色\",\n      \"option_chart_color_theme\": \"柱体主题颜色\",\n      \"option_chart_color_theme_desc\": \"设置柱体主题颜色\",\n      \"option_chart_custom_theme\": \"自定义柱体主题\",\n      \"option_chart_custom_theme_desc\": \"自定义柱体主题\",\n      // \"option_chart_item_color\": \"柱体起始颜色\",\n      // \"option_chart_item_color_desc\": \"设置柱体起始颜色\",\n      // \"option_chart_item_color_end\": \"柱体终止颜色\",\n      // \"option_chart_item_color_end_desc\": \"设置柱体终止颜色\",\n      \"option_chart_item_shape\": \"柱体形状\",\n      \"option_chart_item_shape_desc\": \"设置柱体形状\",\n      \"option_item_shape_rect\": \"长方体\",\n      \"option_item_shape_cylinder\": \"圆柱体\",\n      \"option_chart_item_width\": \"柱体宽度\",\n      \"option_chart_item_width_desc\": \"设置柱体宽度\",\n      \"option_chart_item_height_scale\": \"高度缩放\",\n      \"option_chart_item_height_scale_desc\": \"设置高度缩放比例\",\n      \"option_chart_item_transparent\": \"柱体透明度\",\n      \"option_chart_item_transparent_desc\": \"设置柱体透明度\",\n      \"option_label_text_regex_3dGlobe_desc\": \"用于数据标签的文本。<br/>有以下替换宏可用：<br/>%_LATITUDE  - 可显示经度 <br/>%_LONGITUDE  - 可显示维度  <br/>%_VALUE  - 可显示原本的数值 <br /> %_COLUMN_N - 第N列的数值 \"\n    },\n    english: {\n      \"chart-name-title\": \"3D Globe Column\",\n      \"chart-description-title\": \"one group of latitude and longitude，and at least one measure\",\n      \"chart-x-axis-title\": \"Lon & Lat\",\n      \"chart-y-axis-title\": \"Y Axis\",\n      \"chart-multi-y-axis-title\": \"right sub Y Axis\",\n      \"chart-legend-title\": \"legend\",\n      \"chart-axis-config-null-error\": \"There is no information of current Axis\",\n      \"chart-xy-axis-null\": \"X Axis or Y Axis can not be empty\",\n      \"chart-left-y-axis-null\": \"Left sub Y Axis can not be empty\",\n      \"chart-legend-too-much\": \"There must be only one legend\",\n      \"chart-y-axis-too-much-with-legend\": \"if legend exists，only one Y Axis can exist\",\n      \"chart-x-legend-axis-not-equal\": \"X Axis can not be same with legend\",\n      \"chart-need-all-attribute-columns\": \"Current chart need all attribute columns\",\n      \"category_chart_general\": \"Globe Container\",\n      \"category_chart_policy_map\": \"Map Config\",\n      \"category_chart_column\": \"Column Config\",\n      \"option_globe_surface_type\": \"topography\",\n      \"option_globe_surface_type_desc\": \"Setting topography\",\n      \"option_surface_normal\": \"Globe\",\n      \"option_surface_high_texture\": \"High texture globe\",\n      \"option_surface_policy_map\": \"Administrative Map\",\n      \"option_globe_open_environment_light\": \"Open environment light\",\n      \"option_globe_open_environment_light_desc\": \"Open environment light\",\n      \"option_globe_environment_color\": \"Color of space\",\n      \"option_globe_environment_color_desc\": \"Setting the color of space\",\n      \"option_globe_open_galaxy_environment\": \"Open the starry sky\",\n      \"option_globe_open_galaxy_environment_desc\": \"Setting the space as picture of starry sky\",\n      \"option_globe_open_atmosphere\": \"Open atmosphere\",\n      \"option_globe_open_atmosphere_desc\": \"Open atmosphere texture\",\n      \"option_globe_open_auto_revolt\": \"Open auto revolt\",\n      \"option_globe_open_auto_revolt_desc\": \"Open auto revolt\",\n      \"option_globe_open_auto_revolt_speed\": \"Revolt speed\",\n      \"option_globe_open_auto_revolt_speed_desc\": \"Setting revolt speed\",\n      \"option_policy_item_color\": \"Plate color\",\n      \"option_policy_item_color_desc\": \"Setting plate color\",\n      \"option_policy_empty_color\": \"Background color\",\n      \"option_policy_empty_color_desc\": \"Setting background color\",\n      \"option_policy_emphasis_color\": \"Highlight color\",\n      \"option_policy_emphasis_color_desc\": \"Setting highlight color\",\n      \"option_policy_boundary_color\": \"Boundary color\",\n      \"option_policy_boundary_color_desc\": \"Setting the color of plate boundary\",\n      \"option_policy_boundary_width\": \"Boundary width\",\n      \"option_policy_boundary_width_desc\": \"Setting the width of plate boundary\",\n      \"option_policy_label_size\": \"Label size\",\n      \"option_policy_label_size_desc\": \"Setting label font size\",\n      \"option_policy_label_color\": \"Label color\",\n      \"option_policy_label_color_desc\": \"Setting label font color\",\n      \"option_policy_open_geography_grid\": \"Open geography grid\",\n      \"option_policy_open_geography_grid_desc\": \"Open geography grid\",\n      \"option_policy_geography_grid_color\": \"Geography grid color\",\n      \"option_policy_geography_grid_color_desc\": \"Setting geography grid color\",\n      \"option_chart_color_theme\": \"Column color theme\",\n      \"option_chart_color_theme_desc\": \"Setting column color theme\",\n      \"option_chart_custom_theme\": \"Custom color theme\",\n      \"option_chart_custom_theme_desc\": \"custom color theme\",\n      // \"option_chart_item_color\": \"Column start color\",\n      // \"option_chart_item_color_desc\": \"Setting column start color\",\n      // \"option_chart_item_color_end\": \"Column end color\",\n      // \"option_chart_item_color_end_desc\": \"Setting column end color\",\n      \"option_chart_item_shape\": \"Column shape\",\n      \"option_chart_item_shape_desc\": \"Setting column shape\",\n      \"option_item_shape_rect\": \"cube\",\n      \"option_item_shape_cylinder\": \"cylinder\",\n      \"option_chart_item_width\": \"Column width\",\n      \"option_chart_item_width_desc\": \"Setting column width\",\n      \"option_chart_item_height_scale\": \"Height scale\",\n      \"option_chart_item_height_scale_desc\": \"Setting height scale\",\n      \"option_chart_item_transparent\": \"Column transparent\",\n      \"option_chart_item_transparent_desc\": \"Setting column transparent\",\n      \"option_label_text_regex_3dGlobe_desc\": \"Text for data labels .<br/>The following substitution macros are available：<br/> %_LATITUDE  - Display the latitude <br/>%_LONGITUDE  - Display the longitude  <br/> %_VALUE  - Display the original value <br /> %_COLUMN_N - value of column N  \"\n    }\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/3dGlobe.js?");

/***/ })

}]);
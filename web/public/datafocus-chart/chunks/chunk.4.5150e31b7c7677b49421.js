(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[4],{

/***/ "../src-v5/assets/js/charts.components/SelectChartComponent.js":
/*!*********************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/SelectChartComponent.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/d3v7Export */ \"../src-v5/assets/js/d3v7Export.js\");\n// 区域选择的组件\n\n\nlet SelectChartComponent = {\n  /**\r\n   * 在图形中的SVG上X轴水平显示时，水平方向区域选择\r\n   * @param options\r\n   *          {\r\n   *              svgContainer      -   svg元素的父div容器， 主要在该容器下增加\r\n   *              translateLeft\r\n   *              translateTop\r\n   *\r\n   *              height            -   框选元素的高度\r\n   *              width             -   框选区域的宽度[ 最大宽度 ]\r\n   *              rangeBand         -   X轴属性刻度宽， 主要用于计算X轴刻度的起始点\r\n   *              prevStart         -   未选择前的X刻度的起点索引， 主要用于返回\r\n   *              prevSteps         -   未选择前的每页的刻度数 ， 主要用于返回\r\n   *              selectFunc        -   选中后的响应事件\r\n   *          }\r\n   * */\n  selectHorizontalSvgColumnChart: function (options) {\n    options = options || {};\n    if (!options.svgContainer) return false;\n\n    // 在PC端区域选择， 移动端暂时不支持\n    let svgParent = $(options.svgContainer),\n      svgDom = svgParent.find(\"svg.svg-dom\");\n    if (!svgDom || !svgDom[0]) return false;\n    let translateTop = parseFloat(options.translateTop) || 0,\n      translateLeft = parseFloat(options.translateLeft) || 0,\n      selectHeight = parseFloat(options.height) || 50,\n      selectWidth = parseFloat(options.width) || 1,\n      transformScale = parseFloat(options.transformScale) || 1;\n    translateLeft *= transformScale;\n    selectWidth *= transformScale;\n    _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(svgParent[0]).on('mousedown', null).on(\"mousedown\", function (d) {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event,\n        coordinate = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mouse(this);\n      _DataFocusMethod.stopEventDefault(event);\n      // 右击mousedown不触发\n      if (event.button === 2) return;\n      // 当前点击点在svg中的位置\n      let startCoordinate = {\n        pageX: coordinate[0],\n        pageY: coordinate[1]\n      };\n      let theSelectAreaDom = svgParent.find(\"div.svg-select-area\")[0];\n      if (!theSelectAreaDom) {\n        theSelectAreaDom = document.createElement(\"div\");\n        theSelectAreaDom.className = \"svg-select-area\";\n        theSelectAreaDom.style.position = 'absolute';\n        theSelectAreaDom.style.top = translateTop + 'px';\n        theSelectAreaDom.style.left = translateLeft + 'px';\n        theSelectAreaDom.style.width = '0';\n        theSelectAreaDom.style.height = selectHeight + 'px';\n        svgParent.append(theSelectAreaDom);\n      }\n      let theStartClientX = event.clientX;\n      let theSelectLeft = 0,\n        theSelectWidth = 0,\n        hasMoveFlag = false;\n      document.documentElement.onmousemove = function (event) {\n        let currentClientX = event.clientX;\n        if (currentClientX > theStartClientX) {\n          // 往右拖拽拉宽\n          theSelectLeft = startCoordinate.pageX;\n          theSelectWidth = currentClientX - theStartClientX;\n          theSelectLeft = theSelectLeft / transformScale;\n          theSelectWidth = Math.min(theSelectWidth, selectWidth - (startCoordinate.pageX - translateLeft));\n          theSelectWidth = theSelectWidth / transformScale;\n          theSelectAreaDom.style.left = theSelectLeft + 'px';\n          theSelectAreaDom.style.width = theSelectWidth + 'px';\n        } else {\n          // 往左拖拽拉宽\n          theSelectLeft = startCoordinate.pageX + currentClientX - theStartClientX;\n          theSelectWidth = theStartClientX - currentClientX;\n          if (theSelectLeft + theSelectWidth <= 0) {\n            theSelectWidth = 0;\n          }\n          if (theSelectLeft < translateLeft) {\n            theSelectLeft = translateLeft;\n          }\n          theSelectWidth = Math.min(startCoordinate.pageX - translateLeft, theSelectWidth);\n          theSelectLeft = theSelectLeft / transformScale;\n          theSelectWidth = theSelectWidth / transformScale;\n          theSelectAreaDom.style.left = theSelectLeft + 'px';\n          theSelectAreaDom.style.width = theSelectWidth + 'px';\n        }\n        theSelectAreaDom.style.border = \"1px dotted #eee\";\n        theSelectAreaDom.style.background = \"rgba(239,239,239,0.5)\";\n        hasMoveFlag = true;\n      };\n      document.documentElement.onmouseup = function (event) {\n        svgParent.find(\"div.svg-select-area\").remove();\n        if (hasMoveFlag && theSelectWidth > 10) {\n          // 根据选择区域的位置起点终点，计算X轴刻度的start与end\n          let rangeBand = parseFloat(options.rangeBand) / transformScale;\n          const startPos = Math.max(theSelectLeft - translateLeft, 0) / transformScale;\n          const endPos = startPos + theSelectWidth / transformScale;\n          let theXAreaStartIndex = Math.floor(startPos / rangeBand);\n          let theXAreaEndIndex = Math.ceil(endPos / rangeBand);\n          typeof options.selectFunc === 'function' && options.selectFunc({\n            type: 'select',\n            start: options.prevStart + theXAreaStartIndex,\n            end: options.prevStart + theXAreaEndIndex,\n            steps: theXAreaEndIndex - theXAreaStartIndex,\n            animateFlag: false\n          });\n          const theReturnDom = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(svgParent[0]).append(\"div\").attr(\"class\", \"select-return-dom\").style('position', 'absolute').style('left', '0').style('top', '0').style(\"cursor\", \"pointer\").style(\"transform\", `translate(${translateLeft}px, ${translateTop / 2}px)`).on(\"mousedown\", function () {\n            _DataFocusMethod.stopEventDefault(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event);\n\n            // 返回上一步\n            typeof options.selectFunc === 'function' && options.selectFunc({\n              type: 'select',\n              start: options.prevStart,\n              steps: options.prevSteps,\n              animateFlag: false\n            });\n\n            // 移除最顶层的返回上一步按钮\n            theReturnDom.remove();\n\n            // 点击返回按钮后显示最后一个返回元素\n            _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(svgParent[0]).selectAll('.select-return-dom').style('display', (d, i, nodeList) => {\n              return i === nodeList.length - 1 ? 'unset' : 'none';\n            });\n          });\n\n          // 新增返回按钮后只显示最后一个返回元素\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(svgParent[0]).selectAll('.select-return-dom').style('display', (d, i, nodeList) => {\n            return i === nodeList.length - 1 ? 'unset' : 'none';\n          });\n          const returnSvg = theReturnDom.append('svg').attr('width', '28').attr('height', '28');\n          const returnSvgGroup = returnSvg.append('g');\n          returnSvgGroup.append(\"rect\").attr(\"width\", \"28\").attr(\"height\", \"28\").style(\"fill\", \"rgba(134,134,134,.4)\").attr(\"rx\", \"5\").on(\"mouseover\", function () {\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).style(\"fill\", \"rgba(134,134,134,0.6)\");\n          }).on(\"mouseout\", function () {\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).style(\"fill\", \"rgba(134,134,134,0.4)\");\n          });\n          returnSvgGroup.append(\"path\").style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1.5\").style(\"fill\", \"#fff\").style(\"pointer-events\", \"none\").attr(\"d\", \"M 0 0 L 6 4 6 -4 z\").attr(\"transform\", \"translate(10, 14)\");\n        }\n        document.documentElement.onmousemove = undefined;\n        document.documentElement.onmouseup = undefined;\n      };\n    });\n  },\n  /**\r\n   * 在图形中的SVG上X轴水平显示时，竖直方向上的区域选择\r\n   * @param options\r\n   *          {\r\n   *              svgContainer      -   svg元素的父div容器， 主要在该容器下增加\r\n   *              translateLeft\r\n   *              translateTop\r\n   *\r\n   *              height            -   框选元素的高度\r\n   *              width             -   框选区域的宽度[ 最大宽度 ]\r\n   *              rangeBand         -   X轴属性刻度宽， 主要用于计算X轴刻度的起始点\r\n   *              prevStart         -   未选择前的X刻度的起点索引， 主要用于返回\r\n   *              prevSteps         -   未选择前的每页的刻度数 ， 主要用于返回\r\n   *              selectFunc        -   选中后的响应事件\r\n   *          }\r\n   * */\n  selectVerticalSvgColumnChart: function (options) {\n    options = options || {};\n    if (!options.svgContainer) return false;\n\n    // 在PC端区域选择， 移动端暂时不支持\n    let svgParent = $(options.svgContainer),\n      svgDom = svgParent.find(\"svg.svg-dom\");\n    if (!svgDom || !svgDom[0]) return false;\n    let translateTop = parseFloat(options.translateTop) || 0,\n      translateLeft = parseFloat(options.translateLeft) || 0,\n      selectHeight = parseFloat(options.height) || 50,\n      selectWidth = parseFloat(options.width) || 1,\n      transformScale = parseFloat(options.transformScale) || 1;\n    translateTop *= transformScale;\n    selectHeight *= transformScale;\n    _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(svgParent[0]).on(\"mousedown\", function (d) {\n      let event = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event,\n        coordinate = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mouse(this);\n      _DataFocusMethod.stopEventDefault(event);\n      // 右击mousedown不触发\n      if (event.button === 2) return;\n      // 当前点击点在svg中的位置\n      let startCoordinate = {\n        pageX: coordinate[0],\n        pageY: coordinate[1]\n      };\n      let theSelectAreaDom = svgParent.find(\"div.svg-select-area\")[0];\n      if (!theSelectAreaDom) {\n        // 创建选择区域\n        theSelectAreaDom = document.createElement(\"div\");\n        theSelectAreaDom.className = \"svg-select-area\";\n        theSelectAreaDom.style.position = 'absolute';\n        theSelectAreaDom.style.top = translateTop + 'px';\n        theSelectAreaDom.style.left = translateLeft + 'px';\n        theSelectAreaDom.style.width = selectWidth + 'px';\n        theSelectAreaDom.style.height = '0';\n        svgParent.append(theSelectAreaDom);\n      }\n      let theStartClientX = event.clientX;\n      const theStartClientY = event.clientY;\n      let theSelectTop = 0,\n        theSelectHeight = 0,\n        hasMoveFlag = false;\n      document.documentElement.onmousemove = function (event) {\n        const currentClientY = event.clientY;\n        if (currentClientY > theStartClientY) {\n          // 向下拖动\n          theSelectTop = startCoordinate.pageY;\n          theSelectTop /= transformScale;\n          theSelectHeight = currentClientY - theStartClientY;\n          theSelectHeight = Math.min(theSelectHeight, selectHeight - (startCoordinate.pageY - translateTop));\n          theSelectHeight /= transformScale;\n          theSelectAreaDom.style.top = theSelectTop + 'px';\n          theSelectAreaDom.style.height = theSelectHeight + 'px';\n        } else {\n          // 向上拖动\n          theSelectHeight = Math.abs(currentClientY - theStartClientY);\n          theSelectTop = startCoordinate.pageY - theSelectHeight;\n          if (theSelectTop < translateTop) {\n            // 最上不能超出顶部\n            theSelectTop = translateTop;\n            theSelectHeight = startCoordinate.pageY - theSelectTop;\n          }\n          theSelectTop /= transformScale;\n          theSelectHeight /= transformScale;\n          theSelectAreaDom.style.top = theSelectTop + 'px';\n          theSelectAreaDom.style.height = theSelectHeight + 'px';\n        }\n        theSelectAreaDom.style.border = \"1px dotted #eee\";\n        theSelectAreaDom.style.background = \"rgba(239,239,239,0.5)\";\n        hasMoveFlag = true;\n      };\n      document.documentElement.onmouseup = function (event) {\n        svgParent.find(\"div.svg-select-area\").remove();\n        if (hasMoveFlag && theSelectTop > 10) {\n          // 根据选择区域的位置起点终点，计算X轴刻度的start与end\n          let rangeBand = parseFloat(options.rangeBand);\n          let theXAreaStartIndex = Math.floor(Math.max(theSelectTop - translateTop, 0) / rangeBand);\n          let theXAreaEndIndex = Math.ceil((Math.max(theSelectTop - translateTop, 0) + theSelectHeight) / rangeBand);\n          typeof options.selectFunc === 'function' && options.selectFunc({\n            type: 'select',\n            start: options.prevStart + theXAreaStartIndex,\n            end: options.prevStart + theXAreaEndIndex,\n            steps: theXAreaEndIndex - theXAreaStartIndex,\n            animateFlag: false\n          });\n          const theReturnDom = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(svgParent[0]).append(\"div\").attr(\"class\", \"select-return-dom\").style('position', 'absolute').style('left', '0').style('top', '0').style(\"cursor\", \"pointer\").style(\"transform\", `translate(${translateLeft}px, ${translateTop / 2}px)`).on(\"mousedown\", function () {\n            _DataFocusMethod.stopEventDefault(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event);\n            typeof options.selectFunc === 'function' && options.selectFunc({\n              type: 'select',\n              start: options.prevStart,\n              steps: options.prevSteps,\n              animateFlag: false\n            });\n\n            // 移除返回上一步按钮\n            theReturnDom.remove();\n            _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(svgParent[0]).selectAll('.select-return-dom').style('display', (d, i, nodeList) => {\n              return i === nodeList.length - 1 ? 'unset' : 'none';\n            });\n          });\n          const returnSvg = theReturnDom.append('svg').attr('width', '28').attr('height', '28');\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(svgParent[0]).selectAll('.select-return-dom').style('display', (d, i, nodeList) => {\n            return i === nodeList.length - 1 ? 'unset' : 'none';\n          });\n          const returnSvgGroup = returnSvg.append('g');\n          returnSvgGroup.append(\"rect\").attr(\"width\", \"28\").attr(\"height\", \"28\").style(\"fill\", \"rgba(134,134,134,.4)\").attr(\"rx\", \"5\").on(\"mouseover\", function () {\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).style(\"fill\", \"rgba(134,134,134,0.6)\");\n          }).on(\"mouseout\", function () {\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).style(\"fill\", \"rgba(134,134,134,0.4)\");\n          });\n          returnSvgGroup.append(\"path\").style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1.5\").style(\"fill\", \"#fff\").style(\"pointer-events\", \"none\").attr(\"d\", \"M 0 0 L 6 4 6 -4 z\").attr(\"transform\", \"translate(10, 14)\");\n        }\n        document.documentElement.onmousemove = undefined;\n        document.documentElement.onmouseup = undefined;\n      };\n    });\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectChartComponent);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/SelectChartComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.components/SvgClipPathComponent.js":
/*!*********************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/SvgClipPathComponent.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n// SVG图形区域在部分图形超出区域后需要截图\n\nlet SvgClipPathComponent = {\n  /**\n   * 画图形的截取元素，在该元素内的图形显示，图形外的元素不显示 ， 主要给图形区域使用\n   * @param options\n   *          {\n   *              svgContainer    -   画图容器\n   *              chartUUID       -   当前图形的唯一标识\n   *              width\n   *              height\n   *              x\n   *              y\n   *          }\n   * */\n  drawClipPath: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.chartUUID || !_DataFocusMethod.isPureNumber(options.width + options.height + options.x + options.y)) return false;\n    let theSvgContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer),\n      currentDef = theSvgContainer.select(\"defs\");\n    if (!currentDef || !currentDef[0][0]) {\n      currentDef = theSvgContainer.append(\"defs\");\n    }\n    let theClipId = \"clipPath-\" + options.chartUUID;\n    currentDef.selectAll(\"#\" + theClipId).remove();\n    currentDef.append(\"clipPath\").attr(\"id\", theClipId).append(\"rect\").attr(\"x\", options.x).attr(\"y\", options.y).attr(\"width\", options.width).attr(\"height\", options.height);\n    return theClipId;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SvgClipPathComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/SvgClipPathComponent.js?");

/***/ })

}]);
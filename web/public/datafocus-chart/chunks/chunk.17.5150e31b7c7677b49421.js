(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[17],{

/***/ "../src-v5/assets/js/charts.components/ContainerComponent.js":
/*!*******************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/ContainerComponent.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// 画图形容器的组件\nlet ContainerComponent = {\n  /**\r\n   * 画图形的容器，只需要区分图例部分与图形部分[图形内部自己画X轴Y轴标题及图形]\r\n   * @param options\r\n   *          {\r\n   *              container           -   [ *必填项 ]画图容器DOM\r\n   *              legendPosition      -   图例位置[默认没有图例]  top / right / left / bottom\r\n   *              needCanvasFlag      -   是否需要canvas标签的标志\r\n   *          }\r\n   * @return 在container中插入图形区域 及 图例区域\r\n   *          {\r\n   *              svgContainer    -   包裹svg元素的div容器\r\n   *              svgJqDom        -   SVG的DOM元素\r\n   *              canvasJqDom     -   Canvas的DOM元素\r\n   *              legendContainer -   包裹图例的div容器\r\n   *          }\r\n   * */\n  drawCommonContainer: function (options) {\n    options = options || {};\n    if (!options.container) return false;\n    const getChartContent = container => {\n      const existedChartContent = container.querySelector('.chart-content');\n      if (existedChartContent) {\n        return existedChartContent;\n      }\n      const newChartContent = document.createElement('div');\n      newChartContent.classList.add('chart-content');\n      return newChartContent;\n    };\n    const getLegendContent = chartContent => {\n      const existedLegendContent = chartContent.querySelector('.legend-content');\n      if (options.legendPosition) {\n        if (existedLegendContent) return existedLegendContent;\n        const newLegendContent = document.createElement('div');\n        newLegendContent.classList.add('legend-content');\n        return newLegendContent;\n      } else {\n        if (existedLegendContent) existedLegendContent.remove();\n        return null;\n      }\n    };\n    const getSvgContent = chartContent => {\n      const existedSvgContent = chartContent.querySelector('.svg-content');\n      // 每次重新生成元素时，将临时回退元素清除\n      if (existedSvgContent) {\n        let theReturnDom = existedSvgContent.querySelector('.select-return-dom');\n        if (theReturnDom) theReturnDom.remove();\n        return existedSvgContent;\n      }\n      const newSvgContent = document.createElement('div');\n      newSvgContent.classList.add('svg-content');\n      return newSvgContent;\n    };\n    const getSvgDom = svgContent => {\n      const existedSvgDom = svgContent.querySelector('.svg-dom');\n      if (existedSvgDom) {\n        return existedSvgDom;\n      }\n      const newSvgDom = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      newSvgDom.classList.add('svg-dom');\n      return newSvgDom;\n    };\n    const getCanvasDom = svgContent => {\n      const existedCanvasDom = svgContent.querySelector('.canvas-dom');\n      if (options.needCanvasFlag) {\n        if (existedCanvasDom) return existedCanvasDom;\n        const newCanvasDom = document.createElement('canvas');\n        newCanvasDom.classList.add('canvas-dom');\n        return newCanvasDom;\n      } else {\n        if (existedCanvasDom) existedCanvasDom.remove();\n        return null;\n      }\n    };\n    const updateContainerLayout = (container, legendPosition) => {\n      const chartContent = getChartContent(container);\n      const legendContent = getLegendContent(chartContent);\n      const svgContent = getSvgContent(chartContent);\n      const svgDom = getSvgDom(svgContent);\n      const canvasDom = getCanvasDom(svgContent);\n      switch (legendPosition) {\n        case \"top\":\n          chartContent.style.cssText = 'display: flex;flex-direction: column;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:row;width:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height: 0;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        case \"bottom\":\n          chartContent.style.cssText = 'display: flex;flex-direction: column;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:row;width:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height: 0;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(svgContent);\n          chartContent.appendChild(legendContent);\n          break;\n        case \"right\":\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:column;height:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(svgContent);\n          chartContent.appendChild(legendContent);\n          break;\n        case \"left\":\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'height:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        case \"rightTop\":\n          // 图例在右上角\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'position:absolute;right:0;top:0;z-index:1;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        default:\n          // 无图例的部分\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          // legendContent.style.cssText = 'position:absolute;right:0;top:0;z-index:1;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n\n          // chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n      }\n\n      // 最后插入减少浏览器重绘\n      options.container.innerHTML = '';\n      options.container.appendChild(chartContent);\n      return {\n        chartContent,\n        legendContent,\n        svgContent,\n        svgDom,\n        canvasDom\n      };\n    };\n    const {\n      chartContent,\n      legendContent,\n      svgContent,\n      svgDom,\n      canvasDom\n    } = updateContainerLayout(options.container, options.legendPosition);\n    return {\n      chartContainer: chartContent,\n      svgContainer: svgContent,\n      svgJqDom: svgDom,\n      canvasJqDom: canvasDom,\n      legendContainer: legendContent\n    };\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ContainerComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/ContainerComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.senior/venn/systemVennChart.js":
/*!************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/venn/systemVennChart.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var venn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! venn.js */ \"../node_modules/venn.js/build/venn.js\");\n/* harmony import */ var venn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(venn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/d3v7Export */ \"../src-v5/assets/js/d3v7Export.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pc/assets/js/charts.components/ContainerComponent */ \"../src-v5/assets/js/charts.components/ContainerComponent.js\");\n/**\r\n * 系统柱状图画图组件\r\n *\r\n * 从系统中剥离的目的\r\n * 1. 为了减轻图形打包文件的大小【20230301时最大的打包文件是10M左右】\r\n * 2. 各个图形控制各自的图表配置\r\n * 3. 支持图形的延迟分批加载\r\n * **/\n\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n// 画图容器组件[ 主要区分svg部分与图例部分 ]\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  // [*必填项] 图姓唯一标识\n  chartType: \"venn\",\n  // [*必填项] 图形名称中英文Key\n  chartDisplayNameKey: \"chart_venn\",\n  // [*必填项] 图形描述中英文Key\n  chartDescriptionKey: \"chart_venn_tooltip\",\n  // [*必填项] 图轴配置元素\n  needAxis: {\n    columns: {\n      required: true\n    }\n  },\n  // [*必填项] 搜索数据是否支持该图形 ( 至少一个属性列，一个数值列，数据必须是非聚合的 )\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    if (searchResultStatistic && searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.measureColumns.length >= 1 || searchResultStatistic.attributeColumns.length >= 1) {\n        satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  /**\r\n   * [选填] 获取当前图形各个needAxis中可选择的配置列\r\n   * @return\r\n   *      {\r\n   *          // 依据needAxis结构返回各个可选列的index\r\n   *          xAxis: [1,2,3] ,\r\n   *          yAxis: [4,5] ,\r\n   *          legend: [1,2,3] ,\r\n   *          size: [4,5] ,\r\n   *          time: [1,2]\r\n   *      }\r\n   * */\n  getSatisfiedChartAxis: function (searchResultStatistic) {\n    let self = this; //  是当前_DataFocusChartTypes中的对象\n\n    const needAxis = self.needAxis || {};\n    if (!needAxis || !searchResultStatistic) return false;\n    let theAxisObj = {};\n    if (needAxis.columns) {\n      theAxisObj.columns = [...(searchResultStatistic.attributeColumns && searchResultStatistic.attributeColumns.map(function (h) {\n        return h.idx;\n      }) || []), ...(searchResultStatistic.measureColumns && searchResultStatistic.measureColumns.map(function (h) {\n        return h.idx;\n      }) || [])];\n    }\n    if (_DataFocusMethod.isObjEmpty(theAxisObj)) {\n      return false;\n    } else {\n      theAxisObj.name = self.name;\n      theAxisObj.type = self.name;\n      return theAxisObj;\n    }\n  },\n  /**\r\n   * [选填] 在图形没有图轴配置的情况下，从getSatisfiedChartAxis中图轴可选项中初始化画图配置\r\n   *\r\n   * 初始化规则：\r\n   * 1. 默认不填充X轴，如果有图例列，则填充图例列。保证数据量少的情况下的展示效果\r\n   *\r\n   * // 依据needAxis生成初始的图轴配置值，及各个轴的配置可选项\r\n   *    返回对象名字规则: 可选项是needAxis中各项名字 + Area ； 当前配置项是 cur + needAxis中各项名字\r\n   * @return chartAxis\r\n   *          {\r\n   *              timeArea: [ {col_id , index ...} ] ,\r\n   *              curColumns: [{col_id , index ...}]\r\n   *          }\r\n   *\r\n   * */\n  initChartAxisConfig: function (options) {\n    options = options || {};\n    if (!options.tableData || !options.tableData.headers) return false;\n    let self = this,\n      //  是当前_DataFocusChartTypes中的对象\n      tableData = options.tableData,\n      headers = tableData.headers,\n      columns = tableData.columns;\n\n    // charts是依据各个图形中的getSatisfiedChartAxis生成的\n    let theMatchedChart = tableData.charts && tableData.charts.find(function (chart) {\n        return (chart.name || chart.type) === self.name;\n      }),\n      chartAxis = {};\n    if (!theMatchedChart) {\n      console.log(\"当前数据不适合韦恩图\");\n      return chartAxis;\n    }\n    let getIdIndexInHeader = function (colIdx, headers) {\n      // 目前charts返回的都是索引\n      if (colIdx < headers.length) return colIdx;\n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i].col_id === colIdx) return i;\n      }\n      return -1;\n    };\n\n    // 获取XAxis列及可选数组\n    if (self.needAxis && self.needAxis.columns) {\n      chartAxis.columnArea = [];\n      theMatchedChart.columns && theMatchedChart.columns.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = $.extend({}, headers[curColumnIndex]);\n        obj.header = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        chartAxis.columnArea.push(obj);\n      });\n      chartAxis.curColumns = [...chartAxis.columnArea]; // 默认选择所有列\n    }\n    return chartAxis;\n  },\n  /***\r\n   * [*必填项] 图轴配置是否合法\r\n   * - 列不允许为空\r\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '';\n    if (!theAxisConfig) {\n      return chartErrorMsg;\n    }\n    return chartErrorMsg;\n  },\n  // [* 必填项]画图方法\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    let self = this,\n      container = options.container,\n      currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      chartConfigures = options.chartConfigures || {};\n    container.innerHTML = '';\n    // 给柱状图初始化画图容器  SVG图形部分(X轴Y轴图形) / X轴标题(位置) / Y轴标题(位置) / 图例(位置)\n    const containerResult = _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].drawCommonContainer({\n      container: container\n    });\n    if (!containerResult.svgJqDom) return false;\n    // 为了防止图形先画了图例，导致没有数据时有图例的区域在\n    if (!options.datas.columns || !options.datas.columns.length) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n\n    // 获取图形的整体宽度和高度\n    let chartWidth = container.offsetWidth,\n      chartHeight = container.offsetHeight;\n    // 获取当前图形的配置颜色主题方法\n    let colorFunc = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].translateColorThemeConfigure(chartConfigures.chart_color_theme, {\n      chart_custom_theme: chartConfigures.chart_custom_theme\n    });\n\n    // 获取隐藏聚合方式的标志配置, 即所有属性列的聚合方式不显示在标签内\n    let hideOperatorFlag = false;\n    if (chartConfigures.hide_operator_label) hideOperatorFlag = true;\n    // 获取图形的字体大小配置\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 10,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    chartFontSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].translateFontSizeConfigure(chartFontSize) || 10;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n      containerResult.svgJqDom.style.color = chartFontColor;\n      containerResult.svgJqDom.style.fill = chartFontColor;\n    } else {\n      container.style.color = '';\n      container.style.fill = '';\n      containerResult.svgJqDom.style.color = '';\n      containerResult.svgJqDom.style.fill = '';\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n\n    // 混合模式\n    const mixBlendModeMap = {\n      option_mix_blend_normal: 'normal',\n      option_mix_blend_multiply: 'multiply',\n      option_mix_blend_difference: 'difference',\n      option_mix_blend_color_burn: 'color-burn',\n      option_mix_blend_darken: 'darken',\n      option_mix_blend_lighten: 'lighten',\n      option_mix_blend_screen: 'screen',\n      option_mix_blend_color_dodge: 'color-dodge',\n      option_mix_blend_overlay: 'overlay',\n      option_mix_blend_soft_light: 'soft-light',\n      option_mix_blend_hard_light: 'hard-light',\n      option_mix_blend_exclusion: 'exclusion',\n      option_mix_blend_hue: 'hue',\n      option_mix_blend_saturation: 'saturation',\n      option_mix_blend_color: 'color',\n      option_mix_blend_luminosity: 'luminosity'\n    };\n    const mixBlendMode = mixBlendModeMap[chartConfigures.mix_blend] || 'normal';\n\n    // 是否展示集合的描边\n    let showStroke = false;\n    if (chartConfigures.set_stroke) {\n      showStroke = true;\n    }\n    const strokeStyle = chartConfigures.set_stroke_style;\n    let isBorderDashed = false;\n    let borderWidth = 3;\n    let strokeColor = 'auto'; // 默认为fill颜色加深\n    if (strokeStyle) {\n      // 虚实\n      isBorderDashed = strokeStyle.lineStyle === 'dashed';\n      // 粗细\n      if (_DataFocusMethod.isPureNumber(strokeStyle.lineWidth)) {\n        borderWidth = parseInt(strokeStyle.lineWidth);\n      }\n      // 颜色\n      if (strokeStyle.lineColor) {\n        strokeColor = strokeStyle.lineColor;\n      }\n    }\n    const tableData = conf.datas;\n    const chartAxis = options.chartAxis;\n    const rows = tableData.columns; // 所有行的数据\n\n    const savedLegendConfigList = chartConfigures.chart_legend_list;\n    const legendValueList = chartAxis.curColumns.map((col, index) => {\n      const theLegendId = col.col_name;\n      const theConfigLegend = savedLegendConfigList && savedLegendConfigList.find(function (theConfig) {\n        return theConfig.id === theLegendId;\n      });\n      return {\n        type: 'columnValue',\n        legend: theLegendId,\n        id: theLegendId,\n        index: col.index,\n        dash: theConfigLegend && theConfigLegend.dash || false,\n        color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n        show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n      };\n    });\n    const defaultLegendList = chartAxis.curColumns.map((col, index) => {\n      const theLegendId = col.col_name;\n      return {\n        type: 'columnValue',\n        legend: theLegendId,\n        id: theLegendId,\n        index: col.index,\n        color: colorFunc(index),\n        show: true\n      };\n    });\n\n    // 获取集合的全组合列表\n    const getIntersectionList = setList => {\n      const getCombinations = (arr, start, num, res) => {\n        if (num === 0) {\n          intersectionList.push([...res]);\n          return;\n        }\n        if (arr.length - start < num) {\n          return;\n        } else {\n          res.push(arr[start]);\n          getCombinations(arr, start + 1, num - 1, res);\n          res.pop();\n          getCombinations(arr, start + 1, num, res);\n        }\n      };\n      const intersectionList = [];\n      const res = [];\n      for (let setCount = 1; setCount <= setList.length; setCount++) {\n        getCombinations(setList, 0, setCount, res);\n      }\n      return intersectionList;\n    };\n\n    // 初始 set 列表: ['a', 'b', 'c']\n    const setList = chartAxis.curColumns.map(col => col.col_name);\n    // 交集列表： [['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n    const intersectionList = getIntersectionList(setList);\n    // 集合名 map 集合值Set\n    const setValueMap = new Map(chartAxis.curColumns.map(col => [col.col_name,\n    // 列中值去重处理\n    new Set(rows.map(row => row[col.index]))]));\n    const intersectionInfoList = intersectionList.map(intersection => {\n      // 交集内的值列表\n      const intersectionValues = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].intersection(...intersection.map(setName => setValueMap.get(setName)));\n      return {\n        sets: intersection,\n        size: intersectionValues.size,\n        label: intersection.length === 1 ? intersection[0] : '',\n        promptLabel: intersection.join(' ∩ '),\n        values: intersectionValues\n      };\n    });\n    const chart = Object(venn_js__WEBPACK_IMPORTED_MODULE_0__[\"VennDiagram\"])().width(chartWidth).height(chartHeight).styled(true);\n    const vennContainer = containerResult.svgContainer;\n    const vennContainerD3 = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(vennContainer);\n    vennContainerD3.datum(intersectionInfoList).call(chart);\n    const vennSvg = vennContainerD3.select('svg');\n    vennSvg.style('mix-blend-mode', mixBlendMode);\n    vennSvg.style('isolation', 'isolate');\n\n    // 所有选区的描边,用于鼠标高亮\n    vennContainerD3.selectAll(\"path\").style(\"stroke-opacity\", 0).style(\"stroke-width\", showStroke ? borderWidth : 0).style('stroke-dasharray', isBorderDashed ? '10 5' : '');\n\n    // 初始化填充\n    vennContainerD3.selectAll(\".venn-circle path\").style('fill', (d, index) => {\n      const matchedConfig = legendValueList.find(legendConfig => legendConfig.id === d.label);\n      return matchedConfig && matchedConfig.color || colorFunc(index);\n    }).style(\"fill-opacity\", .6).style('stroke', (d, index) => {\n      if (strokeColor === 'auto') {\n        const matchedConfig = legendValueList.find(legendConfig => legendConfig.id === d.label);\n        return matchedConfig && matchedConfig.color || colorFunc(index);\n      } else {\n        return strokeColor;\n      }\n    }).style('stroke-opacity', 1);\n    vennContainerD3.selectAll(\"text\").style(\"fill\", chartFontColor || 'inherit').style('font-size', chartFontSize);\n    vennContainerD3.selectAll(\"path\").style(\"transform-origin\", \"50% 50%\");\n\n    // 所有交集的提示\n    vennContainerD3.selectAll('g').on(\"mouseenter\", function (e, d) {\n      Object(venn_js__WEBPACK_IMPORTED_MODULE_0__[\"sortAreas\"])(vennContainerD3, d);\n\n      // 当量当前选区\n      const selection = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n\n      // 高亮时，一定有实线描边\n      selection.select(\"path\").transition().duration(300).style(\"fill-opacity\", d.sets.length === 1 ? .9 : .18).style(\"stroke-width\", showStroke ? borderWidth : 3).style(\"stroke\", \"#efefef\").style('stroke-dasharray', '').style(\"stroke-opacity\", 1).style(\"transform\", \"scale(1, 1)\");\n    }).on(\"mousemove\", function (e, d) {\n      // 移动tooltip\n      let theTranslateSuspendText;\n      if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n        let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n        let defaultSuspendText;\n        if (systemLanguage === 'chinese') {\n          defaultSuspendText = '%_INTERSECTION_NAME %_BR %_INTERSECTION_SIZE';\n        } else {\n          defaultSuspendText = '%_INTERSECTION_NAME %_BR %_INTERSECTION_SIZE';\n        }\n        if (!theSuspendTextConfig.trim()) theSuspendTextConfig = defaultSuspendText;\n        theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n          intersectionName: d.promptLabel,\n          intersectionSize: d.size,\n          intersectionValues: [...d.values].join(', ')\n        });\n      }\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positionChartPrompt(e, theTranslateSuspendText);\n    }).on(\"mouseleave\", function (e, d) {\n      const selection = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this);\n      selection.select(\"path\").transition().duration(300).style(\"fill-opacity\", d.sets.length === 1 ? .6 : 0).style(\"stroke\", (d, index) => {\n        if (strokeColor === 'auto') {\n          const matchedConfig = legendValueList.find(legendConfig => legendConfig.id === d.label);\n          return matchedConfig && matchedConfig.color || colorFunc(index);\n        } else {\n          return strokeColor;\n        }\n      }).style(\"stroke-width\", showStroke ? borderWidth : 0).style('stroke-dasharray', isBorderDashed ? '10 5' : '').style(\"stroke-opacity\", 0).style(\"transform\", \"scale(1,1)\");\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n    });\n    const returnConfigureAutoValue = {\n      has_legend_flag: true,\n      legendValueList: legendValueList,\n      defaultLegendList: defaultLegendList\n    };\n    return {\n      chartAutoConfigures: returnConfigureAutoValue\n    };\n  },\n  // [*必填项]图表配置列表，其中的require条件不仅可以使用以下配置项的key，也可以使用drawChart中返回的chartAutoConfigures中的值\n  // drawChart返回的chartAutoConfigures是图形返回给图形配置组件的信息，用于开发者可以控制配置的显示与隐藏\n  chartConfigureList: [\n  // 通用 ： 字体大小，动画，最小柱宽，\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"theme\",\n      selection: [\"option_chart_theme_eight\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"],\n      defaultValue: \"option_chart_theme_one\"\n    },\n    //自定义主题颜色\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    // 图形字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      }\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }, {\n    key: \"category_venn_config\",\n    title: \"category_venn_config\",\n    options: [\n    // 交集混合模式\n    // todo : isolation: isolate;\n    {\n      key: 'mix_blend',\n      title: 'option_mix_blend',\n      description: 'option_mix_blend_desc',\n      type: 'select',\n      selection: [\"option_mix_blend_normal\",\n      // 正常\n      \"option_mix_blend_multiply\",\n      // 正片叠底\n      \"option_mix_blend_difference\",\n      // 差值\n      \"option_mix_blend_color_burn\",\n      // 颜色加深\n      \"option_mix_blend_darken\",\n      // 变暗\n      \"option_mix_blend_lighten\",\n      // 变亮\n      \"option_mix_blend_screen\",\n      // 滤色\n      \"option_mix_blend_color_dodge\",\n      // 颜色减淡\n      \"option_mix_blend_overlay\",\n      // 叠加\n      \"option_mix_blend_soft_light\",\n      // 柔光\n      \"option_mix_blend_hard_light\",\n      // 强光\n      \"option_mix_blend_exclusion\",\n      // 排除\n      \"option_mix_blend_hue\",\n      // 色相\n      \"option_mix_blend_saturation\",\n      // 饱和度\n      \"option_mix_blend_color\",\n      // 颜色\n      \"option_mix_blend_luminosity\" // 明度\n      ]\n    },\n    // 显示集合的描边\n    {\n      key: \"set_stroke\",\n      title: \"option_set_stroke\",\n      description: \"option_set_stroke_desc\",\n      type: \"checkbox-prev\",\n      defaultValue: false\n    },\n    // 设置集合描边的宽度、颜色\n    {\n      key: \"set_stroke_style\",\n      title: \"option_set_stroke_style\",\n      description: \"option_set_stroke_style_desc\",\n      type: \"lineStyle\",\n      defaultValue: {\n        lineColor: \"rgba(255, 255, 255 , 1)\",\n        lineWidth: 3,\n        lineStyle: 'solid'\n      },\n      require: 'set_stroke'\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 颜色：颜色主题，图例形状颜色，单Y轴情况下，将颜色分配给各个X轴刻度，各个刻度的颜色\n  {\n    key: \"category_color\",\n    title: \"category_color\",\n    options: [{\n      key: \"chart_legend_list\",\n      // \"chart_custom_legend_new\",\n      type: \"legendList\",\n      legendConfigSet: ['color'],\n      //  当前图例可以配置的值 color: 颜色 ； shape:形状 ；dash： 虚实\n      legendValueList: \"legendValueList\",\n      //  当前所有图例使用的配置值\n      defaultLegendList: \"defaultLegendList\",\n      //  当前所有图例的默认值\n      require: \"has_legend_flag\",\n      legendDashSelection: [\"option_dashed_solid_of_line_solid\", \"option_dashed_solid_of_line_dashed\"],\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }],\n    require: \"has_legend_flag\"\n  },\n  // 悬浮文本设置\n  {\n    key: \"category_suspend_text\",\n    title: \"category_suspend_text\",\n    options: [{\n      key: \"suspend_text_regex\",\n      title: \"option_suspend_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  /**\r\n   * 图形配置的辅助对象：当前图形定义的宏列表 及 宏 解析方法 ； 适配之前图形配置值的方法 ；\r\n   *\r\n   * 当前图形提供的宏列表[ 宏名的命名规则： 开头是%_ 用_连接的大写字符字符串 ]\r\n   * 供自定义数据标签 及 悬浮文本使用，可以让用户配置显示内容\r\n   * 键值对  MacroName : MacroDisplayNameKey\r\n   * */\n  chartConfigureAdvanced: {\n    // 文字富文本输入框中不需要列中值\n    withoutColumnNFlag: true,\n    // 如果当前图形支持换行的宏，则输入时允许输入换行符 ； 否则编辑时也不支持换行符 ；\n    chartMacroList: [{\n      key: '%_INTERSECTION_NAME',\n      nameKey: '%_INTERSECTION_NAME',\n      descriptionKey: '%_INTERSECTION_NAME_DESC'\n    }, {\n      key: '%_INTERSECTION_SIZE',\n      nameKey: '%_INTERSECTION_SIZE',\n      descriptionKey: '%_INTERSECTION_SIZE_DESC'\n    }, {\n      key: '%_INTERSECTION_VALUES',\n      nameKey: '%_INTERSECTION_VALUES',\n      descriptionKey: '%_INTERSECTION_VALUES_DESC'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR',\n      descriptionKey: '%_BR_desc'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type        -\r\n     *\r\n     *              intersectionName    -   集合名称\r\n     *              intersectionSize  -   集合大小\r\n     *              intersectionValues        -   集合中的值\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case '%_INTERSECTION_NAME':\n            theMatchedTextValue += options.intersectionName || '';\n            break;\n          case '%_INTERSECTION_SIZE':\n            theMatchedTextValue += options.intersectionSize || '';\n            break;\n          case '%_INTERSECTION_VALUES':\n            theMatchedTextValue += options.intersectionValues || '';\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            theMatchedTextValue += '';\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    },\n    // 如果当前图形配置在上线后需要更新配置，需要兼容行为，则在此处处理[ 不同图形兼容方法不一样 ]\n    compatibleHistoryConfigure: function (chartConfigure, options) {\n      if (!options) return false;\n      options = options || {};\n      // 图形字体大小修改了值结构\n      if (_DataFocusMethod.isPureNumber(chartConfigure.font_size_label)) {\n        let theFontSize = parseInt(chartConfigure.font_size_label);\n        chartConfigure.font_size_label = {\n          fontSize: theFontSize\n        };\n      }\n      if (chartConfigure.attribute_label_rotate !== undefined) {\n        chartConfigure.x_axis_label_dot_line_rotation_value = chartConfigure.attribute_label_rotate;\n        chartConfigure.attribute_label_rotate = undefined;\n      }\n\n      // 图形标题隐藏配置调整为两个配置值 [ 新的柱状图 ]\n      if (chartConfigure.hidden_chart_title) {\n        chartConfigure.x_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.y_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.hidden_chart_title = undefined;\n      }\n    }\n  },\n  // [*必填项]图轴及图表自定义的中英文\n  i18nObj: {\n    chinese: {\n      \"system_auto_default\": \"自动\",\n      \"user_define_text\": \"自定义\",\n      \"option_title_visible_show\": \"显示\",\n      \"option_title_visible_hide\": \"隐藏\",\n      \"option_font_style\": \"字体\",\n      \"option_font_alignment\": \"对齐方式\",\n      \"category_color\": \"颜色\",\n      \"option_suspend_text_regex_desc\": \"要显示的文本。有以下替换宏可用：<br /> \" + \"<span class='mr3'>[集合名称]</span> - 当前悬浮区域的集合名称 <br />\" + \"<span class='mr3'>[集合大小]</span> - 当前悬浮区域的集合的大小 <br />\" + \"<span class='mr3'>[集合值]</span> - 当前悬浮区域的集合中包含的值 <br />\" + \"<span class='mr3'>[换行]</span> - 换行符\",\n      \"%_INTERSECTION_NAME\": '集合名称',\n      \"%_INTERSECTION_NAME_DESC\": '设置悬浮文本的集合名称',\n      \"%_INTERSECTION_SIZE\": '集合大小',\n      \"%_INTERSECTION_SIZE_DESC\": '设置悬浮文本的集合大小',\n      \"%_INTERSECTION_VALUES\": '集合值',\n      \"%_INTERSECTION_VALUES_DESC\": '设置悬浮文本中集合所包含的值',\n      \"%_BR\": \"换行\",\n      \"option_grid_show_all_line\": \"显示全部网格线\",\n      \"option_grid_line_style\": \"网格线样式\",\n      \"option_grid_line_style_desc\": \"配置所有网格线的样式，包括虚实，颜色及粗细\",\n      \"option_grid_show_only_zero_line\": \"只显示零线\",\n      \"option_grid_show_only_zero_line_desc\": \"配置后，网格线中非零线将全部隐藏，只显示零线 <br /> 如果Y轴最小值大于0，则没有零线，所有网格线均都不显示 \",\n      \"option_grid_zero_line_style\": \"零线样式\",\n      \"option_grid_zero_line_style_desc\": \"配置零线的样式，包括虚实，颜色及粗细\",\n      \"option_scale_y_visible\": \"显示/隐藏\",\n      category_venn_config: '集合配置',\n      option_mix_blend: '混合模式',\n      option_mix_blend_desc: '设置各交集的混合模式',\n      option_mix_blend_normal: '正常',\n      option_mix_blend_multiply: '正片叠底',\n      option_mix_blend_difference: '差值',\n      option_mix_blend_color_burn: '颜色加深',\n      option_mix_blend_darken: '变暗',\n      option_mix_blend_lighten: '变亮',\n      option_mix_blend_screen: '滤色',\n      option_mix_blend_color_dodge: '颜色减淡',\n      option_mix_blend_overlay: '叠加',\n      option_mix_blend_soft_light: '柔光',\n      option_mix_blend_hard_light: '强光',\n      option_mix_blend_exclusion: '排除',\n      option_mix_blend_hue: '色相',\n      option_mix_blend_saturation: '饱和度',\n      option_mix_blend_color: '颜色',\n      option_mix_blend_luminosity: '明度',\n      option_border_style: '描边样式',\n      option_border_style_desc: '设置集合的描边样式',\n      option_border_style_solid: '实线',\n      option_border_style_dashed: '虚线',\n      option_set_stroke: '显示集合描边',\n      option_set_stroke_desc: '设置集合是否显示描边',\n      option_set_stroke_style: '描边样式',\n      option_set_stroke_style_desc: '设置集合的描边样式'\n\n      // option_dashed_solid_of_line: '描边虚实',\n    },\n    english: {\n      \"system_auto_default\": \"Auto\",\n      \"user_define_text\": \"Define\",\n      \"option_title_visible_show\": \"Show\",\n      \"option_title_visible_hide\": \"Hidden\",\n      \"option_font_style\": \"Font\",\n      \"option_font_alignment\": \"Alignment\",\n      \"category_color\": \"Color\",\n      \"option_suspend_text_regex_desc\": \"The text to be displayed. The following replacement macros are available:<br /> \" + \"<span class='mr3'>[Intersection Name]</span> - The intersection name of the current floating area <br />\" + \"<span class='mr3'>[Intersection Size]</span> - The size of the intersection of the current floating area <br />\" + \"<span class='mr3'>[Intersection Values]</span> - The value contained in the intersection of the current hover area <br />\" + \"<span class='mr3'>[Wrap]</span> - Line Break\",\n      \"%_INTERSECTION_NAME\": 'Intersection Name',\n      \"%_INTERSECTION_NAME_DESC\": 'Set the Intersection name of floating text',\n      \"%_INTERSECTION_SIZE\": 'Intersection Size',\n      \"%_INTERSECTION_SIZE_DESC\": 'Set the Intersection size of the floating text',\n      \"%_INTERSECTION_VALUES\": 'Intersection Values',\n      \"%_INTERSECTION_VALUES_DESC\": 'Set the values contained in the intersection in the floating text',\n      \"%_BR\": \"Wrap\",\n      \"option_grid_show_all_line\": \"Show all grid lines\",\n      \"option_grid_line_style\": \"Line style\",\n      \"option_grid_line_style_desc\": \"Configure the styles of all grid lines, including virtual and solid, color, and thickness\",\n      \"option_grid_show_only_zero_line\": \"Only show the zero line\",\n      \"option_grid_show_only_zero_line_desc\": \"After configuration, all non zero lines in the grid lines will be hidden, and only zero lines will be displayed.<br/>If the minimum value of the Y-axis is greater than 0, there will be no zero lines, and all grid lines will not be displayed\",\n      \"option_grid_zero_line_style\": \"Zero line style\",\n      \"option_grid_zero_line_style_desc\": \"Configure the style of the zero line, including virtual and solid, color, and thickness\",\n      \"option_scale_y_visible\": \"Show/Hide\",\n      category_venn_config: 'Set Config',\n      option_mix_blend: 'Mix Blend Mode',\n      option_mix_blend_desc: 'Set the blending mode of each intersection',\n      option_mix_blend_normal: 'Normal',\n      option_mix_blend_multiply: 'Multiply',\n      option_mix_blend_difference: 'Difference',\n      option_mix_blend_color_burn: 'Color Burn',\n      option_mix_blend_darken: 'Darken',\n      option_mix_blend_lighten: 'Lighten',\n      option_mix_blend_screen: 'Screen',\n      option_mix_blend_color_dodge: 'Color Dodge',\n      option_mix_blend_overlay: 'Overlay',\n      option_mix_blend_soft_light: 'Soft Light',\n      option_mix_blend_hard_light: 'Hard Light',\n      option_mix_blend_exclusion: 'Exclusion',\n      option_mix_blend_hue: 'Hue',\n      option_mix_blend_saturation: 'Saturation',\n      option_mix_blend_color: 'Color',\n      option_mix_blend_luminosity: 'Luminosity',\n      option_border_style: 'Stroke Style',\n      option_border_style_desc: 'Set the stroke style of a intersection',\n      option_border_style_solid: 'Solid',\n      option_border_style_dashed: 'Dashed',\n      option_set_stroke: 'Show intersection strokes',\n      option_set_stroke_desc: 'Set whether the intersection displays strokes',\n      option_set_stroke_style: 'Stroke Style',\n      option_set_stroke_style_desc: 'Set the stroke style of a intersection'\n\n      // option_dashed_solid_of_line: 'Stroke line',\n    }\n  },\n  // [*必填项]生成当前图表类型的模板数据\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/venn/systemVennChart.js?");

/***/ })

}]);
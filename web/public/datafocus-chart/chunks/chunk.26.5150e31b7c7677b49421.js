(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[26],{

/***/ "../src-v5/assets/js/charts.system.basic/column/systemColumnChart.js":
/*!***************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.basic/column/systemColumnChart.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/d3v7Export */ \"../src-v5/assets/js/d3v7Export.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pc/assets/js/charts.components/ContainerComponent */ \"../src-v5/assets/js/charts.components/ContainerComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pc/assets/js/charts.components/TranslateDataComponent */ \"../src-v5/assets/js/charts.components/TranslateDataComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pc/assets/js/charts.components/LegendComponent */ \"../src-v5/assets/js/charts.components/LegendComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pc/assets/js/charts.components/TitleComponent */ \"../src-v5/assets/js/charts.components/TitleComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @pc/assets/js/charts.components/MeasureAxisComponent */ \"../src-v5/assets/js/charts.components/MeasureAxisComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_AttributeAxisComponent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @pc/assets/js/charts.components/AttributeAxisComponent */ \"../src-v5/assets/js/charts.components/AttributeAxisComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_MarkerComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @pc/assets/js/charts.components/MarkerComponent */ \"../src-v5/assets/js/charts.components/MarkerComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_SvgClipPathComponent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @pc/assets/js/charts.components/SvgClipPathComponent */ \"../src-v5/assets/js/charts.components/SvgClipPathComponent.js\");\n/* harmony import */ var _ColumnChartComponent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ColumnChartComponent */ \"../src-v5/assets/js/charts.system.basic/column/ColumnChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ReferenceLineComponent__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @pc/assets/js/charts.components/ReferenceLineComponent */ \"../src-v5/assets/js/charts.components/ReferenceLineComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_PaginationChartComponent__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @pc/assets/js/charts.components/PaginationChartComponent */ \"../src-v5/assets/js/charts.components/PaginationChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ZoomChartComponent__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @pc/assets/js/charts.components/ZoomChartComponent */ \"../src-v5/assets/js/charts.components/ZoomChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_SelectChartComponent__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @pc/assets/js/charts.components/SelectChartComponent */ \"../src-v5/assets/js/charts.components/SelectChartComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_MouseOverChartComponent__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @pc/assets/js/charts.components/MouseOverChartComponent */ \"../src-v5/assets/js/charts.components/MouseOverChartComponent.js\");\n/**\r\n * 系统柱状图画图组件\r\n *\r\n * 从系统中剥离的目的\r\n * 1. 为了减轻图形打包文件的大小【20230301时最大的打包文件是10M左右】\r\n * 2. 各个图形控制各自的图表配置\r\n * 3. 支持图形的延迟分批加载\r\n * **/\n\n\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n// 画图容器组件[ 主要区分svg部分与图例部分 ]\n\n// 数据处理组件[ 解析XY轴配置组的数据 ]\n\n// 画图例列表的组件\n\n// 画标题组件\n\n// 解析数值刻度 及  画数值刻度的组件\n\n// 画属性刻度轴\n\n// 画标准线[ 最大/最小/平均值 ]\n\n// 画图形区域的截取元素\n\n// 画柱形图\n\n// 画标度线\n\n// 画分页组件\n\n// 缩放页组件\n\n// 区域选择组件\n\n// 鼠标移入响应事件\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  // [*必填项] 图姓唯一标识\n  chartType: \"column\",\n  // [*必填项] 图形名称中英文Key\n  chartDisplayNameKey: \"chart_column\",\n  // [*必填项] 图形描述中英文Key\n  chartDescriptionKey: \"chart_column_tooltip\",\n  // [*必填项] 图轴配置元素 ( X轴 ，Y轴（允许右Y轴），图例 )\n  needAxis: {\n    xAxis: {},\n    yAxis: {\n      defaultYAxisNumber: -1,\n      allowMultiYAxis: true\n    },\n    legend: {}\n  },\n  // [*必填项] 搜索数据是否支持该图形 ( 至少一个属性列，一个数值列 )\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    // if (!searchResultStatistic || !searchResultStatistic.aggregatedFlag) return false;\n    // @20230721 非聚合数据也可以画柱状图\n    if (!searchResultStatistic) return false;\n    if (searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.measureColumns.length >= 1 && searchResultStatistic.attributeColumns.length >= 1) {\n        satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  /***\r\n   * [*必填项] 图轴配置是否合法\r\n   * - X轴不允许为空\r\n   * - Y轴不允许为空\r\n   * - 左Y轴不允许为空\r\n   * - Y轴不允许重复\r\n   * - 有legend时，Y轴不允许超过1个\r\n   * - 有legend时，不允许与X轴中的项重复\r\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '';\n    if (!theAxisConfig) return chartErrorMsg;\n\n    // X轴为必填选项\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      chartErrorMsg = 'chart_modify_x_not_null';\n      return chartErrorMsg;\n    }\n\n    // Y轴不允许为空\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      chartErrorMsg = 'chart_modify_y_not_null';\n      return chartErrorMsg;\n    }\n\n    // 左Y轴不允许为空\n    let leftYIds = theAxisConfig.yAxis && theAxisConfig.yAxis.filter(function (axis) {\n      return axis.direction === 'left';\n    });\n    if (!leftYIds || !leftYIds.length) {\n      chartErrorMsg = 'chart_modify_y_left_not_null';\n      return chartErrorMsg;\n    }\n\n    // Y轴不允许重复\n    for (let i = 0, yyIds = []; theAxisConfig.yAxis && i < theAxisConfig.yAxis.length; i++) {\n      let theAxis = theAxisConfig.yAxis[i];\n      if (yyIds.indexOf(theAxis.index) > -1) {\n        chartErrorMsg = 'chart_modify_y_not_repeat';\n        yyIds.push(theAxis.index);\n        return chartErrorMsg;\n      }\n    }\n\n    // 有legend时，Y轴不允许超过1个\n    if (theAxisConfig.legend && theAxisConfig.yAxis && theAxisConfig.yAxis.length > 1) {\n      chartErrorMsg = 'chart_modify_y_only_one';\n      return chartErrorMsg;\n    }\n\n    // 有legend时，不允许与X轴中的项重复\n    if (theAxisConfig.legend && theAxisConfig.xAxis && theAxisConfig.xAxis.find(function (axis) {\n      return axis.index === theAxisConfig.legend.index;\n    })) {\n      chartErrorMsg = 'chart_modify_x_legend_not_equal';\n      return chartErrorMsg;\n    }\n    return chartErrorMsg;\n  },\n  // [* 必填项]画图方法\n  drawChart: function (options) {\n    // console.log('draw column chart');\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    const self = this;\n    const container = options.container,\n      chartAxis = options.chartAxis,\n      currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      getI18nKeyFunc = conf.curLanguage,\n      inPinboardFlag = !!conf.inPinboard,\n      allowMousedownFlag = !!(conf.action && !conf.wxFlag),\n      //  移动端的mousedown事件不执行\n      chartConfigures = options.chartConfigures || {},\n      tableData = options.datas,\n      cachedTranslateData = conf.cachedTranslateData,\n      hasLegendFlag = !!(chartAxis.curLegend || chartAxis.curYAxis && chartAxis.curYAxis.length > 1),\n      hideCategories = conf.hideCategories;\n\n    // 获取图例的位置，默认在右侧\n    let legendPosition = hasLegendFlag ? 'right' : '';\n    if (legendPosition) {\n      legendPosition = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].translateLegendConfigure(chartConfigures.legend_position);\n    }\n\n    // 给柱状图初始化画图容器  SVG图形部分(X轴Y轴图形) / X轴标题(位置) / Y轴标题(位置) / 图例(位置)\n    let containerResult = _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].drawCommonContainer({\n      container: container,\n      legendPosition: !!(chartConfigures.show_legend === undefined || chartConfigures.show_legend) ? legendPosition : ''\n    });\n    if (!containerResult.svgJqDom) return false;\n    if (!options.datas.columns || !options.datas.columns.length) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n\n    // 获取图形的整体宽度和高度\n    let chartWidth = container.offsetWidth,\n      chartHeight = container.offsetHeight;\n    // 当前画图区域的缩放比例【会影响到获取字体高度的计算】\n    if (_DataFocusMethod.isPureNumber(chartConfigures._DF_SYS_TRANSFORM_SCALE)) {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].transformScale = chartConfigures._DF_SYS_TRANSFORM_SCALE;\n    }\n    // 获取当前图形的配置颜色主题方法\n    let colorFunc = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].translateColorThemeConfigure(chartConfigures.chart_color_theme, {\n      chart_custom_theme: chartConfigures.chart_custom_theme\n    });\n    // 获取隐藏聚合方式的标志配置, 即所有属性列的聚合方式不显示在标签内\n    let hideOperatorFlag = false;\n    if (chartConfigures.hide_operator_label) hideOperatorFlag = true;\n    // 获取图形的字体大小配置\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 10,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    chartFontSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].translateFontSizeConfigure(chartFontSize) || 10;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n      containerResult.svgJqDom.style.color = chartFontColor;\n      containerResult.svgJqDom.style.fill = chartFontColor;\n    } else {\n      container.style.color = '';\n      container.style.fill = '';\n      containerResult.svgJqDom.style.color = '';\n      containerResult.svgJqDom.style.fill = '';\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n    let theXTitleFontSize = chartConfigures.x_axis_title_style && parseInt(chartConfigures.x_axis_title_style.fontSize) || chartFontSize || 10,\n      //  X轴标题字体大小\n      theXAxisFontSize = chartConfigures.x_axis_label_style && parseInt(chartConfigures.x_axis_label_style.fontSize) || chartFontSize || 10,\n      //  X轴刻度字体大小， 默认使用图形统一的字体大小\n      theYTitleFontSize = chartConfigures.y_axis_title_style && parseInt(chartConfigures.y_axis_title_style.fontSize) || chartFontSize || 10,\n      //  Y轴标题字体大小\n      theYAxisFontSize = chartConfigures.y_axis_label_style && parseInt(chartConfigures.y_axis_label_style.fontSize) || chartFontSize || 10,\n      //  Y轴刻度字体大小， 默认使用图形统一的字体大小\n      theLegendFontSize = chartConfigures.legend_font_style && parseInt(chartConfigures.legend_font_style.fontSize) || chartFontSize || 10;\n\n    // 先填充图例区域 [ 绘制图例列表，翻页 ，宽度高度限制 ]\n    // 计算图例列表\n    let showLegendLength = 0,\n      legendValueList = [],\n      defaultLegendList = [];\n    let savedLegendColorConfig = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].translateLegendColor({\n      curYAxis: chartAxis.curYAxis,\n      configureLegendList: chartConfigures.chart_legend_list\n    });\n    if (chartAxis.curLegend) {\n      chartAxis.curLegend.distincts && chartAxis.curLegend.distincts.forEach(function (legendName, index) {\n        let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('legendAxis', legendName); // \"column-value-\" + legendName ,\n        let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n          return theConfig.id === theLegendId;\n        });\n        legendValueList.push({\n          type: 'columnValue',\n          legend: legendName,\n          legendTranslateName: _DataFocusMethod.formatTextData(legendName, chartAxis.curLegend),\n          id: theLegendId,\n          index: index,\n          shape: theConfigLegend && theConfigLegend.shape,\n          color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n          show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n        });\n        defaultLegendList.push({\n          type: 'columnValue',\n          legend: legendName,\n          legendTranslateName: _DataFocusMethod.formatTextData(legendName, chartAxis.curLegend),\n          id: theLegendId,\n          index: index,\n          shape: chartConfigures.legend_shape_type,\n          color: colorFunc(index),\n          show: true\n        });\n      });\n    } else if (chartAxis.curYAxis) {\n      chartAxis.curYAxis.forEach(function (yAxis, index) {\n        let theYLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('yAxis', yAxis.idx); //  \"measure-column-id-\" + yAxis.col_id ,\n        let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n          return theConfig.id === theYLegendId;\n        });\n        legendValueList.push({\n          type: 'measureColumn',\n          legend: _DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }),\n          id: theYLegendId,\n          index: index,\n          shape: theConfigLegend && theConfigLegend.shape,\n          color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n          show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n        });\n        defaultLegendList.push({\n          type: 'measureColumn',\n          legend: _DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }),\n          id: _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('yAxis', yAxis.idx),\n          //  \"measure-column-id-\" + yAxis.col_id ,\n          index: index,\n          color: colorFunc(index),\n          shape: chartConfigures.legend_shape_type,\n          show: true\n        });\n      });\n    }\n    legendValueList && legendValueList.forEach(function (theLegend) {\n      if (theLegend.show) showLegendLength++;\n    });\n    // 如果没有显示的图例，则至少保证显示一个\n    if (!showLegendLength) {\n      showLegendLength = 1;\n      legendValueList[0] && (legendValueList[0].show = true);\n    }\n    // 画图例元素,先将图例元素画完成后，才可以计算SVG的宽度与高度\n    if (hasLegendFlag && containerResult.legendContainer) {\n      // 画图例元素\n      let drawLegendFlag = !!(chartConfigures.show_legend === undefined || chartConfigures.show_legend);\n      if (drawLegendFlag) {\n        _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].drawAttributeLegend({\n          container: containerResult.legendContainer,\n          chartWidth: chartWidth,\n          chartHeight: chartHeight,\n          legendPosition: legendPosition,\n          legendMaxWidthInVertical: chartConfigures.legend_position_width,\n          legendValueList: legendValueList,\n          legendFontSize: theLegendFontSize,\n          legendFontColor: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontColor,\n          legendBoldStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontBold,\n          legendItalicStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontItalic,\n          legendOffsetSpace: chartConfigures.legend_position_offset,\n          legendIntervalSpace: chartConfigures.legend_position_interval,\n          legendShapeType: _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].translateLegendShapeConfigure(chartConfigures && chartConfigures.legend_shape_type),\n          changeLegendColorFlag: !conf.inPinboard,\n          chooseButtonText: self.getPluginKeyText(),\n          changeLegendColorCallback: function (options) {\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              // 修改图形中的图例配置，并将其传给配置组件，然后由配置组件触发画图， 而不是在此处直接画图\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend) {\n                let theMatchedConfigure = chartConfigures.chart_legend_list && chartConfigures.chart_legend_list.find(function (configure) {\n                  return configure.id === theMatchedLegend.id || configure.legend === theMatchedLegend.legend;\n                });\n                if (theMatchedConfigure) {\n                  theMatchedConfigure.color = options.color || undefined;\n                } else {\n                  chartConfigures.chart_legend_list = chartConfigures.chart_legend_list || [];\n                  chartConfigures.chart_legend_list.push({\n                    id: theMatchedLegend.id,\n                    legend: theMatchedLegend.legend,\n                    color: options.color || undefined\n                  });\n                }\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"chart_legend_list\",\n                  value: chartConfigures.chart_legend_list\n                });\n              }\n            }\n          },\n          // 点击 显示/隐藏 图例\n          mousedownEventCallback: function (options) {\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              // 修改图形中的图例配置，并将其传给配置组件，然后由配置组件触发画图， 而不是在此处直接画图\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend) {\n                let theMatchedConfigure = chartConfigures.chart_legend_list && chartConfigures.chart_legend_list.find(function (configure) {\n                  return configure.id === theMatchedLegend.id || configure.legend === theMatchedLegend.legend;\n                });\n                let theShownLegendLength = legendValueList.filter(function (legend) {\n                  return legend.show;\n                }).length;\n                // 如果只有一个图例显示，则不再隐藏最后一个了\n                if (theShownLegendLength === 1 && !!theMatchedLegend.show) return false;\n                if (theMatchedConfigure) {\n                  theMatchedConfigure.show = !theMatchedLegend.show;\n                } else {\n                  chartConfigures.chart_legend_list = chartConfigures.chart_legend_list || [];\n                  chartConfigures.chart_legend_list.push({\n                    id: theMatchedLegend.id,\n                    legend: theMatchedLegend.legend,\n                    show: !theMatchedLegend.show\n                  });\n                }\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"chart_legend_list\",\n                  value: chartConfigures.chart_legend_list\n                });\n              }\n            }\n          },\n          mouseoverEventCallback: function (options) {\n            // 高亮当前图例所在的图形元素，置灰其他元素\n            options = options || {};\n            if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n              let theMatchedLegend = legendValueList[options.legendIndex];\n              if (theMatchedLegend && theMatchedLegend.id && theMatchedLegend.show) {\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-columns rect\").attr(\"class\", \"fill-grey\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-columns rect[legendId='\" + theMatchedLegend.id + \"']\").attr(\"class\", \"\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-label text\").attr(\"class\", \"fill-grey\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-label text[legendId='\" + theMatchedLegend.id + \"']\").attr(\"class\", \"\");\n                if (options.legendDom) {\n                  $(options.legendDom).find(\"svg\").removeClass(\"fill-grey\");\n                  $(options.legendDom).siblings().find(\"svg\").addClass(\"fill-grey\");\n                }\n              }\n            }\n          },\n          mouseoutEventCallback: function (options) {\n            options = options || {};\n            // // 恢复高亮所有图例的图形元素\n            _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .fill-grey\").attr(\"class\", \"\");\n            if (options.legendDom) $(options.legendDom).parent().find(\"svg\").removeClass(\"fill-grey\");\n          }\n        });\n      }\n    }\n\n    // 再填充画图区域\n    // 0. 先计算Y轴刻度比例尺[ 左Y轴比例尺 及 右Y轴比例尺 及 左右Y轴宽度 ]\n    if (!chartAxis.curYAxis || !chartAxis.curYAxis.length) {\n      console.log('当前图形Y轴配置异常');\n      return false;\n    }\n    let svgDrawWidth = $(containerResult.svgJqDom).width(),\n      svgDrawHeight = $(containerResult.svgJqDom).height();\n    let showYTitleFlag = !inPinboardFlag;\n    if (!chartConfigures.y_axis_title_visible || chartConfigures.y_axis_title_visible === 'system_auto_default') {\n      showYTitleFlag = !inPinboardFlag;\n    } else {\n      showYTitleFlag = !!(chartConfigures.y_axis_title_visible === \"option_title_visible_show\");\n    }\n    let yAxisBasicMessage = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].calcMeasureAxisBasicMessage({\n      direction: 'vertical',\n      language: systemLanguage,\n      axisFontSize: theYAxisFontSize,\n      drawWidth: svgDrawWidth,\n      drawHeight: svgDrawHeight,\n      firstMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateMeasureAxis(chartAxis.curYAxis.filter(function (axis) {\n        return axis.direction !== 'right';\n      }), {\n        axisType: 'normal',\n        scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateScaleType(chartConfigures.measure_scale_type),\n        min: chartConfigures.measure_scale_min,\n        max: chartConfigures.measure_scale_max,\n        definedMin: chartConfigures.measure_scale_defined_min || 0,\n        definedSeparate: chartConfigures.measure_scale_step,\n        definedStep: chartConfigures.measure_scale_step_number,\n        definedScaleFormat: chartConfigures.measure_left_y_configure\n      }),\n      secondMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateMeasureAxis(chartAxis.curYAxis.filter(function (axis) {\n        return axis.direction === 'right';\n      }), {\n        axisType: 'normal',\n        scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateScaleType(chartConfigures.measure_scale_type_right),\n        min: chartConfigures.measure_scale_min_right,\n        max: chartConfigures.measure_scale_max_right,\n        definedMin: chartConfigures.measure_scale_defined_min_right || 0,\n        definedSeparate: chartConfigures.measure_scale_step_right,\n        definedStep: chartConfigures.measure_scale_step_number_right,\n        definedScaleFormat: chartConfigures.measure_right_y_configure\n      }),\n      showAxisTitleFlag: showYTitleFlag,\n      // Y轴标签没有配置的情况下, 默认是显示的\n      measureAxisVisible: chartConfigures.y_axis_label_visible === undefined ? true : chartConfigures.y_axis_label_visible,\n      titleFontSize: theYTitleFontSize,\n      maxLabelWidthPercent: chartConfigures.y_axis_label_max_width_percent,\n      alignZeroFlag: chartConfigures.measure_scale_parallel\n    });\n\n    // 1. 计算是否有标准线及 标准线的宽度\n    let hasMarkerFlag = !hasLegendFlag && chartAxis.curYAxis.length === 1; //  没有图例的情况下[只有一个yAxis时]就有可以有标准线\n    hasMarkerFlag = hasMarkerFlag && !chartConfigures.grid_remove_standard_line; //  是否配置了移除标准线\n    let theMarkerBasicMessage;\n    if (hasMarkerFlag) {\n      theMarkerBasicMessage = _pc_assets_js_charts_components_MarkerComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"].calcMeasureMarkerMessage({\n        direction: 'vertical',\n        measureAxis: chartAxis.curYAxis,\n        markerFontSize: chartFontSize,\n        drawWidth: svgDrawWidth,\n        drawHeight: svgDrawHeight,\n        scaleFormat: yAxisBasicMessage.firstMeasure.measureAxis && yAxisBasicMessage.firstMeasure.measureAxis.yScaleFormat,\n        getI18nKey: getI18nKeyFunc\n      });\n      if (!theMarkerBasicMessage || !theMarkerBasicMessage.hasMarkerFlag) hasMarkerFlag = false;\n    }\n\n    // 2. 解析数据为当前画图数据 [ 如果当前图形的处理数据缓存过，其当前只是窗口变化，则使用缓存数据不再计算数据 ]\n    let translateData;\n    if (options.isResize && cachedTranslateData && cachedTranslateData.hashKey === tableData.hash_key) {\n      // 如果当前使用的X轴类型与配置的X轴类型不一致，则需要重新解析数据\n      let currentXLabelType = chartConfigures.x_axis_draw_type === 'option_select_x_axis_dot_line' ? 'dotLine' : cachedTranslateData.autoXLabelType;\n      if (cachedTranslateData.xLabelType !== currentXLabelType) {\n        // 不需要使用缓存数据\n      } else {\n        // console.log('使用缓存数据');\n        translateData = cachedTranslateData;\n      }\n    }\n    // 如果没有使用缓存数据，则重新解析数据\n    if (!translateData) {\n      translateData = _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].translateXYLegendBasicData({\n        tableData: tableData,\n        chartAxis: chartAxis,\n        xLabelType: chartConfigures.x_axis_draw_type === 'option_select_x_axis_dot_line' ? 'dotLine' : 'auto',\n        language: systemLanguage\n      });\n      // 暂时使用_DataFocusChart对象实例中的defaultConf兑现过来暂存缓存\n      conf.cachedTranslateData = translateData;\n    }\n\n    // 翻页时需要重新画以下图形部分 / 缩放时也需要重新画以下图形部分 ---------------------------------------------------------- //\n\n    // 获取数据标签的配置\n    let labelFontSize = chartConfigures.label_text_font_style && parseInt(chartConfigures.label_text_font_style.fontSize) || Math.max(chartFontSize - 2, 10) || 10,\n      showLabelFlag = false,\n      labelPosition = 'default',\n      labelRotation = 0,\n      labelVisibleMap = 'all',\n      allowOverlap = false;\n    if (chartConfigures.label_text_visible) {\n      showLabelFlag = true;\n    }\n    if (chartConfigures.label_text_column_position) {\n      switch (chartConfigures.label_text_column_position) {\n        case 'option_label_position_in':\n          labelPosition = 'in';\n          break;\n        case 'option_label_position_center':\n          labelPosition = 'center';\n          break;\n        case 'option_label_position_out':\n          labelPosition = 'out';\n          break;\n        default:\n          labelPosition = 'default';\n          break;\n      }\n    }\n    if (chartConfigures.label_text_rotation_angle) {\n      switch (chartConfigures.label_text_rotation_angle) {\n        case 'option_label_rotation_90':\n          labelRotation = 90;\n          break;\n        case 'option_label_rotation_270':\n          labelRotation = 270;\n          break;\n        default:\n          labelRotation = 0;\n          break;\n      }\n    }\n    if (chartConfigures.label_text_visible_items) {\n      switch (chartConfigures.label_text_visible_items) {\n        case 'option_label_visible_all':\n          labelVisibleMap = 'all';\n          break;\n        case 'option_label_visible_standard':\n          labelVisibleMap = 'standard';\n          break;\n        default:\n          labelVisibleMap = 'all';\n          break;\n      }\n    }\n    if (chartConfigures.label_text_allow_overlap) {\n      allowOverlap = true;\n    }\n\n    // 是否显示X轴标题的配置\n    let showXTitleFlag = !inPinboardFlag; //  用户没有配置X轴或配置为自动的情况下，系统按是否是看板自动分配\n    if (!chartConfigures.x_axis_title_visible || chartConfigures.x_axis_title_visible === 'system_auto_default') {\n      showXTitleFlag = !inPinboardFlag;\n    } else {\n      showXTitleFlag = !!(chartConfigures.x_axis_title_visible === \"option_title_visible_show\");\n    }\n    let animateFlag = !chartConfigures.animation_forbidden,\n      //  是否禁止动画的标志\n      colorAssignedToScaleFlag = !!chartConfigures.chart_color_assigned_to_x_scale,\n      //  在没有图例且单个Y轴的情况下，将颜色按X轴刻度分配的标志\n      thePositiveOutlierColor = '#0000ff',\n      //  离群分析正向颜色\n      theNegativeOutlierColor = '#eeeeee'; //  离群分析负向颜色\n\n    const duration = {\n      enter: animateFlag ? 300 : 0,\n      update: animateFlag ? 300 : 0,\n      exit: animateFlag ? 300 : 0,\n      columnEnter: animateFlag ? 800 : 0,\n      // 柱体进入\n      columnHover: animateFlag ? 100 : 0,\n      // 柱体悬浮\n\n      columnLabelEnter: animateFlag ? 300 : 0\n    };\n\n    // 如果当前图形可以配置将颜色分配给X轴刻度，则计算当前X轴刻度的颜色\n    let theXLabelColorList = [],\n      defaultXLabelColorList = [];\n    if (!hasLegendFlag) {\n      let theLabelColorConfig = chartConfigures.chart_custom_label_color;\n      translateData.xLabelDistinct && translateData.xLabelDistinct.forEach(function (xLabel, index) {\n        let theMatchedColorConfig = theLabelColorConfig && theLabelColorConfig.find(function (theConfig) {\n          return theConfig.legend === xLabel;\n        });\n        theXLabelColorList.push({\n          id: xLabel,\n          legend: xLabel,\n          //  因为使用的legendList组件，所以显示名命名都是legend\n          color: theMatchedColorConfig && theMatchedColorConfig.color || colorFunc(index)\n        });\n        defaultXLabelColorList.push({\n          id: xLabel,\n          legend: xLabel,\n          color: colorFunc(index)\n        });\n      });\n    }\n\n    // 柱状图的柱宽比例\n    let columnWidthPercent = (parseFloat(chartConfigures.chart_column_width_percent_1) || 60) / 100; //  柱状图柱子占刻度宽的比例\n\n    /**\r\n     * frameOptions 主要用于翻页 及 缩放时的参数传递\r\n     * @param frameOptions\r\n     *      {\r\n     *          type    -   操作类型    page: 翻页； zoom: 缩放 ； select: 区域选择 ； 无：是初始化\r\n     *          start   -   X刻度开始的索引\r\n     *          steps   -   X轴可以放的X刻度数量\r\n     *      }\r\n     * */\n    let drawAColumnFrame = function (frameOptions) {\n      frameOptions = frameOptions || {};\n      if (!yAxisBasicMessage || !yAxisBasicMessage.firstMeasure) return false;\n\n      // 3. 填充X轴刻度值 [ 先通过Y轴刻度宽度值 及 标准线宽度值，计算X轴刻度的宽度 ， 画完X轴刻度后才可以确认X轴刻度的高度]\n      let measureSeparate = 5,\n        //  刻度值与轴之间的间隔[ Y轴刻度与Y轴线之间的间隔 ]\n        attributeSeparate = 2,\n        //  属性刻度与轴之间的间隔 [ X轴刻度与Y轴最小的一条线的间隔 ]\n        titleSeparate = 5,\n        //  轴标题与轴刻度之间的间隔 [ X轴标题与X轴刻度的间隔 ； Y轴标题与Y轴刻度的间隔 ]\n        firstTitleWidth = yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.showTitleFlag ? (yAxisBasicMessage.firstMeasure.measureTitleSize || 0) + titleSeparate : 0,\n        firstMeasureWidth = (yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.measureTickWidth || 0) + measureSeparate,\n        secondTitleWidth = yAxisBasicMessage.secondMeasure && yAxisBasicMessage.secondMeasure.showTitleFlag ? (yAxisBasicMessage.secondMeasure.measureTitleSize || 0) + titleSeparate : 0,\n        secondMeasureWidth = yAxisBasicMessage.secondMeasure ? yAxisBasicMessage.secondMeasure.measureTickWidth + measureSeparate : 0,\n        markerMessageWidth = theMarkerBasicMessage && theMarkerBasicMessage.markerMaxWidth || 0,\n        scaleAttributeWidth = svgDrawWidth - firstMeasureWidth - firstTitleWidth - secondMeasureWidth - secondTitleWidth - markerMessageWidth;\n      let start = parseInt(frameOptions.start),\n        end = 0,\n        steps = parseInt(frameOptions.steps) || 0;\n      // 如果没有传入steps，则使用配置值手动计算每页的数量\n      if (!steps) {\n        // 翻页/或初始化\n        // 计算是否有翻页，翻页的pageSize 及 每页的柱宽\n        let minimumColumnWidth = parseFloat(chartConfigures.chart_column_minimum_width) || 5,\n          definedColumnWidth = parseFloat(chartConfigures.chart_column_width);\n        minimumColumnWidth = Math.max(1, minimumColumnWidth);\n        let definedSteps = parseInt(chartConfigures.chart_default_step);\n        // 配置了固定柱宽\n        if (!isNaN(definedColumnWidth)) {\n          steps = Math.floor(scaleAttributeWidth / (definedColumnWidth * legendValueList.length / columnWidthPercent));\n          steps = Math.min(steps, translateData.xLabelDistinct.length);\n          steps = Math.max(steps, 1); //  至少有一个刻度可以画图\n\n          // 如果当前页展示了所有数据，则按照柱子的实际宽度显示；如果有翻页，则按照实际宽度自适应柱宽，固定柱宽值会出现一定的误差\n          if (steps === translateData.xLabelDistinct.length) {\n            scaleAttributeWidth = Math.min(scaleAttributeWidth, steps * (definedColumnWidth * legendValueList.length));\n          }\n        }\n        // 配置了固定分页数\n        else if (!isNaN(definedSteps)) {\n          steps = definedSteps;\n          steps = Math.min(steps, translateData.xLabelDistinct.length);\n        }\n        // 默认情况下使用最小刻度宽计算分页数\n        else {\n          // 使用最小柱宽计算每页的pageSize\n          steps = Math.floor(scaleAttributeWidth / (minimumColumnWidth * (translateData.legendLength || translateData.yLength || 1)));\n        }\n      }\n\n      // 检正start , step , end的值\n      steps = Math.min(steps, translateData.xLabelDistinct.length);\n      steps = Math.max(steps, 1); //  至少有一个刻度可以画图\n\n      // 默认情况下，需要依据x_axis_right_first_flag来判断start的值： 优先画右侧数据,还是优先画左侧数据\n      if (isNaN(start) || start === undefined || start === null) {\n        if (chartConfigures.x_axis_right_first_flag) {\n          // 优先画右侧数据\n          start = translateData.xLabelDistinct.length - steps;\n          start = Math.max(0, start);\n        } else {\n          start = 0;\n        }\n      }\n      // end就是起点加步长\n      end = start + steps;\n      if (end > translateData.xLabelDistinct.length) {\n        end = translateData.xLabelDistinct.length;\n        start = end - steps;\n      }\n\n      // 画X轴标题[ 如果看板中显示 或者 强制显示的情况 ]\n      let attributeTitleHeight = 0,\n        //  X轴横向摆放的高度\n        scalePaddingTop = 10; //  垂直方向的刻度轴顶部需要预留10px空白\n\n      const xTitleContainer = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).select('g.title.horizontal-title');\n      if (xTitleContainer) {\n        xTitleContainer.remove();\n      }\n      if (showXTitleFlag) {\n        let theSettingXTitleText = chartConfigures.x_axis_title_content,\n          theDefaultXTitleText = [];\n        chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n          theDefaultXTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, xAxis, {\n            hideOperator: hideOperatorFlag\n          }));\n        });\n        let theXTitleSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getStrSizeByCanvas('string', \"KKK\", {\n          fontSize: theXTitleFontSize\n        });\n        _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].drawAxisTitle({\n          svgContainer: containerResult.svgJqDom,\n          direction: 'horizontal',\n          titleText: theSettingXTitleText || theDefaultXTitleText.join(','),\n          //  标题内容\n          titleAlignment: chartConfigures.x_axis_title_alignment || 'center',\n          titleFontSize: theXTitleFontSize,\n          titleFontColor: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontColor,\n          titleFontBold: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontBold,\n          titleFontItalic: chartConfigures.x_axis_title_style && chartConfigures.x_axis_title_style.fontItalic,\n          translateTop: svgDrawHeight - theXTitleSize.height,\n          translateLeft: firstTitleWidth + firstMeasureWidth,\n          titleHeight: theXTitleSize.height,\n          titleWidth: scaleAttributeWidth,\n          titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? chartAxis.curXAxis : null\n        });\n        attributeTitleHeight = theXTitleSize.height + titleSeparate;\n      }\n      // 画X轴刻度\n      let attributeAxis = _pc_assets_js_charts_components_AttributeAxisComponent__WEBPACK_IMPORTED_MODULE_8__[\"default\"].drawHorizontalAttributeAxis({\n        axisType: translateData.xLabelType,\n        axisTimeType: translateData.xAxisTimeType,\n        svgContainer: containerResult.svgJqDom,\n        drawWidth: svgDrawWidth - firstTitleWidth - secondTitleWidth,\n        drawHeight: svgDrawHeight - attributeTitleHeight,\n        axisFontSize: theXAxisFontSize,\n        axisFontColor: chartConfigures.x_axis_label_style && chartConfigures.x_axis_label_style.fontColor,\n        axisFontBold: chartConfigures.x_axis_label_style && chartConfigures.x_axis_label_style.fontBold,\n        axisFontItalic: chartConfigures.x_axis_label_style && chartConfigures.x_axis_label_style.fontItalic,\n        position: 'bottom',\n        attributeValueList: translateData.xLabelDistinct,\n        attributeValueMap: translateData.xLabelDistinctMapping,\n        start: start,\n        end: end,\n        // X轴标签没有配置的情况下, 默认是显示的\n        attributeAxisVisible: chartConfigures.x_axis_label_visible === undefined ? true : chartConfigures.x_axis_label_visible,\n        hoverTranslateLeft: firstTitleWidth + firstMeasureWidth,\n        hoverTranslateTop: scalePaddingTop,\n        scaleWidth: scaleAttributeWidth,\n        maxLabelHeightPercent: chartConfigures.x_axis_label_max_height_percent,\n        rotate: chartConfigures.x_axis_label_dot_line_rotation_value,\n        labelStepWidth: chartConfigures.x_axis_label_dot_line_space_width\n      });\n      if (!attributeAxis || !attributeAxis.attributeContainer) {\n        console.log('画点X属性轴异常');\n        return false;\n      }\n      if (attributeAxis.attributeContainer) {\n        attributeAxis.attributeContainer.attr(\"transform\", \"translate(\" + (firstTitleWidth + firstMeasureWidth) + \" , \" + (svgDrawHeight - (attributeAxis.maxLabelHeight || 0) - attributeTitleHeight) + \")\");\n      }\n\n      // 画柱形图\n      let theColumnWidth = attributeAxis.rangeBand * columnWidthPercent / (showLegendLength || 1),\n        //  只显示显示的图例的柱子\n        theOutPadding = attributeAxis.rangeBand * (1 - columnWidthPercent);\n\n      // 创建需要超出区域截取的容器，该容器上不允许增加transform的属性，会影响clipPath的作用位置\n      let theChartDetailContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).append(\"g\").attr(\"class\", \"chart-detail\");\n      // ======= 绘制柱体形状 ==========================\n      // 有图例的情况， 按图例项画多组柱形图\n      let xLabelDatas = {}; //  按X刻度索引当前的画的所有数值 ， 供MouseOverChartComponent.handleSvgMouseOverEvent使用\n\n      // 用来计算当前页面Y轴的最大值和最小值\n      const currentPageData = [];\n      if (translateData.datasType === 'legend') {\n        translateData.legendDistinct && translateData.legendDistinct.forEach(function (theLegendStr, legendIndex) {\n          let theLegendData = translateData.datas[theLegendStr];\n          let theLegendConfig = legendValueList[legendIndex];\n          if (!theLegendConfig.show) return false;\n          if (!theLegendData) return false;\n          let currentPageLegendData = theLegendData && theLegendData.filter(function (data) {\n            let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n            let theIndex = theMappingObj && theMappingObj.index || 0;\n            return theIndex >= start && theIndex < end;\n          });\n          currentPageData.push(...currentPageLegendData);\n        });\n      }\n      // 无图例的情况，多组Y轴\n      else {\n        let theLegendData = translateData.datas;\n        // 筛选出当前页的数据\n        let currentPageLegendData = theLegendData && theLegendData.filter(function (data) {\n          let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n          let theIndex = theMappingObj && theMappingObj.index || 0;\n          return theIndex >= start && theIndex < end;\n        });\n        currentPageData.push(...currentPageLegendData);\n      }\n\n      // 计算当前页面下的Y轴信息。主要是值域自适应\n      yAxisBasicMessage = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].calcMeasureAxisBasicMessage({\n        direction: 'vertical',\n        language: systemLanguage,\n        axisFontSize: theYAxisFontSize,\n        drawWidth: svgDrawWidth,\n        drawHeight: svgDrawHeight,\n        firstMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateMeasureAxis(chartAxis.curYAxis.filter(function (axis) {\n          return axis.direction !== 'right';\n        }), {\n          axisType: 'normal',\n          useDataFlag: true,\n          tableData: {\n            columns: currentPageData.map(d => d.rowData)\n          },\n          scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateScaleType(chartConfigures.measure_scale_type),\n          min: chartConfigures.measure_scale_min,\n          max: chartConfigures.measure_scale_max,\n          definedMin: chartConfigures.measure_scale_defined_min || 0,\n          definedSeparate: chartConfigures.measure_scale_step,\n          definedStep: chartConfigures.measure_scale_step_number,\n          definedScaleFormat: chartConfigures.measure_left_y_configure\n        }),\n        secondMeasureAxis: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateMeasureAxis(chartAxis.curYAxis.filter(function (axis) {\n          return axis.direction === 'right';\n        }), {\n          axisType: 'normal',\n          useDataFlag: true,\n          tableData: {\n            columns: currentPageData.map(d => d.rowData)\n          },\n          scaleType: _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].translateScaleType(chartConfigures.measure_scale_type_right),\n          min: chartConfigures.measure_scale_min_right,\n          max: chartConfigures.measure_scale_max_right,\n          definedMin: chartConfigures.measure_scale_defined_min_right || 0,\n          definedSeparate: chartConfigures.measure_scale_step_right,\n          definedStep: chartConfigures.measure_scale_step_number_right,\n          definedScaleFormat: chartConfigures.measure_right_y_configure\n        }),\n        showAxisTitleFlag: showYTitleFlag,\n        // Y轴标签没有配置的情况下, 默认是显示的\n        measureAxisVisible: chartConfigures.y_axis_label_visible === undefined ? true : chartConfigures.y_axis_label_visible,\n        titleFontSize: theYTitleFontSize,\n        maxLabelWidthPercent: chartConfigures.y_axis_label_max_width_percent,\n        alignZeroFlag: chartConfigures.measure_scale_parallel\n      });\n\n      // 4. 填充Y轴标题 及 刻度 [ 通过X轴刻度高度确定Y轴比例尺的高度，画Y轴刻度，返回Y轴刻度比例尺 ]\n      let scaleMeasureHeight = svgDrawHeight - (attributeAxis.maxLabelHeight || 0) - attributeTitleHeight - attributeSeparate - scalePaddingTop;\n\n      // 画第一个Y轴标题\n      const firstYTitleContainer = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).select('g.title.vertical-title.first-y-title');\n      if (firstYTitleContainer) {\n        firstYTitleContainer.remove();\n      }\n      if (yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.showTitleFlag) {\n        let theDefaultTitleText = [];\n        let theMeasureAxis = yAxisBasicMessage.firstMeasure.measureAxis;\n        theMeasureAxis && theMeasureAxis.axisList && theMeasureAxis.axisList.forEach(function (yAxis) {\n          theDefaultTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }));\n        });\n        let theSettingTitleText = chartConfigures.y_axis_title_content;\n        _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].drawAxisTitle({\n          verticalTitleClass: 'first-y-title',\n          svgContainer: containerResult.svgJqDom,\n          direction: 'vertical',\n          titleText: theSettingTitleText || theDefaultTitleText.join(','),\n          //  标题内容\n          titleAlignment: chartConfigures.y_axis_title_alignment || 'center',\n          titleFontSize: theYTitleFontSize,\n          titleFontColor: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontColor,\n          titleFontBold: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontBold,\n          titleFontItalic: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontItalic,\n          translateLeft: 0,\n          translateTop: scalePaddingTop,\n          titleHeight: scaleMeasureHeight,\n          titleWidth: yAxisBasicMessage.firstMeasure.measureTitleSize,\n          titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? theMeasureAxis && theMeasureAxis.axisList : null\n        });\n      }\n      // 画第二个Y轴标题\n      const secondYTitleContainer = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).select('g.title.vertical-title.second-y-title');\n      if (secondYTitleContainer) {\n        secondYTitleContainer.remove();\n      }\n      if (yAxisBasicMessage.secondMeasure && yAxisBasicMessage.secondMeasure.showTitleFlag) {\n        let theDefaultTitleText = [];\n        let theMeasureAxis = yAxisBasicMessage.secondMeasure.measureAxis;\n        theMeasureAxis && theMeasureAxis.axisList && theMeasureAxis.axisList.forEach(function (yAxis) {\n          theDefaultTitleText.push(_DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n            hideOperator: hideOperatorFlag\n          }));\n        });\n        let theSettingTitleText = chartConfigures.right_y_axis_title_content;\n        _pc_assets_js_charts_components_TitleComponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"].drawAxisTitle({\n          verticalTitleClass: 'second-y-title',\n          svgContainer: containerResult.svgJqDom,\n          direction: 'vertical',\n          titleText: theSettingTitleText || theDefaultTitleText.join(','),\n          //  标题内容\n          titleAlignment: chartConfigures.y_axis_title_alignment || 'center',\n          //  标题内容\n          titleFontSize: theYTitleFontSize,\n          titleFontColor: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontColor,\n          titleFontBold: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontBold,\n          titleFontItalic: chartConfigures.y_axis_title_style && chartConfigures.y_axis_title_style.fontItalic,\n          translateLeft: firstMeasureWidth + firstTitleWidth + scaleAttributeWidth + secondMeasureWidth + titleSeparate,\n          translateTop: scalePaddingTop,\n          titleHeight: scaleMeasureHeight,\n          titleWidth: yAxisBasicMessage.secondMeasure.measureTitleSize,\n          titleAxisList: chartConfigures._DF_SYS_ALLOW_HEADER_CONFIG ? theMeasureAxis && theMeasureAxis.axisList : null\n        });\n      }\n\n      // 画Y轴刻度\n      let measureAxis = _pc_assets_js_charts_components_MeasureAxisComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"].drawMeasureAxis({\n        svgContainer: containerResult.svgJqDom,\n        drawWidth: svgDrawWidth,\n        drawHeight: svgDrawHeight,\n        axisFontSize: theYAxisFontSize,\n        axisFontColor: chartConfigures.y_axis_label_style && chartConfigures.y_axis_label_style.fontColor,\n        axisFontBold: chartConfigures.y_axis_label_style && chartConfigures.y_axis_label_style.fontBold,\n        axisFontItalic: chartConfigures.y_axis_label_style && chartConfigures.y_axis_label_style.fontItalic,\n        direction: 'vertical',\n        separate: measureSeparate,\n        scaleHeight: scaleMeasureHeight,\n        scaleLineWidth: scaleAttributeWidth,\n        firstMeasure: yAxisBasicMessage.firstMeasure,\n        secondMeasure: yAxisBasicMessage.secondMeasure,\n        // 默认显示网格线\n        showAxisLineFlag: chartConfigures.grid_show_all_line === undefined ? true : chartConfigures.grid_show_all_line,\n        // 网格线样式\n        strokeLineStyle: chartConfigures.grid_line_style,\n        // 只显示零线\n        showOnlyZeroLineFlag: !!chartConfigures.grid_show_only_zero_line,\n        // 零线样式\n        zeroStrokeLineStyle: chartConfigures.grid_zero_line_style\n      });\n      measureAxis.measureContainer.attr(\"transform\", \"translate( \" + firstTitleWidth + \" , \" + scalePaddingTop + \")\");\n\n      // 5. 填充图形 [ 依据X轴高度，Y轴宽度 及 标准线的宽度 确定柱状图形区域的宽度 ]\n      // 画截取区域\n      let chartClipDefId = _pc_assets_js_charts_components_SvgClipPathComponent__WEBPACK_IMPORTED_MODULE_10__[\"default\"].drawClipPath({\n        svgContainer: containerResult.svgJqDom,\n        chartUUID: chartUUID,\n        width: scaleAttributeWidth,\n        height: scaleMeasureHeight + scalePaddingTop,\n        x: firstTitleWidth + firstMeasureWidth,\n        y: 0\n      });\n      theChartDetailContainer.attr(\"clip-path\", \"url(#\" + chartClipDefId + \")\");\n\n      // 画标准线\n      const existedMarkerLine = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).selectAll('g.marker-line');\n      if (!existedMarkerLine.empty()) {\n        existedMarkerLine.remove();\n      }\n      if (hasMarkerFlag && theMarkerBasicMessage) {\n        _pc_assets_js_charts_components_MarkerComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"].drawHorizontalMarkerLine({\n          svgContainer: containerResult.svgJqDom,\n          markerTextList: theMarkerBasicMessage.markerTextList,\n          translateLeft: firstTitleWidth + firstMeasureWidth,\n          translateTop: scalePaddingTop,\n          markerFontSize: chartFontSize,\n          maxWidth: theMarkerBasicMessage.markerMaxWidth,\n          lineWidth: scaleAttributeWidth,\n          scaleHeight: scaleMeasureHeight,\n          scaleFunc: measureAxis.firstMeasureScaleFunc,\n          markerLineColor: colorFunc(0)\n        });\n      }\n      // 画目标线\n      const existedGoalLine = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).selectAll('g.goal-line');\n      if (!existedGoalLine.empty()) {\n        existedGoalLine.remove();\n      }\n      chartAxis.curYAxis && chartAxis.curYAxis.forEach(function (yAxis) {\n        if (_DataFocusMethod.isPureNumber(yAxis.goal)) {\n          // 设置目标值后，需要画目标线\n          if (yAxis.direction !== 'right') {\n            let theScaleFunc = measureAxis.firstMeasureScaleFunc,\n              yScaleFormat = measureAxis.firstMeasure && measureAxis.firstMeasure.yScaleFormat;\n            _pc_assets_js_charts_components_ReferenceLineComponent__WEBPACK_IMPORTED_MODULE_12__[\"default\"].drawHorizontalGoalLine({\n              svgContainer: containerResult.svgJqDom,\n              position: \"left\",\n              translateLeft: firstTitleWidth + firstMeasureWidth,\n              translateTop: scalePaddingTop + theScaleFunc(yAxis.goal),\n              lineWidth: scaleAttributeWidth,\n              hoverText: getI18nKeyFunc(\"chart_conf_goal\") + ': ' + _DataFocusMethod.formatData(yAxis.goal, yScaleFormat)\n            });\n          } else {\n            let theScaleFunc = measureAxis.secondMeasureScaleFunc,\n              yScaleFormat = measureAxis.secondMeasure && measureAxis.secondMeasure.yScaleFormat;\n            _pc_assets_js_charts_components_ReferenceLineComponent__WEBPACK_IMPORTED_MODULE_12__[\"default\"].drawHorizontalGoalLine({\n              svgContainer: containerResult.svgJqDom,\n              position: \"right\",\n              translateLeft: firstTitleWidth + firstMeasureWidth,\n              translateTop: scalePaddingTop + theScaleFunc(yAxis.goal),\n              lineWidth: scaleAttributeWidth,\n              hoverText: getI18nKeyFunc(\"chart_conf_goal\") + ': ' + _DataFocusMethod.formatData(yAxis.goal, yScaleFormat)\n            });\n          }\n        }\n      });\n      // 画标度[参考]线 及 区域\n      const previousDivisionRange = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).selectAll('g.reference-container');\n      if (!previousDivisionRange.empty()) previousDivisionRange.remove();\n      if (chartConfigures.scale_y_visible && chartConfigures.scale_y_range) {\n        _pc_assets_js_charts_components_ReferenceLineComponent__WEBPACK_IMPORTED_MODULE_12__[\"default\"].drawHorizontalDivisionRange({\n          language: systemLanguage,\n          referenceConfigure: chartConfigures.scale_y_range,\n          svgContainer: containerResult.svgJqDom,\n          translateLeft: firstTitleWidth + firstMeasureWidth,\n          translateTop: scalePaddingTop,\n          measureAxis: measureAxis,\n          rangeWidth: scaleAttributeWidth,\n          defaultTitleText: getI18nKeyFunc(\"option_scale_config_text_default\")\n        });\n      }\n      const chartDetail = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).select('g.chart-detail').attr(\"clip-path\", \"url(#\" + chartClipDefId + \")\");\n      // 绘制柱体\n      if (translateData.datasType === 'legend') {\n        let thePrevColumnIndex = -1;\n        const translateLeft = firstTitleWidth + firstMeasureWidth;\n        const translateTop = scalePaddingTop;\n        const columnsInfoInCurrentPage = (translateData.legendDistinct || []).map((theLegendStr, legendIndex) => ({\n          theLegendStr,\n          legendIndex\n        })).filter(({\n          theLegendStr,\n          legendIndex\n        }) => {\n          let theLegendConfig = legendValueList[legendIndex];\n          return !!(theLegendConfig && theLegendConfig.show);\n        }).map(({\n          theLegendStr,\n          legendIndex\n        }) => {\n          let theLegendData = translateData.datas[theLegendStr];\n          let theLegendConfig = legendValueList[legendIndex];\n          let currentPageLegendData = theLegendData && theLegendData.filter(function (data) {\n            let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n            let theIndex = theMappingObj && theMappingObj.index || 0;\n            if (theIndex >= start && theIndex < end) {\n              if (!xLabelDatas[data.x0]) xLabelDatas[data.x0] = [];\n              xLabelDatas[data.x0].push(data);\n              return true;\n            }\n          });\n          return {\n            theLegendStr: theLegendStr,\n            theLegendConfig: theLegendConfig,\n            legendIndex: legendIndex,\n            yAxis: chartAxis.curYAxis[0],\n            yIndex: 0,\n            // 当前页的所有行数据\n            rows: currentPageLegendData\n          };\n        });\n        const legendGroups = chartDetail.selectAll('g.chartset').data(columnsInfoInCurrentPage, d => d.theLegendStr).join(enter => {\n          return enter.append('g').attr(\"class\", \"chartset\").attr(\"opacity\", \"1\").attr(\"data-y-index\", d => d.yIndex).attr(\"data-legend-str\", d => d.theLegendStr).attr(\"transform\", \"translate(\" + translateLeft + \" , \" + translateTop + \")\");\n        }, update => {\n          return update.attr(\"transform\", \"translate(\" + translateLeft + \" , \" + translateTop + \")\");\n        }, exit => exit.transition().duration(duration.exit).attr('opacity', '0').remove());\n        legendGroups.each(function (parentData) {\n          const yAxis = parentData.yAxis;\n          const yIndex = parentData.yIndex;\n          const currentPageLegendData = parentData.rows;\n          const theLegendStr = parentData.theLegendStr;\n          const legendIndex = parentData.legendIndex;\n          let theLegendConfig = parentData.theLegendConfig;\n          if (!theLegendConfig || !theLegendConfig.show) return false;\n          thePrevColumnIndex++;\n          let theLegendData = translateData.datas[theLegendStr];\n          _ColumnChartComponent__WEBPACK_IMPORTED_MODULE_11__[\"default\"].drawHorizontalColumnChartSet(currentPageLegendData, {\n            chartDetailContainer: _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this),\n            attributeAxis: attributeAxis,\n            measureAxis: measureAxis,\n            start: start,\n            end: end,\n            duration: duration,\n            curYAxis: yAxis,\n            yIndex: yIndex,\n            yLength: translateData.yLength,\n            legendType: \"legendAxis\",\n            legendValue: theLegendStr,\n            legendIndex: legendIndex,\n            legendConfig: theLegendConfig,\n            prevColumnIndex: thePrevColumnIndex,\n            translateLeft: firstTitleWidth + firstMeasureWidth,\n            translateTop: scalePaddingTop,\n            scaleMeasureHeight: scaleMeasureHeight,\n            columnWidth: theColumnWidth,\n            outPadding: theOutPadding,\n            animateFlag: animateFlag,\n            colorAssignedToScaleFlag: !hasLegendFlag && colorAssignedToScaleFlag,\n            getColorFunc: colorFunc,\n            xLabelColorList: theXLabelColorList,\n            analaysisData: tableData && tableData.analysis,\n            thePositiveOutlierColor: thePositiveOutlierColor,\n            theNegativeOutlierColor: theNegativeOutlierColor,\n            // 柱形图单元鼠标移入时 ， 显示对应的元素的悬浮文本\n            mouseoverCallback: function (event, d) {\n              let theTranslateSuspendText;\n              if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n                let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n                let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n                if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_SERIES_NAME %_BR %_NAME %_BR  %_VALUE_NAME : %_VALUE\";\n                theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n                  xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n                  xLabelIndex: theXLabelMapping && theXLabelMapping.index,\n                  xLabelTotal: theXLabelMapping && theXLabelMapping.total,\n                  xLabelNumber: theXLabelMapping && theXLabelMapping.number,\n                  yValue: d['y' + yIndex],\n                  yAxis: yAxis,\n                  legend: theLegendStr,\n                  legendIndex: legendIndex,\n                  legendTotal: theLegendData['legendTotal0'],\n                  rowData: d.rowData,\n                  headers: options.datas && options.datas.headers\n                });\n              }\n              _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positionChartPrompt(event, theTranslateSuspendText || d.x0 + ':' + d['y' + yIndex]);\n              if (theLegendConfig && theLegendConfig.show) {\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-columns rect\").attr(\"class\", \"fill-grey\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-columns rect[legendId='\" + theLegendConfig.id + \"']\").attr(\"class\", \"\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-label text\").attr(\"class\", \"fill-grey\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-label text[legendId='\" + theLegendConfig.id + \"']\").attr(\"class\", \"\");\n                if (containerResult.legendContainer) {\n                  let theLegendDom = $(containerResult.legendContainer).find(\".legend-item[data-legend-id='\" + theLegendConfig.id + \"']\");\n                  theLegendDom.find(\"svg\").removeClass(\"fill-grey\");\n                  theLegendDom.siblings().find(\"svg\").addClass(\"fill-grey\");\n                }\n              }\n            },\n            // 柱形图单元鼠标移出时 ，隐藏悬浮文本框\n            mouseoutCallback: function () {\n              _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .fill-grey\").attr(\"class\", \"\");\n              if (containerResult.legendContainer) $(containerResult.legendContainer).find(\".legend-item svg\").removeClass(\"fill-grey\");\n            },\n            // 柱形图单元鼠标点击时 ，触发左击右击事件\n            mousedownCallback: function (event, d) {\n              // 移动端的mousedown事件不执行\n              if (allowMousedownFlag) {\n                let theDataColumnIdx = [];\n                chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n                  theDataColumnIdx.push(xAxis.idx);\n                });\n                if (chartAxis && chartAxis.curLegend) {\n                  theDataColumnIdx.push(chartAxis.curLegend.idx);\n                }\n                typeof options.mousedownCallback === 'function' && options.mousedownCallback.call(this, event, {\n                  dataColumnIndex: theDataColumnIdx,\n                  dataRowIndex: d.rowIndex,\n                  theHideCategoryValue: d.x0\n                });\n              }\n            }\n          });\n        });\n      }\n      // 无图例的情况， 按Y轴画多组柱形图\n      else {\n        let theLegendData = translateData.datas;\n        let currentPageLegendData = theLegendData && theLegendData.filter(function (data) {\n          let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n          let theIndex = theMappingObj && theMappingObj.index || 0;\n          if (theIndex >= start && theIndex < end) {\n            if (!xLabelDatas[data.x0]) xLabelDatas[data.x0] = [];\n            xLabelDatas[data.x0].push(data);\n            return true;\n          }\n        });\n        let thePrevColumnIndex = -1;\n        const translateLeft = firstTitleWidth + firstMeasureWidth;\n        const translateTop = scalePaddingTop;\n\n        // 所有Y轴的柱体信息\n        const columnsInfoInCurrentPage = (chartAxis.curYAxis || []).map((yAxis, yIndex) => ({\n          yAxis,\n          yIndex\n        })).filter(({\n          yAxis,\n          yIndex\n        }) => {\n          // 只有一个Y轴时 且 没有图例的时候，legendValueList是空数组\n          if (legendValueList && legendValueList.length) {\n            const theLegendConfig = legendValueList[yIndex] || {};\n            return !!theLegendConfig.show;\n          } else {\n            return true;\n          }\n        }).map(({\n          yAxis,\n          yIndex\n        }) => {\n          // 1. 先根据图例区分大类  2. 再根据X轴刻度区分同一图例下的多个柱体\n\n          return {\n            yAxis,\n            yIndex,\n            // 当前页的所有行数据\n            rows: currentPageLegendData\n          };\n        });\n\n        // 每个 .chartset 代表一组图例\n        // console.log('柱体信息');\n        // console.log(columnsInfoInCurrentPage);\n\n        // 多组Y轴\n        const legendGroups = chartDetail.selectAll('g.chartset').data(columnsInfoInCurrentPage, d => d.yIndex).join(enter => {\n          return enter.append('g').attr(\"class\", \"chartset\").attr(\"opacity\", \"1\").attr(\"data-y-index\", d => d.yIndex).attr(\"transform\", \"translate(\" + translateLeft + \" , \" + translateTop + \")\");\n        }, update => {\n          return update.attr(\"transform\", \"translate(\" + translateLeft + \" , \" + translateTop + \")\");\n        }, exit => exit.transition().duration(duration.exit).attr('opacity', '0').remove());\n        legendGroups.each(function (parentData) {\n          const yAxis = parentData.yAxis;\n          const yIndex = parentData.yIndex;\n          let theLegendConfig = legendValueList[yIndex] || {};\n          if (legendValueList && legendValueList.length && !theLegendConfig.show) return false;\n          thePrevColumnIndex++;\n          _ColumnChartComponent__WEBPACK_IMPORTED_MODULE_11__[\"default\"].drawHorizontalColumnChartSet(currentPageLegendData, {\n            chartDetailContainer: _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this),\n            attributeAxis: attributeAxis,\n            measureAxis: measureAxis,\n            start: start,\n            end: end,\n            duration: duration,\n            curYAxis: yAxis,\n            yIndex: yIndex,\n            yLength: translateData.yLength,\n            legendType: \"YAxis\",\n            legendValue: yAxis.col_id,\n            legendIndex: yIndex,\n            legendConfig: theLegendConfig,\n            prevColumnIndex: thePrevColumnIndex,\n            translateLeft: firstTitleWidth + firstMeasureWidth,\n            translateTop: scalePaddingTop,\n            scaleMeasureHeight: scaleMeasureHeight,\n            columnWidth: theColumnWidth,\n            outPadding: theOutPadding,\n            animateFlag: animateFlag,\n            colorAssignedToScaleFlag: !hasLegendFlag && colorAssignedToScaleFlag,\n            getColorFunc: colorFunc,\n            xLabelColorList: theXLabelColorList,\n            analaysisData: tableData && tableData.analysis,\n            thePositiveOutlierColor: thePositiveOutlierColor,\n            theNegativeOutlierColor: theNegativeOutlierColor,\n            // 柱形图单元鼠标移入时 ， 显示对应的元素的悬浮文本\n            mouseoverCallback: function (event, d) {\n              let theTranslateSuspendText;\n              if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n                let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n                let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n                if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_NAME %_BR %_VALUE_NAME : %_VALUE\";\n                theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n                  xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n                  xLabelIndex: theXLabelMapping && theXLabelMapping.index,\n                  xLabelTotal: theXLabelMapping && theXLabelMapping.total,\n                  xLabelNumber: theXLabelMapping && theXLabelMapping.number,\n                  yValue: d['y' + yIndex],\n                  yAxis: yAxis,\n                  legend: null,\n                  legendIndex: yIndex + 1,\n                  legendTotal: theLegendData['legendTotal' + yIndex],\n                  rowData: d.rowData,\n                  headers: options.datas.headers\n                });\n              }\n              _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positionChartPrompt(event, theTranslateSuspendText || d.x0 + ':' + d['y' + yIndex]);\n              if (theLegendConfig && theLegendConfig.show) {\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-columns rect\").attr(\"class\", \"fill-grey\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-columns rect[legendId='\" + theLegendConfig.id + \"']\").attr(\"class\", \"\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-label text\").attr(\"class\", \"fill-grey\");\n                _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .chartset-label text[legendId='\" + theLegendConfig.id + \"']\").attr(\"class\", \"\");\n                if (containerResult.legendContainer) {\n                  let theLegendDom = $(containerResult.legendContainer).find(\".legend-item[data-legend-id='\" + theLegendConfig.id + \"']\");\n                  theLegendDom.find(\"svg\").removeClass(\"fill-grey\");\n                  theLegendDom.siblings().find(\"svg\").addClass(\"fill-grey\");\n                }\n              }\n            },\n            // 柱形图单元鼠标移出时 ，隐藏悬浮文本框\n            mouseoutCallback: function () {\n              _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n              _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".chart-detail .fill-grey\").attr(\"class\", \"\");\n              if (containerResult.legendContainer) $(containerResult.legendContainer).find(\".legend-item svg\").removeClass(\"fill-grey\");\n            },\n            // 柱形图单元鼠标点击时 ，触发左击右击事件\n            mousedownCallback: function (event, d) {\n              // 移动端的mousedown事件不执行\n              if (allowMousedownFlag) {\n                let theDataColumnIdx = [];\n                chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n                  theDataColumnIdx.push(xAxis.idx);\n                });\n                if (chartAxis && chartAxis.curLegend) {\n                  theDataColumnIdx.push(chartAxis.curLegend.idx);\n                }\n                typeof options.mousedownCallback === 'function' && options.mousedownCallback.call(this, event, {\n                  dataColumnIndex: theDataColumnIdx,\n                  dataRowIndex: d.rowIndex,\n                  theHideCategoryValue: d.x0\n                });\n              }\n            }\n          });\n        });\n      }\n      const labels = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(containerResult.svgJqDom).selectAll('g.chartset-label');\n      if (!labels.empty()) {\n        labels.remove();\n      }\n      // ======= 绘制数据标签[ 为了放置标签不会被柱形图挡住，所以统一画所有标签 ] ===========================\n      if (showLabelFlag) {\n        let existedLabelArray = [];\n        // 有图例的情况， 按图例项画多组数据标签\n        if (translateData.datasType === 'legend') {\n          const translateLeft = firstTitleWidth + firstMeasureWidth;\n          const translateTop = scalePaddingTop;\n          let thePrevColumnIndex = -1;\n          const columnsInfoInCurrentPage = (translateData.legendDistinct || []).map((theLegendStr, legendIndex) => ({\n            theLegendStr,\n            legendIndex\n          })).filter(({\n            theLegendStr,\n            legendIndex\n          }) => {\n            if (legendValueList && legendValueList.length) {\n              const theLegendConfig = legendValueList[legendIndex] || {};\n              return !!theLegendConfig.show;\n            } else {\n              return true;\n            }\n          }).map(({\n            theLegendStr,\n            legendIndex\n          }) => {\n            let theLegendData = translateData.datas[theLegendStr];\n            let theLegendConfig = legendValueList[legendIndex];\n            let currentPageLegendData = theLegendData && theLegendData.filter(function (data) {\n              let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n              let theIndex = theMappingObj && theMappingObj.index || 0;\n              if (theIndex >= start && theIndex < end) {\n                return true;\n              }\n            });\n            return {\n              theLegendStr: theLegendStr,\n              theLegendConfig: theLegendConfig,\n              legendIndex: legendIndex,\n              yAxis: chartAxis.curYAxis[0],\n              yIndex: 0,\n              // 当前页的所有行数据\n              rows: currentPageLegendData\n            };\n          });\n          const labelArea = chartDetail.selectAll('.chartset-label').data(columnsInfoInCurrentPage).join(enter => enter.append('g').classed('chartset-label', true).attr('opacity', \"1\").attr('data-y-index', d => d.yIndex).attr('data-legend-str', d => d.theLegendStr).attr(\"transform\", `translate(${translateLeft}, ${translateTop})`), update => update.transition().duration(duration.update).attr(\"transform\", `translate(${translateLeft}, ${translateTop})`), exit => exit.transition().duration(duration.exit).attr('opacity', '0').remove());\n          labelArea.each(function (parentData) {\n            const yAxis = parentData.yAxis;\n            const yIndex = parentData.yIndex;\n            const currentPageLegendData = parentData.rows;\n            const theLegendStr = parentData.theLegendStr;\n            const legendIndex = parentData.legendIndex;\n            let theLegendConfig = parentData.theLegendConfig;\n            if (!theLegendConfig || !theLegendConfig.show) return false;\n            thePrevColumnIndex++;\n            let theLegendData = translateData.datas[theLegendStr];\n            _ColumnChartComponent__WEBPACK_IMPORTED_MODULE_11__[\"default\"].drawHorizontalColumnLabelSet(currentPageLegendData, {\n              chartDetailContainer: _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this),\n              attributeAxis: attributeAxis,\n              measureAxis: measureAxis,\n              start: start,\n              end: end,\n              duration: duration,\n              curYAxis: yAxis,\n              yIndex: yIndex,\n              yLength: translateData.yLength,\n              legendType: \"legendAxis\",\n              legendValue: theLegendStr,\n              legendIndex: legendIndex,\n              legendConfig: theLegendConfig,\n              prevColumnIndex: thePrevColumnIndex,\n              translateLeft: firstTitleWidth + firstMeasureWidth,\n              translateTop: scalePaddingTop,\n              scaleMeasureHeight: scaleMeasureHeight,\n              scaleAttributeWidth: scaleAttributeWidth,\n              columnWidth: theColumnWidth,\n              outPadding: theOutPadding,\n              animateFlag: animateFlag,\n              // 标签字体大小\n              labelFontSize: labelFontSize,\n              labelFontColor: chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontColor,\n              labelFontBold: chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontBold,\n              labelFontItalic: chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontItalic,\n              // 标签位置\n              labelPosition: labelPosition,\n              // 旋转方向\n              labelRotation: labelRotation,\n              // 显示的集合\n              labelVisibleMap: labelVisibleMap,\n              // 标签是否允许重复\n              labelAllowOverlap: allowOverlap,\n              // 已经画了的标签信息数组\n              drewLabelArray: existedLabelArray || [],\n              // 生成数据标签的具体值的方法\n              generateLabelTextFunc: function (d) {\n                if (!d) return false;\n                if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n                  let theLabelTextConfig = chartConfigures.label_text_regex || '';\n                  if (!theLabelTextConfig.trim()) theLabelTextConfig = \"%_VALUE\";\n                  let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n                  return self.chartConfigureAdvanced.translateMacro(theLabelTextConfig, {\n                    type: 'label',\n                    xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n                    xLabelIndex: theXLabelMapping && theXLabelMapping.index,\n                    xLabelTotal: theXLabelMapping && theXLabelMapping.total,\n                    xLabelNumber: theXLabelMapping && theXLabelMapping.number,\n                    yValue: d['y' + yIndex],\n                    yAxis: yAxis,\n                    legend: theLegendStr,\n                    legendIndex: legendIndex,\n                    legendTotal: theLegendData['legendTotal0'],\n                    rowData: d.rowData,\n                    headers: options.datas.headers\n                  });\n                }\n                return _DataFocusMethod.formatData(d['y' + yIndex], yAxis);\n              }\n            });\n          });\n        }\n        // 无图例的情况， 按Y轴画多组数据标签\n        else {\n          let theLegendData = translateData.datas;\n          let currentPageLegendData = theLegendData && theLegendData.filter(function (data) {\n            let theMappingObj = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[data.x0];\n            let theIndex = theMappingObj && theMappingObj.index || 0;\n            return theIndex >= start && theIndex < end;\n          });\n          const translateLeft = firstTitleWidth + firstMeasureWidth;\n          const translateTop = scalePaddingTop;\n          let thePrevColumnIndex = -1;\n          const columnsInfoInCurrentPage = (chartAxis.curYAxis || []).map((yAxis, yIndex) => ({\n            yAxis,\n            yIndex\n          })).filter(({\n            yAxis,\n            yIndex\n          }) => {\n            if (legendValueList && legendValueList.length) {\n              const theLegendConfig = legendValueList[yIndex] || {};\n              return !!theLegendConfig.show;\n            } else {\n              return true;\n            }\n          }).map(({\n            yAxis,\n            yIndex\n          }) => {\n            // 1. 先根据图例区分大类  2. 再根据X轴刻度区分同一图例下的多个柱体\n            return {\n              yAxis,\n              yIndex,\n              // 当前页的所有行数据\n              rows: currentPageLegendData\n            };\n          });\n          const labelArea = chartDetail.selectAll('.chartset-label').data(columnsInfoInCurrentPage).join(enter => enter.append('g').classed('chartset-label', true).attr('opacity', \"1\").attr('data-y-index', d => d.yIndex).attr(\"transform\", `translate(${translateLeft}, ${translateTop})`), update => update.transition().duration(duration.update).attr(\"transform\", `translate(${translateLeft}, ${translateTop})`), exit => exit.transition().duration(duration.exit).attr('opacity', '0').remove());\n          labelArea.each(function (parentData, parentIndex) {\n            const yAxis = parentData.yAxis;\n            const yIndex = parentData.yIndex;\n            let theLegendConfig = legendValueList[yIndex];\n            if (!theLegendConfig || !theLegendConfig.show) return false;\n            thePrevColumnIndex++;\n            _ColumnChartComponent__WEBPACK_IMPORTED_MODULE_11__[\"default\"].drawHorizontalColumnLabelSet(currentPageLegendData, {\n              chartDetailContainer: _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_1__[\"default\"].select(this),\n              attributeAxis: attributeAxis,\n              measureAxis: measureAxis,\n              start: start,\n              end: end,\n              duration: duration,\n              curYAxis: yAxis,\n              yIndex: yIndex,\n              yLength: translateData.yLength,\n              legendType: \"YAxis\",\n              legendValue: yAxis.col_id,\n              legendIndex: yIndex,\n              legendConfig: theLegendConfig,\n              prevColumnIndex: thePrevColumnIndex,\n              translateLeft: firstTitleWidth + firstMeasureWidth,\n              translateTop: scalePaddingTop,\n              scaleMeasureHeight: scaleMeasureHeight,\n              scaleAttributeWidth: scaleAttributeWidth,\n              columnWidth: theColumnWidth,\n              outPadding: theOutPadding,\n              animateFlag: animateFlag,\n              // 标签字体大小\n              labelFontSize: labelFontSize,\n              labelFontColor: chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontColor,\n              labelFontBold: chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontBold,\n              labelFontItalic: chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontItalic,\n              // 标签位置\n              labelPosition: labelPosition,\n              // 旋转方向\n              labelRotation: labelRotation,\n              // 显示的集合\n              labelVisibleMap: labelVisibleMap,\n              // 标签是否允许重复\n              labelAllowOverlap: allowOverlap,\n              // 已经画了的标签信息数组\n              drewLabelArray: existedLabelArray || [],\n              // 生成数据标签的具体值的方法\n              generateLabelTextFunc: function (d) {\n                if (!d) return false;\n                if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n                  let theLabelTextConfig = chartConfigures.label_text_regex || '';\n                  if (!theLabelTextConfig.trim()) theLabelTextConfig = \"%_VALUE\";\n                  let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n                  return self.chartConfigureAdvanced.translateMacro(theLabelTextConfig, {\n                    type: 'label',\n                    xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n                    xLabelIndex: theXLabelMapping && theXLabelMapping.index,\n                    xLabelTotal: theXLabelMapping && theXLabelMapping.total,\n                    xLabelNumber: theXLabelMapping && theXLabelMapping.number,\n                    yValue: d['y' + yIndex],\n                    yAxis: yAxis,\n                    legend: null,\n                    legendIndex: yIndex,\n                    legendTotal: theLegendData['legendTotal' + yIndex],\n                    rowData: d.rowData,\n                    headers: options.datas.headers\n                  });\n                }\n                return _DataFocusMethod.formatData(d['y' + yIndex], yAxis);\n              }\n            });\n          });\n        }\n      }\n\n      // 画翻页的元素 [ 翻页也是临时的，不保存在配置中的 ]\n      _pc_assets_js_charts_components_PaginationChartComponent__WEBPACK_IMPORTED_MODULE_13__[\"default\"].drawHorizontalPagination({\n        chartContainer: containerResult.svgContainer,\n        translateLeft: firstTitleWidth,\n        translateTop: scalePaddingTop,\n        height: scaleMeasureHeight,\n        width: scaleAttributeWidth + firstMeasureWidth + secondMeasureWidth + markerMessageWidth,\n        start: start,\n        pageSize: steps,\n        totalNumber: translateData.xLabelDistinct.length,\n        pagingFunc: drawAColumnFrame\n      });\n      // 绑定缩放的事件 [ 缩放事件都是临时的，保存在配置中的 ]\n      _pc_assets_js_charts_components_ZoomChartComponent__WEBPACK_IMPORTED_MODULE_14__[\"default\"].zoomColumnChart({\n        svgContainer: containerResult.svgJqDom,\n        start: start,\n        steps: steps,\n        zoomingFunc: drawAColumnFrame\n      });\n      // 区域选择事件\n      _pc_assets_js_charts_components_SelectChartComponent__WEBPACK_IMPORTED_MODULE_15__[\"default\"].selectHorizontalSvgColumnChart({\n        svgContainer: containerResult.svgContainer,\n        translateLeft: firstTitleWidth + firstMeasureWidth,\n        translateTop: scalePaddingTop,\n        width: scaleAttributeWidth,\n        height: scaleMeasureHeight,\n        rangeBand: attributeAxis.rangeBand,\n        prevStart: start,\n        prevSteps: steps,\n        selectFunc: drawAColumnFrame,\n        transformScale: inPinboardFlag ? _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].transformScale || 1 : 1\n      });\n\n      // 鼠标移入事件\n      // 图形区域移入，显示每个刻度的固定的数据信息 及 阴影\n      let prevXLabelIndex = -1,\n        theMouseoverHtml,\n        showMousemoveTimer;\n      _pc_assets_js_charts_components_MouseOverChartComponent__WEBPACK_IMPORTED_MODULE_16__[\"default\"].handleSvgMouseOverEvent({\n        svgContainer: containerResult.svgJqDom,\n        direction: \"horizontal\",\n        width: scaleAttributeWidth,\n        height: scaleMeasureHeight,\n        left: firstTitleWidth + firstMeasureWidth,\n        prevStart: start,\n        hoverWidth: attributeAxis.rangeBand,\n        hoverHeight: scaleMeasureHeight + scalePaddingTop,\n        mousemoveCallback: function (options) {\n          options = options || {};\n          let theXLabelIndex = parseInt(options.xLabelIndex);\n          if (!isNaN(theXLabelIndex) || !options.event) {\n            // 显示当前X刻度的数据信息\n            if (prevXLabelIndex !== theXLabelIndex) {\n              prevXLabelIndex = theXLabelIndex;\n\n              // 显示X刻度 及 各个图例的颜色，图例名称 及 数值\n              let theXLabel = translateData.xLabelDistinct && translateData.xLabelDistinct[theXLabelIndex],\n                theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[theXLabel],\n                theXLabelData = xLabelDatas && xLabelDatas[theXLabel];\n              theMouseoverHtml = (theXLabelMapping && theXLabelMapping.text || theXLabel) + '<br/>';\n              theXLabelData && theXLabelData.forEach(function (data) {\n                if (data.legend !== undefined) {\n                  if (!hasLegendFlag && colorAssignedToScaleFlag) {\n                    let theXLabelColor = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n                      return theLegend.legend === theXLabel;\n                    });\n                    if (theXLabelColor) {\n                      theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theXLabelColor.color + ';margin-right:2px;\"></span>';\n                    }\n                  } else {\n                    let theLegendColor = legendValueList && legendValueList.find(function (theLegend) {\n                      return theLegend.legend === data.legend;\n                    });\n                    if (theLegendColor) {\n                      theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theLegendColor.color + ';margin-right:2px;\"></span>';\n                    }\n                  }\n                  theMouseoverHtml += data.legend + ':' + _DataFocusMethod.formatData(data.y0, chartAxis.curYAxis && chartAxis.curYAxis[0]);\n                  theMouseoverHtml += '<br />';\n                } else {\n                  chartAxis.curYAxis && chartAxis.curYAxis.forEach(function (yAxis, index) {\n                    if (!hasLegendFlag && colorAssignedToScaleFlag) {\n                      let theXLabelColor = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n                        return theLegend.legend === theXLabel;\n                      });\n                      if (theXLabelColor) {\n                        theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theXLabelColor.color + ';margin-right:2px;\"></span>';\n                      }\n                    } else {\n                      let theLegendColor = legendValueList && legendValueList.find(function (theLegend) {\n                        return theLegend.index === index;\n                      });\n                      if (theLegendColor) {\n                        theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theLegendColor.color + ';margin-right:2px;\"></span>';\n                      }\n                    }\n                    theMouseoverHtml += _DataFocusMethod.getDisplayOperateColumn(systemLanguage, yAxis, {\n                      hideOperator: hideOperatorFlag\n                    }) + ':' + _DataFocusMethod.formatData(data['y' + index], yAxis);\n                    theMouseoverHtml += '<br />';\n                  });\n                }\n              });\n            }\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positionChartPrompt(options.event, theMouseoverHtml);\n          } else {\n            prevXLabelIndex = -1;\n            theMouseoverHtml = '';\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n            if (showMousemoveTimer) clearTimeout(showMousemoveTimer);\n          }\n        },\n        mouseoutCallback: function () {\n          // 清除悬浮框\n          prevXLabelIndex = -1;\n          theMouseoverHtml = '';\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n          if (showMousemoveTimer) clearTimeout(showMousemoveTimer);\n        }\n      });\n      // 多层X轴区域移入，如果是多层X轴顶层，显示阴影 ； 如果是多层X轴的最叶子层，显示该刻度下的数据信息 及 阴影\n      _pc_assets_js_charts_components_MouseOverChartComponent__WEBPACK_IMPORTED_MODULE_16__[\"default\"].handleXLevelMouseOverEvent({\n        svgContainer: containerResult.svgJqDom,\n        direction: \"horizontal\",\n        left: firstTitleWidth + firstMeasureWidth,\n        separate: attributeSeparate,\n        //  X刻度与图形之间的间隔\n\n        prevStart: start,\n        hoverWidth: attributeAxis.rangeBand,\n        hoverHeight: scaleMeasureHeight + scalePaddingTop,\n        mousemoveCallback: function (options) {\n          options = options || {};\n          let theXLabelIndex = parseInt(options.xLabelIndex);\n          if (!isNaN(theXLabelIndex) || !options.event) {\n            // 显示当前X刻度的数据信息\n            if (prevXLabelIndex !== theXLabelIndex) {\n              prevXLabelIndex = theXLabelIndex;\n\n              // 显示X刻度 及 各个图例的颜色，图例名称 及 数值\n              let theXLabel = translateData.xLabelDistinct && translateData.xLabelDistinct[theXLabelIndex],\n                theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[theXLabel],\n                theXLabelData = xLabelDatas && xLabelDatas[theXLabel];\n              theMouseoverHtml = (theXLabelMapping && theXLabelMapping.text || theXLabel) + '<br/>';\n              theXLabelData && theXLabelData.forEach(function (data) {\n                if (data.legend !== undefined) {\n                  if (!hasLegendFlag && colorAssignedToScaleFlag) {\n                    let theXLabelColor = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n                      return theLegend.legend === theXLabel;\n                    });\n                    if (theXLabelColor) {\n                      theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theXLabelColor.color + ';margin-right:2px;\"></span>';\n                    }\n                  } else {\n                    let theLegendColor = legendValueList && legendValueList.find(function (theLegend) {\n                      return theLegend.legend === data.legend;\n                    });\n                    if (theLegendColor) {\n                      theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theLegendColor.color + ';margin-right:2px;\"></span>';\n                    }\n                  }\n                  theMouseoverHtml += data.legend + ':' + _DataFocusMethod.formatData(data.y0, chartAxis.curYAxis && chartAxis.curYAxis[0]);\n                  theMouseoverHtml += '<br />';\n                } else {\n                  chartAxis.curYAxis && chartAxis.curYAxis.forEach(function (yAxis, index) {\n                    if (!hasLegendFlag && colorAssignedToScaleFlag) {\n                      let theXLabelColor = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n                        return theLegend.legend === theXLabel;\n                      });\n                      if (theXLabelColor) {\n                        theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theXLabelColor.color + ';margin-right:2px;\"></span>';\n                      }\n                    } else {\n                      let theLegendColor = legendValueList && legendValueList.find(function (theLegend) {\n                        return theLegend.index === index;\n                      });\n                      if (theLegendColor) {\n                        theMouseoverHtml += '<span style=\"display:inline-block;width:10px;height:10px;border-radius: 2px;background: ' + theLegendColor.color + ';margin-right:2px;\"></span>';\n                      }\n                    }\n                    theMouseoverHtml += (yAxis.displayName || yAxis.col_name) + ':' + _DataFocusMethod.formatData(data['y' + index], yAxis);\n                    theMouseoverHtml += '<br />';\n                  });\n                }\n              });\n            }\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].positionChartPrompt(options.event, theMouseoverHtml);\n          } else {\n            prevXLabelIndex = -1;\n            theMouseoverHtml = '';\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n            if (showMousemoveTimer) clearTimeout(showMousemoveTimer);\n          }\n        },\n        mouseoutCallback: function () {\n          // 清除悬浮框\n          prevXLabelIndex = -1;\n          theMouseoverHtml = '';\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].clearChartPrompt();\n          if (showMousemoveTimer) clearTimeout(showMousemoveTimer);\n        }\n      });\n    };\n\n    // 默认画第一页数据\n    drawAColumnFrame();\n\n    /* *\r\n    * 画完图需要告诉外部的配置组件，当前图形的配置：\r\n    *   X轴类型是单层刻度/多层刻度/时间轴 及 单层刻度列表 ； 或者用户配置的类型 ；\r\n    *   标题是自动显示，还是自动隐藏 ； 或者是用户配置的显示及隐藏\r\n    *   是否有右Y轴\r\n    *   是否有图例，属性列图例；多Y轴图例 ；\r\n    * */\n    let returnConfigureAutoValue = {};\n    // 如果用户配置的X轴类型是自动，则返回给图形配置组件提供当前X轴的自动类型\n    if (chartConfigures.x_axis_draw_type !== 'option_select_x_axis_dot_line') {\n      switch (translateData.autoXLabelType) {\n        case \"dotLine\":\n          returnConfigureAutoValue.x_axis_draw_type = 'option_select_x_axis_dot_line';\n          break;\n        case \"timeLine\":\n          returnConfigureAutoValue.x_axis_draw_type = 'option_select_x_axis_time_line';\n          break;\n        case \"levelLine\":\n          returnConfigureAutoValue.x_axis_draw_type = 'option_select_x_axis_level_line';\n          break;\n        case \"scaleLine\":\n          returnConfigureAutoValue.x_axis_draw_type = 'option_select_x_axis_scale_line';\n          break;\n      }\n    }\n    // 如果用户配置X轴标题显示自动，则返回给图形配置组件提供当前X轴标题的自动显示类型\n    if (!chartConfigures.x_axis_title_visible || chartConfigures.x_axis_title_visible === 'system_auto_default') {\n      returnConfigureAutoValue.x_axis_title_visible = showXTitleFlag ? 'option_title_visible_show' : 'option_title_visible_hide';\n    }\n    // 如果用户配置Y轴标题显示自动，则返回给图形配置组件提供当前Y轴标题的自动显示类型\n    if (!chartConfigures.y_axis_title_visible || chartConfigures.y_axis_title_visible === 'system_auto_default') {\n      returnConfigureAutoValue.y_axis_title_visible = yAxisBasicMessage.firstMeasure && yAxisBasicMessage.firstMeasure.showTitleFlag ? 'option_title_visible_show' : 'option_title_visible_hide';\n    }\n    // 如果用户配置了右Y轴，则将右Y轴存在的标志传给图形\n    if (yAxisBasicMessage.secondMeasure) {\n      returnConfigureAutoValue.has_right_y_axis = true;\n      // 如果用户配置右Y轴标题显示自动，则返回给图形配置组件提供当前右Y轴标题的自动显示类型\n      if (!chartConfigures.right_y_axis_title_visible || chartConfigures.right_y_axis_title_visible === 'system_auto_default') {\n        returnConfigureAutoValue.right_y_axis_title_visible = yAxisBasicMessage.secondMeasure && yAxisBasicMessage.secondMeasure.showTitleFlag ? 'option_title_visible_show' : 'option_title_visible_hide';\n      }\n    }\n    // 如果当前图形配置有图例，则将图例配置传给图形\n    if (hasLegendFlag) {\n      returnConfigureAutoValue.has_legend_flag = hasLegendFlag;\n      returnConfigureAutoValue.legendValueList = legendValueList;\n      returnConfigureAutoValue.defaultLegendList = defaultLegendList;\n    } else {\n      returnConfigureAutoValue.xLabelColorList = theXLabelColorList;\n      returnConfigureAutoValue.defaultXLabelColorList = defaultXLabelColorList;\n    }\n    // 如果当前图形可以配置最大最小值标准线，则将该配置传给图形\n    if (!hasLegendFlag && chartAxis.curYAxis.length === 1) {\n      returnConfigureAutoValue.allow_marker_flag = true;\n    }\n\n    /**\r\n     * @return\r\n     *      {\r\n     *          // 当前图形自动识别的配置，主要可以用于chartConfigureList中条件判断\r\n     *          chartAutoConfigures: {}\r\n     *      }\r\n     * */\n    return {\n      chartAutoConfigures: returnConfigureAutoValue\n    };\n  },\n  // [*必填项]图表配置列表，其中的require条件不仅可以使用以下配置项的key，也可以使用drawChart中返回的chartAutoConfigures中的值\n  // drawChart返回的chartAutoConfigures是图形返回给图形配置组件的信息，用于开发者可以控制配置的显示与隐藏\n  chartConfigureList: [\n  // 通用 ： 字体大小，动画，最小柱宽，\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"theme\",\n      selection: [\"option_chart_theme_eight\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"],\n      defaultValue: \"option_chart_theme_one\"\n    },\n    //自定义主题颜色\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    // 图形字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      }\n    },\n    // 固定柱宽\n    {\n      key: \"chart_column_width\",\n      title: \"option_chart_column_width\",\n      description: \"option_chart_column_width_desc\",\n      placeholder: 'option_default_value',\n      type: \"input\",\n      min: 5,\n      allowNullFlag: true,\n      withoutSlider: true,\n      require: \"!chart_default_step\"\n    },\n    // 固定分页条目数【 没有配置固定柱宽的情况下才有效 】\n    {\n      key: \"chart_default_step\",\n      title: \"option_chart_default_step\",\n      description: \"option_chart_default_step_desc\",\n      placeholder: 'option_default_value',\n      type: \"input\",\n      min: 1,\n      allowNullFlag: true,\n      withoutSlider: true,\n      require: \"!chart_column_width\"\n    },\n    // 最小柱宽[ 没有配置固定柱宽及每页条目数的情况下，才可以使用 ]\n    {\n      key: \"chart_column_minimum_width\",\n      title: \"option_chart_column_minimum_width\",\n      description: \"option_chart_column_minimum_width_desc\",\n      type: \"input\",\n      min: 5,\n      defaultNumber: 5,\n      allowNullFlag: true,\n      withoutSlider: true,\n      require: \"!chart_column_width;!chart_default_step\"\n    },\n    // 柱宽比例\n    {\n      key: \"chart_column_width_percent_1\",\n      title: \"option_chart_column_width_percent\",\n      description: \"option_chart_column_width_percent_desc\",\n      type: \"input\",\n      min: 10,\n      max: 100,\n      defaultNumber: 60,\n      step: 10,\n      unit: \"%\"\n    },\n    // 隐藏聚合方式 [ 图例的聚合方式 ]\n    {\n      key: \"hide_operator_label\",\n      title: \"option_hide_operator_label\",\n      description: \"option_hide_operator_label_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 禁止图形动画\n    {\n      key: \"animation_forbidden\",\n      title: \"option_animation_forbidden\",\n      description: \"option_animation_forbidden_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 图例限制条目数，默认为50\n    {\n      key: \"legend_count_limit\",\n      title: \"option_legend_count_limit\",\n      description: \"option_legend_count_limit_desc\",\n      defaultNumber: 50,\n      max: 1000,\n      withoutSlider: true,\n      type: \"input\",\n      reTranslateResult: true\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 颜色：颜色主题，图例形状颜色，单Y轴情况下，将颜色分配给各个X轴刻度，各个刻度的颜色\n  {\n    key: \"category_color\",\n    title: \"category_color\",\n    options: [\n    // 自定义图例颜色[ @20221201 tong - 新的图例颜色样式配置结构  从attrColorArray组件调整为container组件 ]\n    // 仪表图只能通过点击选择图例颜色，无法通过配置设置\n    // 图例类型是单个属性列的情况下，配置各个图例的颜色，虚实....\n    {\n      key: \"chart_legend_list\",\n      // \"chart_custom_legend_new\",\n      type: \"legendList\",\n      legendConfigSet: ['color', 'show'],\n      //  当前图例可以配置的值 color: 颜色 ； shape:形状 ；dash： 虚实 ； shadow: 阴影\n      legendValueList: \"legendValueList\",\n      //  当前所有图例使用的配置值\n      defaultLegendList: \"defaultLegendList\",\n      //  当前所有图例的默认值\n      require: \"has_legend_flag\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    // 如果当前图形X轴是单层散点模式 且 没有图例的情况下\n    // 柱状图支持按X轴属性值分配颜色[ 只有在没有图例的情况下，可以如此分配 ]\n    {\n      key: \"chart_color_assigned_to_x_scale\",\n      title: \"option_chart_color_assigned_to_x_scale\",\n      description: \"option_chart_color_assigned_to_x_scale_desc\",\n      type: \"checkbox-prev\",\n      require: \"!has_legend_flag\"\n    },\n    // 柱状图支持按X轴属性值分配颜色后，自定义的各个属性值的颜色\n    {\n      key: \"chart_custom_label_color\",\n      type: \"legendList\",\n      legendConfigSet: ['color'],\n      //  当前图例可以配置的值 color: 颜色 ； shape:形状 ；dash： 虚实 ； shadow: 阴影\n      legendValueList: \"xLabelColorList\",\n      //  当前所有图例使用的配置值\n      defaultLegendList: \"defaultXLabelColorList\",\n      //  当前所有图例的默认值\n      require: \"chart_color_assigned_to_x_scale\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // X轴： X刻度类型[单层/多层/时间]，最高高度，倾斜角度，X轴标题显示，标题自定义，隐藏X轴\n  {\n    key: \"category_x_axis\",\n    title: \"category_x_axis\",\n    options: [\n    // 优先画X轴最右侧的数据\n    {\n      key: \"x_axis_right_first_flag\",\n      title: \"option_x_axis_right_first_flag\",\n      description: \"option_x_axis_right_first_flag_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 显示隐藏X轴标签\n    {\n      key: \"x_axis_label_visible\",\n      title: \"option_axis_label_visible\",\n      type: 'checkbox-prev',\n      defaultValue: true\n    },\n    // X轴标签字体样式 [ 显示轴标签才可以配置， 大小 ，颜色，字体，加粗，斜体，下划线 ]\n    {\n      key: \"x_axis_label_style\",\n      title: \"option_font_style\",\n      type: 'fontStyle',\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"x_axis_label_visible\"\n    },\n    // X轴刻度类型[ 单层属性 / 多层属性 / 时间轴 ]\n    // 刻度类型只能在单层与多层之间切换 或者 单层与时间轴之间切换， 所以提供两种选项：自动 ; 单层 ；\n    {\n      key: \"x_axis_draw_type\",\n      title: \"option_x_axis_draw_type\",\n      description: \"option_x_axis_draw_type_desc\",\n      type: 'selectTile',\n      selection: [\"system_auto_default\", \"option_select_x_axis_dot_line\"],\n      explainDefaultFlag: true,\n      defaultValue: \"system_auto_default\",\n      require: \"x_axis_label_visible\"\n    },\n    // X轴单层属性下，旋转角度\n    {\n      // attribute_label_rotate\n      key: \"x_axis_label_dot_line_rotation_value\",\n      title: \"option_x_axis_label_dot_line_rotation_value\",\n      type: 'input',\n      withoutSlider: true,\n      defaultNumber: 30,\n      min: 0,\n      max: 180,\n      // X轴是单层散点模式 且 显示轴标签时，才可以配置旋转角度\n      require: \"x_axis_label_visible;x_axis_draw_type=option_select_x_axis_dot_line\"\n    },\n    // X轴单层属性下，刻度间距\n    {\n      // attribute_label_space_width\n      key: \"x_axis_label_dot_line_space_width\",\n      title: \"option_x_axis_label_dot_line_space_width\",\n      description: \"option_x_axis_label_dot_line_space_width_desc\",\n      type: 'input',\n      withoutSlider: true,\n      min: 1,\n      max: 999,\n      defaultNumber: 50,\n      // X轴是单层散点模式 且 显示轴标签时，才可以配置旋转角度\n      require: \"x_axis_label_visible;x_axis_draw_type=option_select_x_axis_dot_line\"\n    },\n    // X轴最大高度限制\n    {\n      // attribute_label_max_height\n      key: \"x_axis_label_max_height_percent\",\n      title: \"option_x_axis_label_max_height_percent\",\n      description: \"option_x_axis_label_max_height_percent_desc\",\n      type: 'input',\n      min: 0,\n      max: 100,\n      defaultNumber: 30,\n      step: 5,\n      require: \"x_axis_label_visible\"\n    },\n    // X轴标题自动 / 强制显示 / 强制隐藏 [ 平铺选项 ]\n    {\n      key: \"x_axis_title_visible\",\n      title: \"option_axis_title_visible\",\n      description: \"option_axis_title_visible_desc\",\n      type: 'selectTile',\n      prevIcon: \"eye-icon\",\n      openEyeValue: \"option_title_visible_show\",\n      selection: [\"system_auto_default\", \"option_title_visible_show\", \"option_title_visible_hide\"],\n      explainDefaultFlag: true,\n      defaultValue: \"system_auto_default\"\n    },\n    // 自定义的X轴标题内容\n    {\n      key: \"x_axis_title_content\",\n      title: \"option_axis_title_content\",\n      description: \"option_axis_title_content_desc\",\n      type: \"text\",\n      require: \"x_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题字体样式\n    {\n      key: \"x_axis_title_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"x_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题对齐方式\n    {\n      key: \"x_axis_title_alignment\",\n      title: \"option_font_alignment\",\n      type: \"fontAlign\",\n      defaultValue: \"center\",\n      require: \"x_axis_title_visible=option_title_visible_show\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // Y轴：Y轴刻度最宽宽度，Y轴标尺，Y轴标题\n  {\n    key: \"category_y_axis\",\n    title: \"category_y_axis\",\n    options: [\n    // 显示隐藏Y轴标签\n    {\n      key: \"y_axis_label_visible\",\n      title: \"option_axis_label_visible\",\n      type: 'checkbox-prev',\n      defaultValue: true\n    },\n    // Y轴标签字体样式 [ 显示轴标签才可以配置， 大小 ，颜色，字体，加粗，斜体，下划线 ]\n    {\n      key: \"y_axis_label_style\",\n      title: \"option_font_style\",\n      type: 'fontStyle',\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"y_axis_label_visible\"\n    },\n    // Y轴数据格式\n    {\n      key: \"measure_left_y_configure\",\n      title: \"option_measure_configure\",\n      description: \"option_measure_left_y_configure_desc\",\n      type: \"axisFormat\"\n    },\n    // Y轴最大宽度限制\n    {\n      key: \"y_axis_label_max_width_percent\",\n      title: \"option_y_axis_label_max_width_percent\",\n      type: 'input',\n      min: 0,\n      max: 100,\n      defaultNumber: 30,\n      step: 5,\n      require: \"y_axis_label_visible\"\n    },\n    // Y轴刻度类型[ 自动，自定义刻度间隔 ]\n    {\n      key: \"measure_scale_type\",\n      title: \"option_measure_scale_type\",\n      description: \"option_measure_scale_type_desc\",\n      type: \"selectTile\",\n      selection: [\"option_default_value\", \"option_measure_scale_type_define\"],\n      explainDefaultFlag: true,\n      defaultValue: \"option_default_value\"\n    },\n    // 默认类型下最大值\n    {\n      key: \"measure_scale_min\",\n      title: \"option_measure_scale_min\",\n      description: \"option_measure_scale_min_desc\",\n      type: \"text\",\n      require: 'measure_scale_type!=option_measure_scale_type_define'\n    },\n    // 默认类型下最小值\n    {\n      key: \"measure_scale_max\",\n      title: \"option_measure_scale_max\",\n      description: \"option_measure_scale_max_desc\",\n      type: \"text\",\n      require: 'measure_scale_type!=option_measure_scale_type_define'\n    },\n    // 自定义类型下最小值\n    {\n      key: \"measure_scale_defined_min\",\n      title: \"option_measure_scale_min\",\n      description: \"option_measure_scale_defined_min_desc\",\n      type: \"text\",\n      default: \"0\",\n      require: 'measure_scale_type=option_measure_scale_type_define'\n    },\n    // 自定义类型下间隔值\n    {\n      key: \"measure_scale_step\",\n      title: \"option_measure_scale_step\",\n      description: \"option_measure_scale_step_desc\",\n      type: \"text\",\n      require: 'measure_scale_type=option_measure_scale_type_define'\n    },\n    // 自定义类型下的步数\n    {\n      key: \"measure_scale_step_number\",\n      title: \"option_measure_scale_step_number\",\n      description: \"option_measure_scale_step_number_desc\",\n      type: \"input\",\n      min: 2,\n      defaultNumber: 5,\n      require: 'measure_scale_type=option_measure_scale_type_define'\n    },\n    // Y轴标题自动 / 强制显示 / 强制隐藏 [ 平铺选项 ]\n    {\n      key: \"y_axis_title_visible\",\n      title: \"option_axis_title_visible\",\n      description: \"option_axis_title_visible_desc\",\n      type: 'selectTile',\n      prevIcon: \"eye-icon\",\n      openEyeValue: \"option_title_visible_show\",\n      selection: [\"system_auto_default\", \"option_title_visible_show\", \"option_title_visible_hide\"],\n      explainDefaultFlag: true,\n      defaultValue: \"system_auto_default\"\n    },\n    // 自定义的Y轴标题内容\n    {\n      key: \"y_axis_title_content\",\n      title: \"option_axis_title_content\",\n      type: \"text\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题字体样式\n    {\n      key: \"y_axis_title_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    // 标题对齐方式\n    {\n      key: \"y_axis_title_alignment\",\n      title: \"option_font_alignment\",\n      type: \"fontAlign\",\n      defaultValue: \"center\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 右Y轴[ 有右Y轴的情况下，该信息由画图组件提供出去 ]\n  {\n    key: \"category_right_y_axis\",\n    title: \"category_right_y_axis\",\n    require: \"has_right_y_axis\",\n    options: [\n    // Y轴数据格式\n    {\n      key: \"measure_right_y_configure\",\n      title: \"option_measure_configure\",\n      description: \"option_measure_right_y_configure_desc\",\n      type: \"axisFormat\"\n    },\n    // Y轴刻度类型[ 自动，自定义刻度间隔 ]\n    {\n      key: \"measure_scale_type_right\",\n      title: \"option_measure_scale_type\",\n      description: \"option_measure_scale_type_desc\",\n      type: \"selectTile\",\n      selection: [\"option_default_value\", \"option_measure_scale_type_define\"],\n      explainDefaultFlag: true,\n      defaultValue: \"option_default_value\"\n    },\n    // 默认类型下最大值\n    {\n      key: \"measure_scale_min_right\",\n      title: \"option_measure_scale_min\",\n      description: \"option_measure_scale_min_desc\",\n      type: \"text\",\n      require: 'measure_scale_type_right!=option_measure_scale_type_define'\n    },\n    // 默认类型下最小值\n    {\n      key: \"measure_scale_max_right\",\n      title: \"option_measure_scale_max\",\n      description: \"option_measure_scale_max_desc\",\n      type: \"text\",\n      require: 'measure_scale_type_right!=option_measure_scale_type_define'\n    },\n    // 自定义类型下最小值\n    {\n      key: \"measure_scale_defined_min_right\",\n      title: \"option_measure_scale_min\",\n      description: \"option_measure_scale_defined_min_desc\",\n      type: \"text\",\n      default: \"0\",\n      require: 'measure_scale_type_right=option_measure_scale_type_define'\n    },\n    // 自定义类型下间隔值\n    {\n      key: \"measure_scale_step_right\",\n      title: \"option_measure_scale_step\",\n      description: \"option_measure_scale_step_desc\",\n      type: \"text\",\n      require: 'measure_scale_type_right=option_measure_scale_type_define'\n    },\n    // 自定义类型下的步数\n    {\n      key: \"measure_scale_step_number_right\",\n      title: \"option_measure_scale_step_number\",\n      description: \"option_measure_scale_step_number_desc\",\n      type: \"input\",\n      min: 2,\n      defaultNumber: 5,\n      require: 'measure_scale_type_right=option_measure_scale_type_define'\n    },\n    // 自定义的Y轴标题内容\n    {\n      key: \"right_y_axis_title_content\",\n      title: \"option_axis_title_content\",\n      type: \"text\",\n      require: \"y_axis_title_visible=option_title_visible_show\"\n    },\n    // 左右Y轴0刻度对齐\n    {\n      key: \"measure_scale_parallel\",\n      title: \"option_measure_scale_parallel\",\n      description: \"option_measure_scale_parallel_desc\",\n      type: \"checkbox-prev\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  //图例： 是否隐藏，图例色块形状，图例位置，图例宽度，图例间隔 ， 图例限制条目数\n  {\n    key: \"category_legend_config\",\n    title: \"category_legend_config\",\n    require: \"has_legend_flag\",\n    options: [\n    // 隐藏图例\n    {\n      key: \"show_legend\",\n      title: \"option_map_info_show\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"legend_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"show_legend\"\n    },\n    // 图例形状\n    {\n      key: \"legend_shape_type\",\n      title: \"option_legend_shape_type\",\n      description: \"option_legend_shape_type_desc\",\n      type: \"select\",\n      selection: [\"option_legend_shape_type_circle\", \"option_legend_shape_type_three\", \"option_legend_shape_type_four\", \"option_legend_shape_type_rect\", \"option_legend_shape_type_five\", \"option_legend_shape_type_diamond\", \"option_legend_shape_type_loop\"],\n      require: \"show_legend\"\n    },\n    // 图例位置\n    {\n      key: \"legend_position\",\n      title: \"option_legend_position\",\n      description: \"option_legend_position_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_position_right\", \"option_position_top\", \"option_position_bottom\", \"option_position_right_top\"],\n      require: \"show_legend\"\n    },\n    // 图例宽度\n    {\n      key: \"legend_position_width\",\n      title: \"option_legend_position_width\",\n      description: \"option_legend_position_width_desc\",\n      type: \"input\",\n      withoutSlider: true,\n      min: 0,\n      max: 200,\n      defaultNumber: 80,\n      require: \"show_legend;legend_position=option_position_top,option_position_bottom\"\n    },\n    // 图例离画图区域的间隔\n    {\n      key: \"legend_position_offset\",\n      title: \"option_legend_position_offset\",\n      description: \"option_legend_position_offset_desc\",\n      type: \"input\",\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      defaultNumber: 5,\n      require: \"show_legend\"\n    },\n    // 图例之间的间隔\n    {\n      key: \"legend_position_interval\",\n      title: \"option_legend_position_interval\",\n      description: \"option_legend_position_interval_desc\",\n      type: \"input\",\n      allowNullFlag: true,\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      require: \"show_legend\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 网格线配置\n  {\n    key: \"category_grid_line\",\n    title: \"category_grid_line\",\n    options: [\n    // 网格线分别可以配置零线显示/样式（虚实粗细颜色） ； 非零线显示/样式（虚实粗细颜色）；\n    // 显示所有的网格线\n    {\n      key: \"grid_show_all_line\",\n      title: \"option_grid_show_all_line\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 只显示零线\n    {\n      key: \"grid_show_only_zero_line\",\n      title: \"option_grid_show_only_zero_line\",\n      description: \"option_grid_show_only_zero_line_desc\",\n      type: \"checkbox-prev\",\n      require: \"grid_show_all_line\"\n    },\n    // 网格线样式\n    {\n      key: \"grid_line_style\",\n      title: \"option_grid_line_style\",\n      description: \"option_grid_line_style_desc\",\n      type: \"lineStyle\",\n      defaultValue: {\n        lineColor: \"rgba(28, 28, 28 , 0.1)\",\n        lineWidth: 1\n      },\n      require: \"grid_show_all_line\"\n    },\n    // 零线样式\n    {\n      key: \"grid_zero_line_style\",\n      title: \"option_grid_zero_line_style\",\n      description: \"option_grid_zero_line_style_desc\",\n      type: \"lineStyle\",\n      defaultValueConfig: \"grid_line_style\",\n      defaultValue: {\n        lineColor: \"rgba(28, 28, 28 , 0.1)\",\n        lineWidth: 1\n      },\n      require: \"grid_show_all_line\"\n    },\n    // 隐藏最大值/最小值标准线，在有的情况下显示该配置\n    {\n      key: \"grid_remove_standard_line\",\n      title: \"option_grid_remove_standard_line\",\n      description: \"option_grid_remove_standard_line_desc\",\n      type: \"checkbox-prev\",\n      require: \"allow_marker_flag\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    // 是否显示数据标签\n    {\n      key: \"label_text_visible\",\n      title: \"option_label_text_visible\",\n      description: \"option_label_text_visible_desc\",\n      type: 'checkbox-prev'\n    },\n    // 字体样式\n    {\n      key: \"label_text_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label-2\",\n      require: \"label_text_visible\"\n    },\n    // 数据标签的内容\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      require: 'label_text_visible',\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    // 柱状（居内/居外/居中）\n    {\n      key: \"label_text_column_position\",\n      title: \"option_label_text_position\",\n      description: \"option_label_text_position_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_label_position_in\", \"option_label_position_out\", \"option_label_position_center\"],\n      require: 'label_text_visible'\n    },\n    // 旋转角度0/90/270\n    {\n      key: \"label_text_rotation_angle\",\n      title: \"option_label_text_rotation_angle\",\n      description: \"option_label_text_rotation_angle_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_label_rotation_0\", \"option_label_rotation_90\", \"option_label_rotation_270\"],\n      require: 'label_text_visible'\n    },\n    // 标签显示项 [ 全部/标准最大值最小值平均值 ]\n    {\n      key: \"label_text_visible_items\",\n      title: \"option_label_text_visible_items\",\n      description: \"option_label_text_visible_items_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_label_visible_all\", \"option_label_visible_standard\"],\n      require: 'label_text_visible'\n    },\n    // 标签是否允许重叠\n    {\n      key: \"label_text_allow_overlap\",\n      title: \"option_label_text_allow_overlap\",\n      description: \"option_label_text_allow_overlap_desc\",\n      type: \"checkbox\",\n      require: 'label_text_visible'\n    },\n    // // 使用坐标轴的格式\n    // {\n    //     key: \"label_use_scale_abbreviation\",\n    //     title: \"option_label_use_scale_abbreviation\",\n    //     description: \"option_label_use_scale_abbreviation_desc\",\n    //     type: \"checkbox\",\n    //     require: 'label_text_visible'\n    // }\n\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 悬浮文本设置\n  {\n    key: \"category_suspend_text\",\n    title: \"category_suspend_text\",\n    options: [{\n      key: \"suspend_text_regex\",\n      title: \"option_suspend_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 标度配置\n  {\n    key: \"category_scale_config\",\n    title: \"category_scale_config\",\n    require: \"!has_right_y_axis\",\n    options: [\n    // 显示/隐藏标度\n    {\n      key: \"scale_y_visible\",\n      title: \"option_scale_y_visible\",\n      type: 'checkbox-prev'\n    },\n    // 其他图形的标度配置全部调整为数组(container)模式  @20221206 by tong\n    {\n      key: \"scale_y_range\",\n      description: \"option_scale_y_range_desc\",\n      type: \"container\",\n      containerClassType: \"borderItem\",\n      options: [\n      // 标度类型 - 直线或区间 [ 默认为直线 ]\n      {\n        type: \"selectTile\",\n        key: \"option_scale_config_type\",\n        title: \"option_scale_config_type\",\n        selection: [\"options_scale_config_type_line\", \"options_scale_config_type_range\"]\n      },\n      // 文本\n      {\n        type: \"text\",\n        title: \"option_scale_config_text\"\n      },\n      // 标度使用列信息\n      {\n        type: \"select\",\n        title: \"option_scale_config_column\",\n        selectType: \"yAxis\",\n        defaultValueKey: 'option_default_value' //  默认显示值的i18n key\n      },\n      // ==== 标度为直线的情况下 start==================================\n      // 标度值类型\n      {\n        type: \"select\",\n        key: \"option_scale_config_value_type\",\n        title: \"option_scale_config_value_type\",\n        selection: [\"options_config_value_input\", \"options_config_value_max\", \"options_config_value_min\", \"options_config_value_avg\", \"options_config_value_std\"],\n        require: \"option_scale_config_type=options_scale_config_type_line\",\n        defaultValue: \"options_config_value_avg\"\n      },\n      // 标度值\n      {\n        type: \"text\",\n        key: \"option_scale_config_value_input\",\n        title: \"option_scale_config_value_input\",\n        require: \"option_scale_config_type=options_scale_config_type_line;option_scale_config_value_type=options_config_value_input\"\n      }, {\n        type: \"color\",\n        title: \"option_scale_config_value_color\",\n        require: \"option_scale_config_type=options_scale_config_type_line\",\n        defaultColor: \"#D62728\"\n      },\n      // 粗细\n      {\n        type: \"input\",\n        title: \"option_scale_config_value_thickness\",\n        require: \"option_scale_config_type=options_scale_config_type_line\",\n        withoutSlider: true,\n        min: 0,\n        defaultNumber: 1\n      },\n      // 虚实\n      {\n        type: \"select\",\n        title: \"option_scale_config_value_style\",\n        require: \"option_scale_config_type=options_scale_config_type_line\",\n        selection: [\"option_line_style_solid_line\", \"option_line_style_dashed\"],\n        defaultValue: \"option_line_style_solid_line\"\n      },\n      // ==== 标度为直线的情况下 end==================================\n\n      // ==== 标度为区间的情况下 start==================================\n      // 上区间值类型\n      {\n        type: \"select\",\n        key: \"option_scale_config_top_range_type\",\n        title: \"option_scale_config_top_range_type\",\n        require: \"option_scale_config_type=options_scale_config_type_range\",\n        selection: [\"options_config_value_input\", \"options_config_value_max\", \"options_config_value_min\", \"options_config_value_avg\", \"options_config_value_std\"],\n        defaultValue: \"options_config_value_input\"\n      },\n      // 上区间值\n      {\n        type: \"text\",\n        title: \"option_scale_config_top_range_input\",\n        require: \"option_scale_config_type=options_scale_config_type_range;option_scale_config_top_range_type=option_default_value,options_config_value_input\"\n      }, {\n        type: \"select\",\n        key: \"option_scale_config_bottom_range_type\",\n        title: \"option_scale_config_bottom_range_type\",\n        require: \"option_scale_config_type=options_scale_config_type_range\",\n        selection: [\"options_config_value_input\", \"options_config_value_max\", \"options_config_value_min\", \"options_config_value_avg\", \"options_config_value_std\"],\n        defaultValue: \"options_config_value_input\"\n      },\n      // 下区间值\n      {\n        type: \"text\",\n        title: \"option_scale_config_bottom_range_input\",\n        require: \"option_scale_config_type=options_scale_config_type_range;option_scale_config_bottom_range_type=option_default_value,options_config_value_input\"\n      },\n      // 区间颜色\n      {\n        type: \"color\",\n        title: \"option_scale_config_range_color\",\n        require: \"option_scale_config_type=options_scale_config_type_range\",\n        defaultColor: \"#D62728\"\n      },\n      // 区间透明度\n      {\n        type: \"input\",\n        title: \"option_scale_config_range_color_transparent\",\n        require: \"option_scale_config_type=options_scale_config_type_range\",\n        min: 0,\n        step: 5,\n        max: 100,\n        defaultNumber: 30,\n        unit: \"%\"\n      },\n      // 区间边框颜色\n      {\n        type: \"color\",\n        title: \"option_scale_config_range_edge_color\",\n        require: \"option_scale_config_type=options_scale_config_type_range\",\n        defaultColor: \"#D62728\"\n      },\n      // 区间边框虚实\n      {\n        type: \"select\",\n        title: \"option_scale_config_range_edge_style\",\n        require: \"option_scale_config_type=options_scale_config_type_range\",\n        selection: [\"option_line_style_solid_line\", \"option_line_style_dashed\"],\n        defaultValue: \"option_line_style_solid_line\"\n      }\n      // ==== 标度为区间的情况下 end==================================\n      ],\n      withoutRange: true,\n      rangeInits: [{}],\n      require: \"scale_y_visible\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  /**\r\n   * 图形配置的辅助对象：当前图形定义的宏列表 及 宏 解析方法 ； 适配之前图形配置值的方法 ；\r\n   *\r\n   * 当前图形提供的宏列表[ 宏名的命名规则： 开头是%_ 用_连接的大写字符字符串 ]\r\n   * 供自定义数据标签 及 悬浮文本使用，可以让用户配置显示内容\r\n   * 键值对  MacroName : MacroDisplayNameKey\r\n   * */\n  chartConfigureAdvanced: {\n    // 根据宏配置列表，已足够外部组件将 %_NAME:%_VALUE 翻译成 [属性]：[值] 显示给用户\n    // 如果当前图形支持换行的宏，则输入时允许输入换行符 ； 否则编辑时也不支持换行符 ；\n    chartMacroList: [{\n      key: '%_NAME',\n      nameKey: '%_NAME',\n      descriptionKey: '%_NAME_desc'\n    }, {\n      key: '%_CATEGORY_NAME',\n      nameKey: '%_CATEGORY_NAME',\n      descriptionKey: '%_CATEGORY_NAME_desc'\n    }, {\n      key: '%_CATEGORY_NUMBER',\n      nameKey: '%_CATEGORY_NUMBER',\n      descriptionKey: '%_CATEGORY_NUMBER_desc'\n    }, {\n      key: '%_SERIES_NAME',\n      nameKey: '%_SERIES_NAME',\n      descriptionKey: '%_SERIES_NAME_desc'\n    }, {\n      key: '%_SERIES_NUMBER',\n      nameKey: '%_SERIES_NUMBER',\n      descriptionKey: '%_SERIES_NUMBER_desc'\n    }, {\n      key: '%_VALUE_NAME',\n      nameKey: '%_VALUE_NAME',\n      descriptionKey: '%_VALUE_NAME_desc'\n    }, {\n      key: '%_VALUE',\n      nameKey: '%_VALUE',\n      descriptionKey: '%_VALUE_desc'\n    }, {\n      key: '%_CATEGORY_TOTAL',\n      nameKey: '%_CATEGORY_TOTAL',\n      descriptionKey: '%_CATEGORY_TOTAL_desc'\n    }, {\n      key: '%_CATEGORY_AVERAGE',\n      nameKey: '%_CATEGORY_AVERAGE',\n      descriptionKey: '%_CATEGORY_AVERAGE_desc'\n    }, {\n      key: '%_PERCENT_OF_CATEGORY',\n      nameKey: '%_PERCENT_OF_CATEGORY',\n      descriptionKey: '%_PERCENT_OF_CATEGORY_desc'\n    }, {\n      key: '%_PERCENT_OF_TOTAL',\n      nameKey: '%_PERCENT_OF_TOTAL',\n      descriptionKey: '%_PERCENT_OF_TOTAL_desc'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR',\n      descriptionKey: '%_BR_desc'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type        -\r\n     *\r\n     *              xLabel       -   图形单元对应的属性值 用于实现%_NAME %_CATEGORY_NAME\r\n     *              xLabelIndex  -   图形单元对应的属性索引，用于实现 %_CATEGORY_NUMBER\r\n     *              xLabelTotal  -   图形单元对应的属性上所有值的总和用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              xLabelNumber -   图形单元对应的属性上所有值的个数用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              yValue       -   图形单元对应的值 用于实现 %_VALUE\r\n     *              yAxis        -   图形单元对应的值列 用于实现 %_VALUE_NAME  %_SERIES_NAME\r\n     *              legend       -   图形单元对应的图例名(为空时说明是多Y轴) 用于实现 %_SERIES_NAME\r\n     *              legendIndex  -   图形单元对应的图例索引 用于实现 %_SERIES_NUMBER\r\n     *              legendTotal  -   图形单元对应的图例上所有值的总和,用于实现 %_PERCENT_OF_TOTAL\r\n     *              rowData -  图形单元对应的一整行数据 用于实现%_COLUMN_N的宏\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case \"%_NAME\":\n          case \"%_CATEGORY_NAME\":\n            theMatchedTextValue += options.xLabel || '';\n            break;\n          case \"%_CATEGORY_NUMBER\":\n            theMatchedTextValue += options.xLabelIndex || '';\n            break;\n          case \"%_SERIES_NAME\":\n            if (options.legend) {\n              theMatchedTextValue += options.legend || '';\n            } else if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_SERIES_NUMBER\":\n            theMatchedTextValue += options.legendIndex || '';\n            break;\n          case \"%_VALUE_NAME\":\n            if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.yValue, options.yAxis) || '';\n            break;\n          case \"%_CATEGORY_TOTAL\":\n            theMatchedTextValue += options.xLabelTotal || '';\n            break;\n          case \"%_CATEGORY_AVERAGE\":\n            let theAverage = options.xLabelTotal / (options.xLabelNumber || 1);\n            if (!isNaN(theAverage)) {\n              theMatchedTextValue += _DataFocusMethod.formatData(_DataFocusMethod.getValidNum(theAverage, 2), options.yAxis);\n            }\n            break;\n          case \"%_PERCENT_OF_CATEGORY\":\n            let theCPercent = options.yValue / (options.xLabelTotal || 1);\n            if (!isNaN(theCPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theCPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_PERCENT_OF_TOTAL\":\n            let theTPercent = options.yValue / (options.legendTotal || 1);\n            if (!isNaN(theTPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theTPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n              let theColumnN = parseInt(theMatchStr.substring(9));\n              const matchedHeader = options.headers[theColumnN - 1];\n              if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN <= options.rowData.length) {\n                theMatchedTextValue += _DataFocusMethod.formatData(options.rowData[theColumnN - 1], matchedHeader) || '';\n              }\n            }\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    },\n    // 如果当前图形配置在上线后需要更新配置，需要兼容行为，则在此处处理[ 不同图形兼容方法不一样 ]\n    compatibleHistoryConfigure: function (chartConfigure, options) {\n      if (!options) return false;\n      options = options || {};\n      // 图形字体大小修改了值结构\n      if (_DataFocusMethod.isPureNumber(chartConfigure.font_size_label)) {\n        let theFontSize = parseInt(chartConfigure.font_size_label);\n        chartConfigure.font_size_label = {\n          fontSize: theFontSize\n        };\n      }\n      if (chartConfigure.attribute_label_rotate !== undefined) {\n        chartConfigure.x_axis_label_dot_line_rotation_value = chartConfigure.attribute_label_rotate;\n        chartConfigure.attribute_label_rotate = undefined;\n      }\n      // 刻度间隔 变了名字\n      if (chartConfigure.attribute_label_space_width !== undefined) {\n        chartConfigure.x_axis_label_dot_line_space_width = chartConfigure.attribute_label_space_width;\n        chartConfigure.attribute_label_space_width = undefined;\n      }\n      // 最大高度限制 变了名字\n      if (chartConfigure.attribute_label_max_height !== undefined) {\n        chartConfigure.x_axis_label_max_height_percent = chartConfigure.attribute_label_max_height * 100;\n        chartConfigure.attribute_label_max_height = undefined;\n      }\n\n      // 图形标题隐藏配置调整为两个配置值 [ 新的柱状图 ]\n      if (chartConfigure.hidden_chart_title) {\n        chartConfigure.x_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.y_axis_title_visible = \"option_title_visible_hide\";\n        chartConfigure.hidden_chart_title = undefined;\n      }\n      // 隐藏X轴标签修改了名字\n      if (chartConfigure.hide_x_axis) {\n        chartConfigure.x_axis_label_visible = false;\n        chartConfigure.hide_x_axis = undefined;\n      }\n      // 隐藏Y轴就是隐藏Y轴标签及Y轴网格线 , 修改了名字\n      if (chartConfigure.hide_y_axis) {\n        chartConfigure.y_axis_label_visible = false;\n        chartConfigure.grid_show_all_line = false;\n        chartConfigure.hide_y_axis = undefined;\n      }\n\n      // 属性图例颜色 与 Y轴颜色只会存在其中一个 [ 将之前图形中配置的 yAxisColors 及 legendColors 全部统一到当前配置chart_legend_list中]\n      if (!chartConfigure.chart_legend_list) {\n        // 图例配置列表配置了属性图例的颜色\n        if (chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.length || options.legendColors && options.legendColors.length) {\n          let theLegendList = [],\n            theLegendIdObj = {};\n          chartConfigure.chart_custom_legend_new && chartConfigure.chart_custom_legend_new.forEach(function (legend) {\n            if (legend.legend !== undefined && legend.color) {\n              let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId(\"legendAxis\", legend.legend);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: legend.legend,\n                  color: legend.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_custom_legend_new = undefined;\n\n          // 继承之前保存的legendColors配置\n          options.legendColors && options.legendColors.forEach(function (legend) {\n            if (legend.legend !== undefined && legend.color) {\n              let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId(\"legendAxis\", legend.legend);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: legend.legend,\n                  color: legend.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_legend_list = theLegendList;\n        }\n        // 图例配置列表配置了Y轴的颜色\n        if (chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.length || options.yAxisColors && options.yAxisColors.length) {\n          let theLegendList = [],\n            theLegendIdObj = {};\n          chartConfigure.chart_custom_legend_new_measure && chartConfigure.chart_custom_legend_new_measure.forEach(function (configLeg) {\n            let theLegendNameObj = configLeg.options && configLeg.options.find(function (obj) {\n                return obj.title === 'option_chart_legend_measure_name';\n              }),\n              theLegendName = theLegendNameObj && theLegendNameObj.value || '',\n              theLegendColorObj = configLeg.options && configLeg.options.find(function (obj) {\n                return obj.title === 'option_chart_legend_color';\n              }),\n              theLegendColor = theLegendColorObj && theLegendColorObj.value || '';\n            theLegendName = theLegendName.replace(\"-y-axis-\", \"\");\n            let theYAxisArray = theLegendName.split('-'),\n              theColIdx = theYAxisArray[0],\n              theColName = theYAxisArray[1],\n              theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId('YAxis', theColIdx);\n            if (theLegendName && theLegendColor) {\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: theColName,\n                  color: theLegendColor\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_custom_legend_new_measure = undefined;\n\n          // 继承之前保存的yAxisColors配置\n          console.log('---------------yAxisColors------------');\n          options.yAxisColors && options.yAxisColors.forEach(function (yAxis) {\n            if (yAxis.col_id !== undefined && yAxis.color) {\n              if (options.tableData && options.tableData.headers) {\n                let theMatchedHeader = options.tableData.headers.find(function (head) {\n                  return yAxis.col_id === head.col_id || head.idx + '' === yAxis.col_id + '';\n                });\n                if (theMatchedHeader) yAxis.col_id = theMatchedHeader.idx;\n              }\n              let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_5__[\"default\"].generateLegendId(\"YAxis\", yAxis.col_id);\n              if (!theLegendIdObj[theLegendId]) {\n                theLegendList.push({\n                  id: theLegendId,\n                  legend: yAxis.name,\n                  color: yAxis.color\n                });\n                theLegendIdObj[theLegendId] = true;\n              }\n            }\n          });\n          chartConfigure.chart_legend_list = theLegendList;\n        }\n      }\n      // 隐藏网格线调整了显示网格线的名字\n      if (chartConfigure.grid_hide_all_line) {\n        chartConfigure.grid_show_all_line = false;\n        chartConfigure.grid_hide_all_line = undefined;\n      }\n      // 零线颜色及零线粗细调整了配置名\n      if (chartConfigure.grid_zero_color || chartConfigure.grid_zero_width) {\n        chartConfigure.grid_zero_line_style = {\n          lineColor: chartConfigure.grid_zero_color,\n          lineWidth: chartConfigure.grid_zero_width\n        };\n        chartConfigure.grid_zero_color = undefined;\n        chartConfigure.grid_zero_width = undefined;\n      }\n      // 柱宽比例调整了名字,并且变了值\n      if (_DataFocusMethod.isPureNumber(chartConfigure.chart_column_width_percent)) {\n        chartConfigure.chart_column_width_percent_1 = chartConfigure.chart_column_width_percent * 100;\n        chartConfigure.chart_column_width_percent = undefined;\n      }\n      // 显示图例\n      if (chartConfigure.hide_legend && chartConfigure.show_legend === undefined) {\n        chartConfigure.show_legend = false;\n        chartConfigure.hide_legend = undefined;\n      }\n\n      // 标度增加了显示与隐藏的配置\n      if (chartConfigure.scale_y_visible === undefined && chartConfigure.scale_y_range && chartConfigure.scale_y_range.length) {\n        chartConfigure.scale_y_visible = true;\n        chartConfigure.scale_y_range && chartConfigure.scale_y_range.forEach(function (theScaleYItem) {\n          // 以前标度类型默认值是default, 现在默认的类型是直线，所以得将之前的配置转换为具体值\n          let theTypeOption = theScaleYItem.options && theScaleYItem.options.find(function (option) {\n            return option.title === \"option_scale_config_type\";\n          });\n          if (!theTypeOption) {\n            theScaleYItem.options = theScaleYItem.options || [];\n            theScaleYItem.options.push({\n              title: \"option_scale_config_type\",\n              value: \"option_default_value\"\n            });\n          } else if (theTypeOption && !theTypeOption.value) theTypeOption.value = 'option_default_value';\n\n          // 以前直线的粗细是类型，目前调整为数值\n          let theThickness = theScaleYItem.options && theScaleYItem.options.find(function (option) {\n            return option.title === \"option_scale_config_value_thickness\";\n          });\n          if (theThickness && theThickness.value) {\n            switch (theThickness.value) {\n              case \"option_thickness_line_medium\":\n                theThickness.value = 2;\n                break;\n              case \"option_thickness_line_heavy\":\n                theThickness.value = 3;\n                break;\n            }\n          }\n        });\n      }\n    }\n  },\n  // [*必填项]图轴及图表自定义的中英文\n  i18nObj: {\n    chinese: {\n      \"system_auto_default\": \"自动\",\n      \"user_define_text\": \"自定义\",\n      \"category_x_axis\": \"X轴\",\n      \"option_x_axis_right_first_flag\": \"优先画X轴最右侧数据\",\n      \"option_x_axis_right_first_flag_desc\": \"默认情况下，从X轴最左侧数据开始画，超出一屏时往右分页显示。<br />开启优先画X轴最右侧数据后，从X轴最右侧数据开始画，超出一屏时往左分页显示\",\n      \"option_x_axis_draw_type\": \"X轴类型\",\n      \"option_select_x_axis_dot_line\": \"单层散点\",\n      \"option_select_x_axis_time_line\": \"时间轴\",\n      \"option_select_x_axis_level_line\": \"多层属性\",\n      \"option_x_axis_draw_type_desc\": \"X轴总共有三种类型：\" + \"<br /> 多层属性<span class='color-main-green'>[自动识别]</span>：X轴有2个或3个属性列时，自动会识别使用多层属性展示X轴刻度\" + \"<br /> 时间轴<span class='color-main-green'>[自动识别]</span>：X轴只有1个时间列 且 经过每天/每小时/每分钟聚合时，自动会识别使用时间轴展示X轴刻度\" + \"<br /> 单层散点<span class='color-main-green'>[自动识别]</span>：所有数据均可以强制使用单层三点的模式展示X轴刻度\" + \"<br /> 系统会自动适配合适的X轴，但是您可以强制切换称单层单点模式\",\n      \"option_axis_label_visible\": \"轴标签\",\n      \"option_axis_title_visible\": \"轴标题\",\n      \"option_axis_title_visible_desc\": \"自动情况下，会在搜索页面会显示标题 ； 在看板中会隐藏标题 ；\",\n      \"option_title_visible_show\": \"显示\",\n      \"option_title_visible_hide\": \"隐藏\",\n      \"option_axis_title_content\": \"标题内容\",\n      \"option_axis_title_content_desc\": \"默认会使用X轴的列名\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"旋转角度\",\n      \"option_x_axis_label_dot_line_space_width\": \"刻度间距\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"X轴刻度是单层散点模式下，刻度之间的最小间距，默认是50（即每50px显示一个刻度）\",\n      \"option_x_axis_label_max_height_percent\": \"最大高度(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"X轴是单层散点模式下，超出最大高度百分比时，截取字符串显示；其他模式下，超出最大高度时，将不显示X轴刻度\",\n      \"option_font_style\": \"字体\",\n      \"option_font_alignment\": \"对齐方式\",\n      \"category_y_axis\": \"Y轴\",\n      \"option_y_axis_label_max_width_percent\": \"最大宽度(%)\",\n      \"option_measure_configure\": \"格式配置\",\n      \"category_right_y_axis\": \"右Y轴\",\n      \"category_color\": \"颜色\",\n      \"option_chart_column_minimum_width\": \"最小柱宽\",\n      \"option_chart_column_minimum_width_desc\": \"在您没有配置固定刻度宽度及固定每页刻度数的情况下，会依据画图区域宽度及最小柱宽自适应画图数据，默认最小柱宽是5px\",\n      \"option_chart_column_width\": \"固定柱宽\",\n      \"option_chart_column_width_desc\": \"配置固定柱宽后，图形中X轴每个刻度中柱子的宽度是当前配置值 * 柱宽比例 。 <br />没有配置的情况下，依据最小柱宽及画图区域宽度自适应刻度宽度\",\n      \"option_chart_column_width_percent_desc\": \"设置图表中柱子占刻度的宽度比例(0%~100%)，默认为60%\",\n      \"option_chart_default_step\": \"固定每页刻度数\",\n      \"option_chart_default_step_desc\": \"配置图形中按X轴刻度分页时，每页的刻度数量。 默认情况下，图形依据画图区域宽度及最小柱宽自适应刻度数 \",\n      \"option_suspend_text_regex_desc\": \"要显示的文本。有以下替换宏可用：<br /> \" + \"<span class='mr3'>[值]</span> - 对应的Y轴的数值 <br />\" + \"<span class='mr3'>[属性]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[刻度]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[刻度索引]</span> - 数值标签为对应的X轴值的顺序 <br /> \" + \"<span class='mr3'>[类别]</span> - 对应的图例的类别值<br /> \" + \"<span class='mr3'>[类别索引]</span> - 对应的图例的类别顺序索引<br /> \" + \"<span class='mr3'>[刻度总和]</span> - 可显示X轴为某个值时所有Y轴的数值之和 <br /> \" + \"<span class='mr3'>[刻度平均值]</span> - 可显示X轴为某个值时所有Y轴的平均值<br /> \" + \"<span class='mr3'>[类别百分比]</span> - X轴的刻度上Y值占所有Y值总和的百分比 <br />\" + \"<span class='mr3'>[刻度百分比]</span> - X轴的刻度上Y值占该X刻度上所有Y值总和的百分比 <br /> \" + \"<span class='mr3'>[(列N)]</span> - 第N列的数值 <br /> \" + \"<span class='mr3'>[换行]</span> - 换行符\",\n      \"%_NAME\": \"属性\",\n      \"%_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_VALUE\": \"值\",\n      \"%_VALUE_desc\": \"对应的Y轴的数值\",\n      \"%_VALUE_NAME\": \"值名称\",\n      \"%_VALUE_NAME_desc\": \"对应的Y轴的名称\",\n      \"%_SERIES_NAME\": \"类别\",\n      \"%_SERIES_NAME_desc\": \"对应的图例的类别值\",\n      \"%_SERIES_NUMBER\": \"类别索引\",\n      \"%_SERIES_NUMBER_desc\": \"对应的图例的类别顺序索引\",\n      \"%_CATEGORY_NAME\": \"刻度\",\n      \"%_CATEGORY_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_CATEGORY_NUMBER\": \"刻度索引\",\n      \"%_CATEGORY_NUMBER_desc\": \"对应的X轴的刻度顺序索引\",\n      \"%_CATEGORY_TOTAL\": \"刻度总和\",\n      \"%_CATEGORY_TOTAL_desc\": \"各个X轴刻度上所有Y轴值的总和\",\n      \"%_CATEGORY_AVERAGE\": \"刻度平均值\",\n      \"%_CATEGORY_AVERAGE_desc\": \"各个X轴刻度上所有Y轴值的平均值\",\n      \"%_PERCENT_OF_TOTAL\": \"类别百分比\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"X轴的刻度上Y值占所有Y值总和的百分比\",\n      \"%_PERCENT_OF_CATEGORY\": \"刻度百分比\",\n      \"%_PERCENT_OF_CATEGORY_desc\": \"X轴的刻度上Y值占该X刻度上所有Y值总和的百分比\",\n      \"%_BR\": \"换行\",\n      \"option_grid_show_all_line\": \"显示全部网格线\",\n      \"option_grid_line_style\": \"网格线样式\",\n      \"option_grid_line_style_desc\": \"配置所有网格线的样式，包括虚实，颜色及粗细\",\n      \"option_grid_show_only_zero_line\": \"只显示零线\",\n      \"option_grid_show_only_zero_line_desc\": \"配置后，网格线中非零线将全部隐藏，只显示零线 <br /> 如果Y轴最小值大于0，则没有零线，所有网格线均都不显示 \",\n      \"option_grid_zero_line_style\": \"零线样式\",\n      \"option_grid_zero_line_style_desc\": \"配置零线的样式，包括虚实，颜色及粗细\",\n      \"option_scale_y_visible\": \"显示/隐藏\"\n    },\n    english: {\n      \"system_auto_default\": \"Auto\",\n      \"user_define_text\": \"Define\",\n      \"category_x_axis\": \"X Axis\",\n      \"option_x_axis_right_first_flag\": \"Prioritize drawing the rightmost data on the X-axis\",\n      \"option_x_axis_right_first_flag_desc\": \"By default, the data is drawn from the leftmost side of the X-axis, and when it exceeds one screen, it is paginated to the right.<br/> After enabling priority drawing of the rightmost data on the X-axis, start drawing from the rightmost data on the X-axis and display it in a left page when it exceeds one screen\",\n      \"option_x_axis_draw_type\": \"X axis type\",\n      \"option_select_x_axis_dot_line\": \"Single dot\",\n      \"option_select_x_axis_time_line\": \"Time \",\n      \"option_select_x_axis_level_line\": \"Multi level\",\n      \"option_x_axis_draw_type_desc\": \"There are three types of X-axis in total:\" + \"<br /> Multi level<span class='color-main-green'>[Auto]</span>: 2 or 3 attribute columns on the X-axis, it will automatically recognize the multi level \" + \"<br /> Time line<span class='color-main-green'>[Auto]</span>: only one time column on the X-axis and it is aggregated daily / hourly / minutely , it will automatically recognize the time line\" + \"<br /> Single dot<span class='color-main-green'>[Auto]</span>: All data can be forced to display the single level\" + \"<br /> The system will automatically adapt to the appropriate X-axis, but you can forcibly switch to the single level\",\n      \"option_axis_label_visible\": \"Axis Label\",\n      \"option_axis_title_visible\": \"Axis Title\",\n      \"option_axis_title_visible_desc\": \"In automatic mode, the title will be displayed on the answer detail page and hidden in the pinboard\",\n      \"option_title_visible_show\": \"Show\",\n      \"option_title_visible_hide\": \"Hidden\",\n      \"option_axis_title_content\": \"Title Content\",\n      \"option_axis_title_content_desc\": \"By default, column names on the axis will be used\",\n      \"option_x_axis_label_dot_line_rotation_value\": \"Rotate\",\n      \"option_x_axis_label_dot_line_space_width\": \"Label Spacing\",\n      \"option_x_axis_label_dot_line_space_width_desc\": \"The scale is the minimum spacing between labels in single level axis, with a default of 50 (i.e. one scale displayed every 50px)\",\n      \"option_x_axis_label_max_height_percent\": \"Max height(%)\",\n      \"option_x_axis_label_max_height_percent_desc\": \"The axis is in single level, and when the maximum height percentage is exceeded, the string is truncated and displayed; In other modes, when the maximum height is exceeded, the scale will not be displayed\",\n      \"option_font_style\": \"Font\",\n      \"option_font_alignment\": \"Alignment\",\n      \"category_y_axis\": \"Y Axis\",\n      \"option_y_axis_label_max_width_percent\": \"Max Width(%)\",\n      \"option_measure_configure\": \"Data Format\",\n      \"category_right_y_axis\": \"Right Y Axis\",\n      \"category_color\": \"Color\",\n      \"option_chart_column_minimum_width\": \"Adaptive minimum column width\",\n      \"option_chart_column_minimum_width_desc\": \"If you do not configure a fixed scale width and a fixed number of divisions per page, the drawing data will be adaptively drawn based on the drawing area width and minimum column width. The default minimum column width is 5px\",\n      \"option_chart_column_width\": \"Fixed column width\",\n      \"option_chart_column_width_desc\": \"After configuring a fixed column width, each column width on the X-axis in the graph is the current configured value <br/> Without configuration, adjust the scale width adaptively based on the minimum column width and drawing area width\",\n      \"option_chart_column_width_percent_desc\": \"Set the percent of the column in the chart (0% ~ 100%), default 60%\",\n      \"option_chart_default_step\": \"Fixed ticks number per page\",\n      \"option_chart_default_step_desc\": \"Configure the number of ticks per page when pagination is based on the X-axis scale in the graph. By default, the graph adapts the number of divisions based on the width of the drawing area and the minimum column width\",\n      \"option_suspend_text_regex_desc\": \"The text to be displayed. The following replacement macros are available:<br /> \" + \"<span class='mr3'>[Value]</span> - The corresponding value of the Y-axis <br />\" + \"<span class='mr3'>[Attribute]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Label]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Label Index]</span> - The order in which the numerical labels correspond to the X-axis values <br /> \" + \"<span class='mr3'>[Series]</span> - The series value of the corresponding legend<br /> \" + \"<span class='mr3'>[Series Index]</span> - The series order of the corresponding legend<br /> \" + \"<span class='mr3'>[Label Total]</span> - Can display the sum of all Y-axis values when the X-axis is a certain value <br /> \" + \"<span class='mr3'>[Label AVG]</span> - Can display the average value of all Y-axes when the X-axis is a certain value<br /> \" + \"<span class='mr3'>[Series Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on the legend<br />\" + \"<span class='mr3'>[Label Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on that scale <br /> \" + \"<span class='mr3'>[(ColumnN)]</span> - Value in column N <br /> \" + \"<span class='mr3'>[Wrap]</span> - Line break\",\n      \"%_NAME\": \"Attribute\",\n      \"%_NAME_desc\": \"The displayed numerical labels are the corresponding X-axis values\",\n      \"%_VALUE\": \"Value\",\n      \"%_VALUE_desc\": \"The corresponding value of the Y-axis\",\n      \"%_VALUE_NAME\": \"Value Name\",\n      \"%_VALUE_NAME_desc\": \"The corresponding y-axis column name\",\n      \"%_SERIES_NAME\": \"Series\",\n      \"%_SERIES_NAME_desc\": \"The category value of the corresponding legend\",\n      \"%_SERIES_NUMBER\": \"Series Index\",\n      \"%_SERIES_NUMBER_desc\": \"Category order index of corresponding legend\",\n      \"%_CATEGORY_NAME\": \"Label\",\n      \"%_CATEGORY_NAME_desc\": \"The corresponding X-axis scale value\",\n      \"%_CATEGORY_NUMBER\": \"Label Index\",\n      \"%_CATEGORY_NUMBER_desc\": \"Corresponding X-axis scale sequence index\",\n      \"%_CATEGORY_TOTAL\": \"Label Total\",\n      \"%_CATEGORY_TOTAL_desc\": \"The sum of all Y-axis values on each X-axis scale\",\n      \"%_CATEGORY_AVERAGE\": \"Label AVG\",\n      \"%_CATEGORY_AVERAGE_desc\": \"The average value of all Y-axis values on each X-axis scale\",\n      \"%_PERCENT_OF_TOTAL\": \"Series Percentage\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"The percentage of Y value on the X-axis scale to the total sum of all Y values\",\n      \"%_PERCENT_OF_CATEGORY\": \"Label Percentage\",\n      \"%_PERCENT_OF_CATEGORY_desc\": \"The percentage of Y value on the X-axis scale to the total sum of all Y values on that X-axis scale\",\n      \"%_BR\": \"Wrap\",\n      \"option_grid_show_all_line\": \"Show all grid lines\",\n      \"option_grid_line_style\": \"Line style\",\n      \"option_grid_line_style_desc\": \"Configure the styles of all grid lines, including virtual and solid, color, and thickness\",\n      \"option_grid_show_only_zero_line\": \"Only show the zero line\",\n      \"option_grid_show_only_zero_line_desc\": \"After configuration, all non zero lines in the grid lines will be hidden, and only zero lines will be displayed.<br/>If the minimum value of the Y-axis is greater than 0, there will be no zero lines, and all grid lines will not be displayed\",\n      \"option_grid_zero_line_style\": \"Zero line style\",\n      \"option_grid_zero_line_style_desc\": \"Configure the style of the zero line, including virtual and solid, color, and thickness\",\n      \"option_scale_y_visible\": \"Show/Hide\"\n    }\n  },\n  // [*必填项]生成当前图表类型的模板数据\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.basic/column/systemColumnChart.js?");

/***/ })

}]);
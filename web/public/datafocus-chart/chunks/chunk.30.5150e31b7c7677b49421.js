(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[30],{

/***/ "../src-v5/assets/js/charts.system.senior/3dGlobeLine.js":
/*!***************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/3dGlobeLine.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../world */ \"../src-v5/assets/js/world.js\");\n/** 3D地球图组件 **/\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  chartType: 'globeThreeLine',\n  //  图形名 [ * 必填项 ]\n  chartDisplayNameKey: \"chart-name-title\",\n  //  图形名称中英文Key [ * 必填项 ]\n  chartDescriptionKey: \"chart-description-title\",\n  //  图形描述中英文Key [ * 必填项 ]\n\n  /**\n   * 判断图形允许画的方法 [ * 必填项 ]\n   * 适合柱状图的条件 ， 聚合数据且至少一个属性列及至少一个数值列\n   * @param searchResultStatistic\n   *          {\n   *              aggregatedFlag  搜索数据是否聚合的标志\n   *\n   *              measureColumns    数值列数量\n   *                  {\n   *                      index\n                          columnId\n                          columnClassify\n                          parent\n   *                  }\n   *              attributeColumns  属性列数量\n   *              legendColumns     能作为图例的属性列数量（distinct_count < 50 的列）\n   *              dateColumns       日期列数量\n   *              lonColumns        经度列数量\n   *              latColumns        纬度列数量\n   *              queryResultCount    查询数据结果条目\n   *              regionColumns        地理列数组（1：国家集合；1.5：国家；2：省集合；2.5：省；3：市集合；3.5：市；4：区集合；4.5：区；0：其他地理列）\n   *          }\n   *\n   * @return Boolean  true: 当前数据适合画当前图形；false: 当前数据不适合画当前图形\n   * */\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n\n    // 搜索数据是聚合数据且至少一组(经、纬)地理属性列及至少一个数值列\n    if (searchResultStatistic && searchResultStatistic.aggregatedFlag && searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.measureColumns.length >= 0 && searchResultStatistic.attributeColumns.length > 3) {\n        let isLat = 0;\n        let isLong = 0;\n        searchResultStatistic.attributeColumns.forEach(function (d) {\n          if (d.geo_type === \"LONGITUDE\") isLong++;\n          if (d.geo_type === \"LATITUDE\") isLat++;\n        });\n        if (isLat >= 2 && isLong >= 2) satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  // 图形配置元素 [ * 必填项 ]\n  needAxis: {\n    // 默认xAxis是属性列 [数组]\n    'xAxis': {\n      i18nKey: \"chart-x-axis-title\",\n      //  X轴显示名的key [ 非必填项 ]\n      columnType: \"lon&lat\" //   X轴是什么类型的数据  lon&lat - 经纬度   ；   lon -   经度  ；   lat -   纬度 ；\n    },\n    // 默认yAxis是数值列 [数组]\n    'yAxis': {\n      i18nKey: \"chart-y-axis-title\",\n      //  Y轴显示名的key [ 非必填项 ]\n      allowMultiYAxis: false,\n      //  是否允许左右侧边Y轴 [ 非必填项 ]\n      multiYAxisKey: \"chart-multi-y-axis-title\",\n      //  右侧轴的显示名的key [ 非必填项 ]\n\n      /**\n       * 默认Y轴的数量 [ 非必填项 ]\n       * 允许系统默认图形配置元素后 ，\n       * needAxis中存在Y轴，默认Y轴的数量，—1时即所有的除Size以外的数值列 ；\n       * 如果为>0的数值，则取相应数量以内的数值列\n       */\n      defaultYAxisNumber: -1\n    },\n    'legend': {\n      i18nKey: \"chart-legend-title\"\n    }\n    // 默认图例时distinct_count在50以内的属性列 [ 数值 ]\n  },\n  /**\n   * 判断当前图形的Axis配置是否合法 [ * 必填项 ]\n   * 例：X轴不允许为空，Y轴不允许为空，X轴不允许与图例列相同\n   * @params [Object]theAxisConfig      -   当前用户手动配置的规则\n   *          {\n   *              xAxis: [{\n   *                  index\n   *                  columnId\n   *                  type\n   *              }] ,\n   *              yAxis: [{\n   *                  index\n   *                  columnId\n   *              }] ,\n   *              legend: [{\n   *                  index\n   *                  columnId\n   *              }] ,\n   *\n   *              // 搜素数据的统计信息\n   *              searchResultStatistic: {\n   *                  aggregatedFlag  搜索数据是否聚合的标志\n   *\n   *                  measureColumns    数值列数量\n   *                  attributeColumns  属性列数量\n   *                  legendColumns     能作为图例的属性列数量（distinct_count < 50 的列）\n   *                  dateColumns       日期列数量\n   *                  lonColumns        经度列数量\n   *                  latColumns        纬度列数量\n   *                  queryResultCount    查询数据结果条目\n   *                  regionColumns        地理列数组（1：国家集合；1.5：国家；2：省集合；2.5：省；3：市集合；3.5：市；4：区集合；4.5：区；0：其他地理列）\n   *              }\n   *          }\n   *\n   * 判断条件：\n   * 1. xAxis不允许为空\n   * 2. yAxis不允许为空\n   * 3. 主Y轴不允许为空\n   * 4. legend只允许一个\n   * 5. legend存在时Y轴只允许一个\n   * 6. legend不允许与xAxis重复\n   *\n   * @return [String]errorKey -   错误提示对应的key;\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let theErrorMsgKey = '';\n    if (!theAxisConfig) {\n      theErrorMsgKey = 'chart-axis-config-null-error';\n      return theErrorMsgKey;\n    }\n\n    // 1.X轴不允许为空\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      theErrorMsgKey = 'chart-xy-axis-null';\n      return theErrorMsgKey;\n    }\n    // 2.Y轴不允许为空\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      //theErrorMsgKey = 'chart-xy-axis-null' ;\n      //return theErrorMsgKey ;\n    }\n    // 3.主Y轴不允许为空\n    let theMainYAxis = theAxisConfig.yAxis.filter(function (yAxis) {\n      return yAxis.direction !== 'right';\n    });\n    if (!theMainYAxis || !theMainYAxis.length) {\n      //theErrorMsgKey = 'chart-left-y-axis-null' ;\n      //return theErrorMsgKey ;\n    }\n    // 图例不为空的情况下\n    if (theAxisConfig.legend) {\n      // 3. 图例只允许一个\n      if (theAxisConfig.legend.length > 1) {\n        theErrorMsgKey = 'chart-legend-too-much';\n        return theErrorMsgKey;\n      }\n      // 4. 有图例的情况下，Y轴不允许多个\n      if (theAxisConfig.legend.length && theAxisConfig.yAxis.length > 1) {\n        theErrorMsgKey = 'chart-y-axis-too-much-with-legend';\n        return theErrorMsgKey;\n      }\n      // 5. 有图例的情况下，图例不允许与X轴相同\n      for (let i = 0; i < theAxisConfig.legend.length; i++) {\n        let theLegend = theAxisConfig.legend[i],\n          theMatchedLegend = theAxisConfig.xAxis && theAxisConfig.xAxis.find(function (xAxis) {\n            return xAxis.index === theLegend.index;\n          });\n        if (theMatchedLegend) {\n          theErrorMsgKey = 'chart-x-legend-axis-not-equal';\n          return theErrorMsgKey;\n          break;\n        }\n      }\n    }\n    // 当前图形需要将所有属性列利用起来\n    let theSearchResultStatistic = theAxisConfig.searchResultStatistic;\n    if (theSearchResultStatistic) {\n      let theUsedAttribute = 0;\n      if (theAxisConfig.xAxis) {\n        theUsedAttribute += theAxisConfig.xAxis.length;\n      }\n      if (theAxisConfig.legend) {\n        theUsedAttribute += theAxisConfig.legend.length;\n      }\n      if (theSearchResultStatistic.attributeColumns && theSearchResultStatistic.attributeColumns.length > theUsedAttribute) {\n        //theErrorMsgKey = 'chart-need-all-attribute-columns' ;\n        //return theErrorMsgKey ;\n      }\n    }\n    return theErrorMsgKey;\n  },\n  // 当前图形的配置项[ *新增图形必填项 ]\n  chartConfigureList: [\n  //公共配置\n  {\n    key: \"category_general\",\n    title: \"category_chart_general\",\n    options: [\n    //地表类型\n    {\n      key: \"globe_surface_type\",\n      title: \"option_globe_surface_type\",\n      description: \"option_globe_surface_type_desc\",\n      type: \"select\",\n      selection: [\"option_surface_normal\", \"option_surface_high_texture\", \"option_surface_policy_map\"]\n    },\n    //开启环境光源\n    {\n      key: \"globe_open_environment_light\",\n      title: \"option_globe_open_environment_light\",\n      description: \"option_globe_open_environment_light_desc\",\n      type: \"checkbox\"\n    },\n    //开启星空环境\n    {\n      key: \"globe_open_galaxy_environment\",\n      title: \"option_globe_open_galaxy_environment\",\n      description: \"option_globe_open_galaxy_environment_desc\",\n      type: \"checkbox\"\n    },\n    //环境颜色\n    {\n      key: \"globe_environment_color\",\n      title: \"option_globe_environment_color\",\n      description: \"option_globe_environment_color_desc\",\n      type: \"color\",\n      require: \"!globe_open_galaxy_environment\"\n    },\n    //开启大气层\n    {\n      //key: \"globe_open_atmosphere\",\n      //title: \"option_globe_open_atmosphere\",\n      //description: \"option_globe_open_atmosphere_desc\",\n      //type: \"checkbox\"\n    },\n    //开启自动旋转\n    {\n      key: \"globe_open_auto_revolt\",\n      title: \"option_globe_open_auto_revolt\",\n      description: \"option_globe_open_auto_revolt_desc\",\n      type: \"checkbox\"\n    },\n    //自动旋转速度\n    {\n      key: \"globe_open_auto_revolt_speed\",\n      title: \"option_globe_open_auto_revolt_speed\",\n      description: \"option_globe_open_auto_revolt_speed_desc\",\n      type: \"input\",\n      min: 0,\n      max: 50,\n      withoutSlider: true,\n      defaultNumber: 10\n    }]\n  },\n  //行政地图配置\n  {\n    key: \"category_policy_map\",\n    title: \"category_chart_policy_map\",\n    options: [\n    //区块颜色\n    {\n      key: \"policy_item_color\",\n      title: \"option_policy_item_color\",\n      description: \"option_policy_item_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //留白颜色\n    {\n      key: \"policy_empty_color\",\n      title: \"option_policy_empty_color\",\n      description: \"option_policy_empty_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //高亮颜色\n    {\n      key: \"policy_emphasis_color\",\n      title: \"option_policy_emphasis_color\",\n      description: \"option_policy_emphasis_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //边界颜色\n    {\n      key: \"policy_boundary_color\",\n      title: \"option_policy_boundary_color\",\n      description: \"option_policy_boundary_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //边界宽度\n    {\n      key: \"policy_boundary_width\",\n      title: \"option_policy_boundary_width\",\n      description: \"option_policy_boundary_width_desc\",\n      type: \"input\",\n      min: 1,\n      max: 5,\n      defaultNumber: 1,\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //标签大小\n    {\n      key: \"policy_label_size\",\n      title: \"option_policy_label_size\",\n      description: \"option_policy_label_size_desc\",\n      type: \"input\",\n      min: 12,\n      max: 100,\n      defaultNumber: 20,\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //标签颜色\n    {\n      key: \"policy_label_color\",\n      title: \"option_policy_label_color\",\n      description: \"option_policy_label_color_desc\",\n      type: \"color\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //开启地理网络线\n    {\n      key: \"policy_open_geography_grid\",\n      title: \"option_policy_open_geography_grid\",\n      description: \"option_policy_open_geography_grid_desc\",\n      type: \"checkbox\",\n      require: \"globe_surface_type=option_surface_policy_map\"\n    },\n    //地理网格线颜色\n    {\n      key: \"policy_geography_grid_color\",\n      title: \"option_policy_geography_grid_color\",\n      description: \"option_policy_geography_grid_color_desc\",\n      type: \"color\",\n      require: \"policy_open_geography_grid\"\n    }]\n  }, {\n    key: \"category_line\",\n    title: \"category_chart_line\",\n    options: [\n    // 飞线的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"]\n    },\n    //自定义飞线颜色主题\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    //飞线颜色\n    {\n      key: \"chart_item_color\",\n      title: \"option_chart_item_color\",\n      description: \"option_chart_item_color_desc\",\n      type: \"color\"\n    },\n    //飞线宽度\n    {\n      key: \"chart_item_width\",\n      title: \"option_chart_item_width\",\n      description: \"option_chart_item_width_desc\",\n      type: \"input\",\n      min: 0,\n      max: 10,\n      step: 1,\n      defaultNumber: 1,\n      withoutSlider: true\n    },\n    //落点颜色\n    {\n      key: \"position_point_color\",\n      title: \"option_position_point_color\",\n      description: \"option_position_point_color_desc\",\n      type: \"color\"\n    },\n    //落点大小\n    {\n      key: \"position_point_size\",\n      title: \"option_position_point_size\",\n      description: \"option_position_point_size_desc\",\n      type: \"input\",\n      min: 0,\n      max: 50,\n      defaultNumber: 10,\n      withoutSlider: true\n    },\n    //开启飞线动画\n    {\n      key: \"open_line_animation\",\n      title: \"option_open_line_animation\",\n      description: \"option_open_line_animation_desc\",\n      type: \"checkbox\"\n    },\n    //飞线动画颜色\n    {\n      key: \"line_animation_color\",\n      title: \"option_line_animation_color\",\n      description: \"option_line_animation_color_desc\",\n      type: \"color\",\n      require: \"open_line_animation\"\n    },\n    //飞线动画透明度\n    {\n      key: \"line_animation_transparent\",\n      title: \"option_line_animation_transparent\",\n      description: \"option_line_animation_transparent_desc\",\n      type: \"input\",\n      min: 0,\n      max: 1,\n      defaultNumber: 1,\n      step: 0.1,\n      withoutSlider: true,\n      require: \"open_line_animation\"\n    },\n    //飞线动画宽度\n    {\n      key: \"line_animation_width\",\n      title: \"option_line_animation_width\",\n      description: \"option_line_animation_width_desc\",\n      type: \"input\",\n      min: 0,\n      max: 10,\n      step: 1,\n      defaultNumber: 3,\n      withoutSlider: true,\n      require: \"open_line_animation\"\n    },\n    //飞线动画长度占比\n    {\n      key: \"line_animation_length_proportion\",\n      title: \"option_line_animation_length_proportion\",\n      description: \"option_line_animation_length_proportion_desc\",\n      type: \"input\",\n      min: 0,\n      max: 1,\n      step: 0.1,\n      defaultNumber: 0.1,\n      withoutSlider: true,\n      require: \"open_line_animation\"\n    },\n    //飞线动画速度\n    {\n      key: \"line_animation_speed\",\n      title: \"option_line_animation_speed\",\n      description: \"option_line_animation_speed_desc\",\n      type: \"input\",\n      min: 1,\n      max: 7,\n      step: 1,\n      defaultNumber: 4,\n      withoutSlider: true,\n      require: \"open_line_animation\"\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    //隐藏数据标签\n    {\n      //key: \"label_text_hide\",\n      //title: \"option_label_text_hide\",\n      //description: \"option_label_text_hide_desc\",\n      //type: 'checkbox'\n    },\n    //显示数据标签\n    {\n      key: \"label_text_visible\",\n      title: \"option_label_text_visible\",\n      description: \"option_label_text_visible_desc\",\n      type: 'checkbox'\n    },\n    //数据标签颜色\n    {\n      key: \"label_text_color\",\n      title: \"option_label_text_color\",\n      description: \"option_label_text_color_desc\",\n      type: 'color'\n    },\n    //输入数据标签\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      description: \"option_label_text_regex_3dGlobe_desc\",\n      type: \"textArea\"\n    }]\n  }],\n  /**\n   * 使用个人画图方法画图形 [*必填项]\n   * @params [Object]options  -   当前图形的配置\n   *              {\n   *                  chartUUID       -   当前图形的唯一标识\n   *                  currentChart    -   当前画图对象\n   *                  container       -   当前画图的DOM元素\n   *                  chartAxis       -   当前图形的Axis配置\n   *                  datas           -   当前画图数据\n   *                  isResize        -   是否是窗口变化引起的画图\n   *                  chartConfigures -   图形配置\n   *                  mousedownCallback   -   图形中元素鼠标事件的回调\n   *                  plugins         -   DataFocus提供的第三方画图库\n   *                      {\n   *                          d3  -   d3的v3版本\n   *                          echarts -   echarts的\n   *                      }\n   *              }\n   * **/\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    $(options.container).css(\"background\", \"#000\");\n    let globeDom = $(options.container)[0];\n    if (!options.isChangeConfigFlag) {\n      _world__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerEmptyGeo(options.plugins.echarts);\n      _world__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerMap(options.plugins.echarts);\n      if (options.currentChart.rateChart != null && options.currentChart.rateChart != \"\" && options.currentChart.rateChart != undefined) {\n        options.currentChart.rateChart.dispose(); //销毁\n      }\n\n      // 因为其他图形也有使用echart，实例id与当前的实例id有冲突或其他了，导致echarts无法出图\n      globeDom.removeAttribute('_echarts_instance_');\n    }\n    let outerType = \"line3d\";\n    let itemColor = \"#49FFC1\";\n    let itemWidth = 1;\n    let positionPointColor = '#40FFD8';\n    let positionPointSize = \"10\";\n    let openLineAnimation = false;\n    let lineAnimationColor = '#ff6d6f';\n    let lineAnimationTransparent = 1;\n    let lineAnimationWidth = 3;\n    let lineAnimationLengthProportion = 0.1;\n    let lineAnimationSpeed = 4;\n    let surfaceType = \"normal\";\n    let openEnvironmentLight = false;\n    let environmentColor = \"#000\";\n    let openGalaxyEnvironment = false;\n    let openGlobeAtmosphere = false;\n    let openAutoRevolt = false;\n    let mapItemColor = \"#fff\";\n    let mapEmptyColor = \"#000\";\n    let mapEmphasisColor = \"#fff\";\n    let mapBoundaryColor = \"#000\";\n    let mapBoundaryWidth = 1;\n    let mapLabelSize = \"50\";\n    let mapLabelColor = \"#000\";\n    let mapOpenGeographyGrid = false;\n    let mapGeographyGridColor = \"#fff\";\n    let autoRevoltSpeed = 10;\n    let localColor = options.currentChart.defaultConf.localColors.slice(0);\n    let defaultLabelText = \"%_VALUE\";\n    let labelColor;\n    let labelShowFlag = false;\n    if (options.chartConfigures) {\n      //公共配置\n      if (options.chartConfigures.globe_surface_type) {\n        switch (options.chartConfigures.globe_surface_type) {\n          case \"option_surface_normal\":\n            surfaceType = \"normal\";\n            break;\n          case \"option_surface_high_texture\":\n            surfaceType = \"highTexture\";\n            break;\n          case \"option_surface_policy_map\":\n            surfaceType = \"policyMap\";\n            break;\n        }\n      }\n      if (options.chartConfigures.globe_open_environment_light) {\n        openEnvironmentLight = options.chartConfigures.globe_open_environment_light;\n      }\n      if (options.chartConfigures.globe_environment_color) {\n        environmentColor = options.chartConfigures.globe_environment_color;\n      }\n      if (options.chartConfigures.globe_open_galaxy_environment) {\n        openGalaxyEnvironment = options.chartConfigures.globe_open_galaxy_environment;\n      }\n      if (options.chartConfigures.globe_open_atmosphere) {\n        openGlobeAtmosphere = options.chartConfigures.globe_open_atmosphere;\n      }\n      if (options.chartConfigures.globe_open_auto_revolt) {\n        openAutoRevolt = options.chartConfigures.globe_open_auto_revolt;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.globe_open_auto_revolt_speed)) {\n        autoRevoltSpeed = options.chartConfigures.globe_open_auto_revolt_speed;\n      }\n      //行政地图配置\n      if (options.chartConfigures.policy_item_color) {\n        mapItemColor = options.chartConfigures.policy_item_color;\n      }\n      if (options.chartConfigures.policy_empty_color) {\n        mapEmptyColor = options.chartConfigures.policy_empty_color;\n      }\n      if (options.chartConfigures.policy_emphasis_color) {\n        mapEmphasisColor = options.chartConfigures.policy_emphasis_color;\n      }\n      if (options.chartConfigures.policy_boundary_color) {\n        mapBoundaryColor = options.chartConfigures.policy_boundary_color;\n      }\n      if (options.chartConfigures.policy_boundary_width) {\n        mapBoundaryWidth = options.chartConfigures.policy_boundary_width;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.policy_label_size)) {\n        mapLabelSize = options.chartConfigures.policy_label_size;\n      }\n      if (options.chartConfigures.policy_label_color) {\n        mapLabelColor = options.chartConfigures.policy_label_color;\n      }\n      if (options.chartConfigures.policy_open_geography_grid) {\n        mapOpenGeographyGrid = options.chartConfigures.policy_open_geography_grid;\n      }\n      if (options.chartConfigures.policy_geography_grid_color) {\n        mapGeographyGridColor = options.chartConfigures.policy_geography_grid_color;\n      }\n      //飞线配置\n      if (options.chartConfigures.chart_item_color) {\n        itemColor = options.chartConfigures.chart_item_color;\n        localColor[0] = itemColor;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.chart_item_width)) {\n        itemWidth = options.chartConfigures.chart_item_width;\n      }\n      if (options.chartConfigures.position_point_color) {\n        positionPointColor = options.chartConfigures.position_point_color;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.position_point_size)) {\n        positionPointSize = options.chartConfigures.position_point_size;\n      }\n      if (options.chartConfigures.open_line_animation) {\n        openLineAnimation = options.chartConfigures.open_line_animation;\n      }\n      if (options.chartConfigures.line_animation_color) {\n        lineAnimationColor = options.chartConfigures.line_animation_color;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.line_animation_width)) {\n        lineAnimationWidth = options.chartConfigures.line_animation_width;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.line_animation_length_proportion)) {\n        lineAnimationLengthProportion = options.chartConfigures.line_animation_length_proportion;\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.line_animation_speed)) {\n        lineAnimationSpeed = 8 - parseInt(options.chartConfigures.line_animation_speed);\n        lineAnimationSpeed = Math.min(lineAnimationSpeed, 7);\n        lineAnimationSpeed = Math.max(lineAnimationSpeed, 1);\n      }\n      if (_DataFocusMethod.isPureNumber(options.chartConfigures.line_animation_transparent)) {\n        lineAnimationTransparent = options.chartConfigures.line_animation_transparent;\n      }\n      if (options.chartConfigures.label_text_visible) {\n        labelShowFlag = true;\n      }\n      if (options.chartConfigures.label_text_color) {\n        labelColor = options.chartConfigures.label_text_color;\n      }\n    }\n    if (mapEmptyColor) {\n      $(options.container).css(\"background\", \"linear-gradient(to bottom, \" + mapEmptyColor + \" 0%,\" + mapEmptyColor + \" 95%,rgba(255,255,255,0) 96%,rgba(255,255,255,0) 100%)\");\n    }\n    let csList = [];\n    let lsList = [];\n    let idxLats = [],\n      idxLongs = [],\n      idxMeas = [],\n      idxLegend = [];\n    let legendMap = {};\n    let legendList;\n    if (options.chartAxis && options.chartAxis.curLegend) {\n      let h = options.chartAxis.curLegend;\n      if (typeof h !== \"function\") {\n        if (h.geo_type === \"LONGITUDE\") {\n          idxLongs.push(h.idx);\n        } else if (h.geo_type === \"LATITUDE\") {\n          idxLats.push(h.idx);\n        } else {\n          idxLegend.push(h.idx);\n        }\n      }\n    }\n    if (options.chartAxis && options.chartAxis.curXAxis) {\n      let keys = Object.keys(options.chartAxis.curXAxis);\n      for (let i = 0; i < keys.length; i++) {\n        let h = options.chartAxis.curXAxis[keys[i]];\n        if (typeof h !== \"function\") {\n          if (h.geo_type === \"LONGITUDE\") {\n            idxLongs.push(h.idx);\n          } else if (h.geo_type === \"LATITUDE\") {\n            idxLats.push(h.idx);\n          } else {\n            //idxLegend.push(h.idx);\n          }\n        }\n      }\n    }\n    if (options.chartAxis && options.chartAxis.curYAxis) {\n      let keys = Object.keys(options.chartAxis.curYAxis);\n      for (let i = 0; i < keys.length; i++) {\n        let h = options.chartAxis.curYAxis[keys[i]];\n        if (typeof h !== \"function\") {\n          idxMeas.push(h.idx);\n        }\n      }\n    }\n    if (idxLegend.length > 0) {\n      let legendCount = 1;\n      legendList = [];\n      options.datas.columns.forEach(function (c) {\n        if (!legendMap[c[idxLegend[0]]]) {\n          legendMap[c[idxLegend[0]]] = legendCount;\n          legendList[legendCount - 1] = {\n            name: c[idxLegend[0]],\n            icon: 'circle',\n            itemStyle: {\n              color: localColor[(legendCount - 1) % localColor.length]\n            }\n          }, legendCount++;\n        }\n      });\n    }\n    let legendScatterList = [];\n    if (idxLegend.length > 0) {\n      options.datas.columns.forEach(function (c, clidx) {\n        let index = 0;\n        csList[index] = {};\n        let curValue = [];\n        curValue.push(c[idxLongs[0]]);\n        curValue.push(c[idxLats[0]]);\n        curValue.push(null);\n        if (idxMeas.length > 0) {\n          curValue.push(c[idxMeas[0]]);\n          curValue.push(clidx);\n          curValue.push(0);\n        }\n        csList[index].value = curValue;\n        csList[index + 1] = {};\n        curValue = [];\n        curValue.push(c[idxLongs[1]]);\n        curValue.push(c[idxLats[1]]);\n        curValue.push(null);\n        if (idxMeas.length > 0) {\n          curValue.push(c[idxMeas[0]]);\n          curValue.push(clidx);\n          curValue.push(1);\n        }\n        csList[index + 1].value = curValue;\n        if (!legendScatterList[legendMap[c[idxLegend[0]]] - 1]) legendScatterList[legendMap[c[idxLegend[0]]] - 1] = [];\n        legendScatterList[legendMap[c[idxLegend[0]]] - 1].push({\n          value: csList[index].value,\n          itemStyle: {\n            color: localColor[(legendMap[c[idxLegend[0]]] - 1) % localColor.length]\n          }\n        });\n        legendScatterList[legendMap[c[idxLegend[0]]] - 1].push({\n          value: csList[index + 1].value,\n          itemStyle: {\n            color: localColor[(legendMap[c[idxLegend[0]]] - 1) % localColor.length]\n          }\n        });\n      });\n    } else {\n      options.datas.columns.forEach(function (c, index) {\n        let clidx = index;\n        index = index * 2;\n        csList[index] = {};\n        let curValue = [];\n        curValue.push(c[idxLongs[0]]);\n        curValue.push(c[idxLats[0]]);\n        curValue.push(null);\n        if (idxMeas.length > 0) {\n          curValue.push(c[idxMeas[0]]);\n          curValue.push(clidx);\n          curValue.push(0);\n        }\n        csList[index].value = curValue;\n        csList[index + 1] = {};\n        curValue = [];\n        curValue.push(c[idxLongs[1]]);\n        curValue.push(c[idxLats[1]]);\n        curValue.push(null);\n        if (idxMeas.length > 0) {\n          curValue.push(c[idxMeas[0]]);\n          curValue.push(clidx);\n          curValue.push(1);\n        }\n        csList[index + 1].value = curValue;\n        if (idxLegend.length > 0) {\n          csList[index].itemStyle = {\n            color: localColor[(legendMap[c[idxLegend[0]]] - 1) % localColor.length]\n          };\n          csList[index + 1].itemStyle = {\n            color: localColor[(legendMap[c[idxLegend[0]]] - 1) % localColor.length]\n          };\n        }\n      });\n    }\n    let legendLineList = [];\n    if (idxLegend.length > 0) {\n      options.datas.columns.forEach(function (c) {\n        let ptOne = [],\n          ptTwo = [];\n        ptOne.push(c[idxLongs[0]]);\n        ptOne.push(c[idxLats[0]]);\n        ptTwo.push(c[idxLongs[1]]);\n        ptTwo.push(c[idxLats[1]]);\n        if (!legendLineList[legendMap[c[idxLegend[0]]] - 1]) legendLineList[legendMap[c[idxLegend[0]]] - 1] = [];\n        legendLineList[legendMap[c[idxLegend[0]]] - 1].push({\n          coords: [ptOne, ptTwo],\n          lineStyle: {\n            color: localColor[(legendMap[c[idxLegend[0]]] - 1) % localColor.length]\n          }\n        });\n      });\n    } else {\n      options.datas.columns.forEach(function (c, index) {\n        lsList[index] = [];\n        let ptOne = [],\n          ptTwo = [];\n        ptOne.push(c[idxLongs[0]]);\n        ptOne.push(c[idxLats[0]]);\n        ptTwo.push(c[idxLongs[1]]);\n        ptTwo.push(c[idxLats[1]]);\n        if (idxLegend.length > 0) {\n          lsList[index] = {\n            coords: [ptOne, ptTwo],\n            lineStyle: {\n              color: localColor[(legendMap[c[idxLegend[0]]] - 1) % localColor.length]\n            }\n          };\n        } else {\n          lsList[index] = {\n            coords: [ptOne, ptTwo]\n          };\n        }\n      });\n    }\n    setTimeout(function () {\n      let echarts = options.plugins.echarts;\n      let myChart;\n      if (!options.isChangeConfigFlag) {\n        myChart = echarts.init(globeDom);\n        options.currentChart.rateChart = myChart;\n      } else {\n        myChart = options.currentChart.rateChart;\n      }\n      let canvasGrid = document.createElement('canvas');\n      //地理网格线组件\n      let gridChart = echarts.init(canvasGrid, null, {\n        width: 4096,\n        height: 2048\n      });\n      let gridLines = [];\n      for (let i = 1; i <= 24; i++) {\n        if (i === 24) {\n          gridLines.push([[parseInt(-181 + i * 15), 90], [parseInt(-181 + i * 15), -90]]);\n        } else {\n          gridLines.push([[parseInt(-180 + i * 15), 90], [parseInt(-180 + i * 15), -90]]);\n        }\n      }\n      for (let i = 1; i < 12; i++) {\n        gridLines.push([[-180, -90 + i * 15], [180, -90 + i * 15]]);\n      }\n      gridChart.setOption({\n        geo: {\n          name: \"grid0\",\n          show: false,\n          type: 'map',\n          map: 'emptyGeo',\n          // 绘制完整尺寸的 echarts 实例\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          silent: true,\n          boundingCoords: [[-180, 90], [180, -90]]\n        },\n        series: [{\n          type: 'lines',\n          coordinateSystem: 'geo',\n          data: gridLines,\n          lineStyle: {\n            color: mapGeographyGridColor,\n            opacity: 0.8,\n            width: 2\n          }\n        }]\n      });\n      let canvas = document.createElement('canvas');\n      let mapChart = echarts.init(canvas, null, {\n        width: 4096,\n        height: 2048\n      });\n      mapChart.setOption({\n        geo: {\n          name: \"map0\",\n          show: true,\n          type: 'map',\n          map: 'world',\n          // 绘制完整尺寸的 echarts 实例\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          silent: false,\n          boundingCoords: [[-180, 90], [180, -90]],\n          itemStyle: {\n            normal: {\n              areaColor: mapItemColor,\n              borderColor: mapBoundaryColor,\n              borderWidth: mapBoundaryWidth\n            }\n          },\n          label: {\n            textStyle: {\n              color: mapLabelColor,\n              fontSize: mapLabelSize\n            }\n          },\n          emphasis: {\n            itemStyle: {\n              color: mapEmphasisColor\n            },\n            label: {\n              color: mapLabelColor,\n              fontSize: mapLabelSize\n            }\n          }\n        }\n      });\n      let chartSeries = [];\n      let effect;\n      if (openLineAnimation) {\n        effect = {\n          show: true,\n          period: lineAnimationSpeed,\n          trailWidth: lineAnimationWidth,\n          trailLength: lineAnimationLengthProportion,\n          trailOpacity: lineAnimationTransparent,\n          trailColor: lineAnimationColor\n        };\n      }\n      if (outerType === \"line3d\") {\n        if (idxLegend.length > 0) {\n          legendList.forEach(function (lg, index) {\n            chartSeries.push({\n              name: lg.name,\n              type: 'scatter3D',\n              coordinateSystem: 'globe',\n              blendMode: 'color',\n              label: {\n                show: labelShowFlag,\n                distance: 5,\n                position: \"top\",\n                textStyle: {\n                  borderWidth: 0,\n                  color: labelColor\n                },\n                formatter: params => {\n                  return options.currentChart.generateTextByMacros({\n                    x: null,\n                    y: params.data.value[3],\n                    rowData: options.datas.columns[params.data.value[4]],\n                    latitude: options.datas.columns[params.data.value[4]][idxLats[params.data.value[5]]],\n                    longitude: options.datas.columns[params.data.value[4]][idxLongs[params.data.value[5]]],\n                    yAxis: options.chartAxis.curYAxis[0],\n                    total: 1,\n                    legend: null,\n                    index: 1,\n                    defaultRegexText: defaultLabelText\n                  }, \"label\");\n                }\n              },\n              symbolSize: positionPointSize,\n              itemStyle: {\n                color: positionPointColor,\n                opacity: 0.5\n              },\n              data: legendScatterList[index]\n            });\n          });\n        } else {\n          chartSeries.push({\n            name: \"scatter3D0\",\n            type: 'scatter3D',\n            coordinateSystem: 'globe',\n            blendMode: 'color',\n            label: {\n              show: labelShowFlag,\n              distance: 5,\n              position: \"top\",\n              textStyle: {\n                borderWidth: 0,\n                color: labelColor\n              },\n              formatter: params => {\n                return options.currentChart.generateTextByMacros({\n                  x: null,\n                  y: params.data.value[3],\n                  rowData: options.datas.columns[params.data.value[4]],\n                  latitude: options.datas.columns[params.data.value[4]][idxLats[params.data.value[5]]],\n                  longitude: options.datas.columns[params.data.value[4]][idxLongs[params.data.value[5]]],\n                  yAxis: options.chartAxis.curYAxis[0],\n                  total: 1,\n                  legend: null,\n                  index: 1,\n                  defaultRegexText: defaultLabelText\n                }, \"label\");\n              }\n            },\n            symbolSize: positionPointSize,\n            itemStyle: {\n              color: positionPointColor,\n              opacity: 0.5\n            },\n            data: csList\n          });\n        }\n        if (idxLegend.length > 0) {\n          legendList.forEach(function (lg, index) {\n            chartSeries.push({\n              name: lg.name,\n              type: 'lines3D',\n              coordinateSystem: 'globe',\n              blendMode: 'source-over',\n              data: legendLineList[index],\n              lineStyle: {\n                width: itemWidth,\n                color: itemColor,\n                opacity: 1\n              },\n              effect: effect\n            });\n          });\n        } else {\n          chartSeries.push({\n            name: \"lines03D\",\n            type: 'lines3D',\n            coordinateSystem: 'globe',\n            blendMode: 'source-over',\n            data: lsList,\n            lineStyle: {\n              width: itemWidth,\n              color: itemColor,\n              opacity: 1\n            },\n            effect: effect\n          });\n        }\n      }\n      let layers;\n      let baseTexture;\n      let heightTexture;\n      let displacementScale;\n      let environmentTexture = environmentColor;\n      let shading = \"color\";\n      if (openEnvironmentLight) {\n        shading = 'lambert';\n      }\n      if (surfaceType === \"policyMap\" && mapOpenGeographyGrid) {\n        layers = [{\n          type: \"blend\",\n          texture: mapChart,\n          intensity: 1\n        }];\n        shading = \"color\";\n        heightTexture = \"\";\n        displacementScale = 0;\n        baseTexture = gridChart;\n      } else {\n        if (surfaceType === \"normal\") {\n          baseTexture = __webpack_require__(/*! ../../images/globe-assets/earth.jpg */ \"../src-v5/assets/images/globe-assets/earth.jpg\");\n        } else if (surfaceType === \"highTexture\") {\n          baseTexture = __webpack_require__(/*! ../../images/globe-assets/world.topo.bathy.200401.jpg */ \"../src-v5/assets/images/globe-assets/world.topo.bathy.200401.jpg\");\n          heightTexture = __webpack_require__(/*! ../../images/globe-assets/world.topo.bathy.200401.jpg */ \"../src-v5/assets/images/globe-assets/world.topo.bathy.200401.jpg\");\n          displacementScale = 0.04;\n          shading = 'realistic';\n        } else if (surfaceType === \"policyMap\") {\n          baseTexture = mapChart;\n          heightTexture = \"\";\n          displacementScale = 0;\n        } else {\n          heightTexture = \"\";\n          displacementScale = 0;\n          baseTexture = __webpack_require__(/*! ../../images/globe-assets/earth.jpg */ \"../src-v5/assets/images/globe-assets/earth.jpg\");\n        }\n      }\n      if (openGalaxyEnvironment) {\n        environmentTexture = __webpack_require__(/*! ../../images/globe-assets/starfield.jpg */ \"../src-v5/assets/images/globe-assets/starfield.jpg\");\n      }\n      let option = {\n        legend: idxLegend.length > 0 ? {\n          left: 'left',\n          data: legendList,\n          orient: 'vertical',\n          textStyle: {\n            color: '#fff'\n          }\n        } : null,\n        globe: {\n          name: \"globe0\",\n          show: true,\n          baseTexture: baseTexture,\n          heightTexture: heightTexture,\n          displacementScale: displacementScale,\n          shading: shading,\n          atmosphere: {\n            show: openGlobeAtmosphere\n          },\n          environment: environmentTexture,\n          light: {\n            ambient: {\n              intensity: 0.5\n            }\n          },\n          viewControl: {\n            projection: \"orthographic\",\n            rotateSensitivity: 1,\n            //鼠标旋转灵敏度\n            zoomSensitivity: 3.2,\n            //鼠标缩放灵敏度\n            autoRotate: true,\n            autoRotateDirection: 'ccw',\n            autoRotateSpeed: 0,\n            autoRotateAfterStill: 0.5,\n            //鼠标停止后多久恢复旋转(为0时暂停后不恢复旋转)\n            //alpha:160,//视角绕 x 轴，即上下旋转的角度\n            //beta:-20,//视角绕 y 轴，即左右旋转的角度。\n            targetCoord: [116.46, 39.92],\n            //定位到哪里\n            minOrthographicSize: 200,\n            maxOrthographicSize: 600,\n            orthographicSize: 300\n          },\n          globalRadius: 100,\n          globalOuterRadius: 150,\n          layers: layers\n        },\n        series: chartSeries\n      };\n      myChart.clear();\n      myChart.setOption(option);\n      option = {\n        globe: {\n          name: \"globe0\",\n          viewControl: {\n            autoRotate: openAutoRevolt,\n            autoRotateSpeed: autoRevoltSpeed\n          }\n        }\n      };\n      setTimeout(function () {\n        myChart.setOption(option);\n      }, 50);\n    }, 20);\n  },\n  // 为模板问答生成样例数据\n  getTemplateData: function () {\n    let theTemplateData = {\n      headers: [{\n        idx: 0,\n        col_id: '10001',\n        col_uuid: '10001',\n        col_name: '样例经度',\n        data_type: 'ATTRIBUTE',\n        operator: '',\n        geo_type: 'LONGITUDE',\n        col_type: 'double'\n      }, {\n        idx: 1,\n        col_id: '10002',\n        col_uuid: '10002',\n        col_name: '样例维度',\n        data_type: 'ATTRIBUTE',\n        operator: '',\n        geo_type: 'LATITUDE',\n        col_type: 'double'\n      }, {\n        idx: 2,\n        col_id: '10003',\n        col_uuid: '10003',\n        col_name: '样例经度1',\n        data_type: 'ATTRIBUTE',\n        operator: '',\n        geo_type: 'LONGITUDE',\n        col_type: 'double'\n      }, {\n        idx: 3,\n        col_id: '10004',\n        col_uuid: '10004',\n        col_name: '样例维度1',\n        data_type: 'ATTRIBUTE',\n        operator: '',\n        geo_type: 'LATITUDE',\n        col_type: 'double'\n      }, {\n        idx: 4,\n        col_id: '10005',\n        col_uuid: '10005',\n        col_name: '样例数值',\n        data_type: 'MEASURE',\n        operator: '',\n        geo_type: '',\n        col_type: 'double'\n      }],\n      columns: [[100.58, 25.60, 113.22, 40.78, 11], [101.77, 36.67, 110.33, 31.05, 57], [108.80, 23.22, 109.57, 19.52, 135]],\n      default_chart: {\n        type: 'globeThreeLine',\n        xAxis: [0, 1, 2, 3],\n        yAxis: [4]\n      },\n      charts: [{\n        type: 'globeThreeLine',\n        xAxis: [0, 1, 2, 3],\n        yAxis: [4]\n      }]\n    };\n    return theTemplateData;\n  },\n  // 当前图形定制的中英文[ 配置XY轴，图表配置 ] [ *新增图形必填项 ]\n  i18nObj: {\n    chinese: {\n      \"chart-name-title\": \"3D地球飞线图\",\n      \"chart-description-title\": \"有且仅有两组经纬度数据\",\n      \"chart-x-axis-title\": \"两组经纬度\",\n      \"chart-y-axis-title\": \"数值\",\n      \"chart-multi-y-axis-title\": \"右侧副Y轴\",\n      \"chart-legend-title\": \"图例\",\n      \"chart-axis-config-null-error\": \"系统没有传入当前用户的Axis配置信息\",\n      \"chart-xy-axis-null\": \"X轴或Y轴不能为空\",\n      \"chart-left-y-axis-null\": \"左侧主Y轴不允许为空\",\n      \"chart-legend-too-much\": \"图例只允许一个\",\n      \"chart-y-axis-too-much-with-legend\": \"图例存在时，Y轴只允许一个\",\n      \"chart-x-legend-axis-not-equal\": \"X轴不允许与图例相同\",\n      \"chart-need-all-attribute-columns\": \"当前图形需要将所有的属性列利用起来\",\n      \"category_chart_general\": \"地球容器\",\n      \"category_chart_policy_map\": \"地图配置\",\n      \"category_chart_line\": \"飞线配置\",\n      \"option_globe_surface_type\": \"地表类型\",\n      \"option_globe_surface_type_desc\": \"设置地表类型\",\n      \"option_surface_normal\": \"地球\",\n      \"option_surface_high_texture\": \"高材质地球\",\n      \"option_surface_policy_map\": \"行政地图\",\n      \"option_globe_open_environment_light\": \"开启环境光\",\n      \"option_globe_open_environment_light_desc\": \"开启环境光源\",\n      \"option_globe_environment_color\": \"太空颜色\",\n      \"option_globe_environment_color_desc\": \"设置太空颜色\",\n      \"option_globe_open_galaxy_environment\": \"开启星空\",\n      \"option_globe_open_galaxy_environment_desc\": \"将太空设置为星空贴图\",\n      \"option_globe_open_atmosphere\": \"开启大气层\",\n      \"option_globe_open_atmosphere_desc\": \"开启大气层特效\",\n      \"option_globe_open_auto_revolt\": \"开启自动旋转\",\n      \"option_globe_open_auto_revolt_desc\": \"开启自动旋转\",\n      \"option_globe_open_auto_revolt_speed\": \"旋转速度\",\n      \"option_globe_open_auto_revolt_speed_desc\": \"设置旋转速度\",\n      \"option_policy_item_color\": \"板块颜色\",\n      \"option_policy_item_color_desc\": \"设置板块颜色\",\n      \"option_policy_empty_color\": \"留白颜色\",\n      \"option_policy_empty_color_desc\": \"设置空白处颜色\",\n      \"option_policy_emphasis_color\": \"高亮颜色\",\n      \"option_policy_emphasis_color_desc\": \"设置高亮颜色\",\n      \"option_policy_boundary_color\": \"边界颜色\",\n      \"option_policy_boundary_color_desc\": \"设置板块边界颜色\",\n      \"option_policy_boundary_width\": \"边界宽度\",\n      \"option_policy_boundary_width_desc\": \"设置板块边界宽度\",\n      \"option_policy_label_size\": \"标签大小\",\n      \"option_policy_label_size_desc\": \"设置标签文字大小\",\n      \"option_policy_label_color\": \"标签颜色\",\n      \"option_policy_label_color_desc\": \"设置标签文字颜色\",\n      \"option_policy_open_geography_grid\": \"开启地理网格线\",\n      \"option_policy_open_geography_grid_desc\": \"开启地理网格线\",\n      \"option_policy_geography_grid_color\": \"地理网格线颜色\",\n      \"option_policy_geography_grid_color_desc\": \"设置地理网格线颜色\",\n      \"option_chart_color_theme\": \"飞线主题颜色\",\n      \"option_chart_color_theme_desc\": \"设置飞线主题颜色\",\n      \"option_chart_custom_theme\": \"自定义飞线主题\",\n      \"option_chart_custom_theme_desc\": \"自定义飞线主题\",\n      \"option_chart_item_color\": \"飞线颜色\",\n      \"option_chart_item_color_desc\": \"设置飞线颜色\",\n      \"option_chart_item_width\": \"飞线宽度\",\n      \"option_chart_item_width_desc\": \"设置飞线宽度\",\n      \"option_position_point_color\": \"落点颜色\",\n      \"option_position_point_color_desc\": \"设置落地颜色\",\n      \"option_position_point_size\": \"落点大小\",\n      \"option_position_point_size_desc\": \"设置落地大小\",\n      \"option_open_line_animation\": \"开启飞线动画\",\n      \"option_open_line_animation_desc\": \"开启飞线动画\",\n      \"option_line_animation_color\": \"飞线动画颜色\",\n      \"option_line_animation_color_desc\": \"设置飞线动画颜色\",\n      \"option_line_animation_transparent\": \"飞线动画透明度\",\n      \"option_line_animation_transparent_desc\": \"设置飞线动画透明度\",\n      \"option_line_animation_width\": \"飞线动画宽度\",\n      \"option_line_animation_width_desc\": \"设置飞线动画宽度\",\n      \"option_line_animation_length_proportion\": \"飞线动画长度占比\",\n      \"option_line_animation_length_proportion_desc\": \"设置飞线动画长度占比\",\n      \"option_line_animation_speed\": \"飞线动画速度\",\n      \"option_line_animation_speed_desc\": \"设置飞线动画速度\",\n      \"option_label_text_regex_3dGlobe_desc\": \"用于数据标签的文本。<br/>有以下替换宏可用：<br/>%_LATITUDE  - 可显示经度 <br/>%_LONGITUDE  - 可显示维度  <br/>%_VALUE  - 可显示原本的数值 <br /> %_COLUMN_N - 第N列的数值 \"\n    },\n    english: {\n      \"chart-name-title\": \"3D Globe Lines\",\n      \"chart-description-title\": \"There must be two group of latitude and longitude\",\n      \"chart-x-axis-title\": \"Lon & Lat\",\n      \"chart-y-axis-title\": \"Y Axis\",\n      \"chart-multi-y-axis-title\": \"right sub Y Axis\",\n      \"chart-legend-title\": \"legend\",\n      \"chart-axis-config-null-error\": \"There is no information of current Axis\",\n      \"chart-xy-axis-null\": \"X Axis or Y Axis can not be empty\",\n      \"chart-left-y-axis-null\": \"Left sub Y Axis can not be empty\",\n      \"chart-legend-too-much\": \"There must be only one legend\",\n      \"chart-y-axis-too-much-with-legend\": \"if legend exists，only one Y Axis can exist\",\n      \"chart-x-legend-axis-not-equal\": \"X Axis can not be same with legend\",\n      \"chart-need-all-attribute-columns\": \"Current chart need all attribute columns\",\n      \"category_chart_general\": \"Globe Container\",\n      \"category_chart_policy_map\": \"Map Config\",\n      \"category_chart_line\": \"Lines Config\",\n      \"option_globe_surface_type\": \"topography\",\n      \"option_globe_surface_type_desc\": \"Setting topography\",\n      \"option_surface_normal\": \"Globe\",\n      \"option_surface_high_texture\": \"High texture globe\",\n      \"option_surface_policy_map\": \"Administrative Map\",\n      \"option_globe_open_environment_light\": \"Open environment light\",\n      \"option_globe_open_environment_light_desc\": \"Open environment light\",\n      \"option_globe_environment_color\": \"Color of space\",\n      \"option_globe_environment_color_desc\": \"Setting the color of space\",\n      \"option_globe_open_galaxy_environment\": \"Open the starry sky\",\n      \"option_globe_open_galaxy_environment_desc\": \"Setting the space as picture of starry sky\",\n      \"option_globe_open_atmosphere\": \"Open atmosphere\",\n      \"option_globe_open_atmosphere_desc\": \"Open atmosphere texture\",\n      \"option_globe_open_auto_revolt\": \"Open auto revolt\",\n      \"option_globe_open_auto_revolt_desc\": \"Open auto revolt\",\n      \"option_globe_open_auto_revolt_speed\": \"Revolt speed\",\n      \"option_globe_open_auto_revolt_speed_desc\": \"Setting revolt speed\",\n      \"option_policy_item_color\": \"Plate color\",\n      \"option_policy_item_color_desc\": \"Setting plate color\",\n      \"option_policy_empty_color\": \"Background color\",\n      \"option_policy_empty_color_desc\": \"Setting background color\",\n      \"option_policy_emphasis_color\": \"Highlight color\",\n      \"option_policy_emphasis_color_desc\": \"Setting highlight color\",\n      \"option_policy_boundary_color\": \"Boundary color\",\n      \"option_policy_boundary_color_desc\": \"Setting the color of plate boundary\",\n      \"option_policy_boundary_width\": \"Boundary width\",\n      \"option_policy_boundary_width_desc\": \"Setting the width of plate boundary\",\n      \"option_policy_label_size\": \"Label size\",\n      \"option_policy_label_size_desc\": \"Setting label font size\",\n      \"option_policy_label_color\": \"Label color\",\n      \"option_policy_label_color_desc\": \"Setting label font color\",\n      \"option_policy_open_geography_grid\": \"Open geography grid\",\n      \"option_policy_open_geography_grid_desc\": \"Open geography grid\",\n      \"option_policy_geography_grid_color\": \"Geography grid color\",\n      \"option_policy_geography_grid_color_desc\": \"Setting geography grid color\",\n      \"option_chart_color_theme\": \"Lines color theme\",\n      \"option_chart_color_theme_desc\": \"Setting lines color theme\",\n      \"option_chart_custom_theme\": \"Custom color theme\",\n      \"option_chart_custom_theme_desc\": \"custom color theme\",\n      \"option_chart_item_color\": \"Lines color\",\n      \"option_chart_item_color_desc\": \"Setting lines color\",\n      \"option_chart_item_width\": \"Lines width\",\n      \"option_chart_item_width_desc\": \"Setting lines width\",\n      \"option_position_point_color\": \"Point color\",\n      \"option_position_point_color_desc\": \"Setting point color\",\n      \"option_position_point_size\": \"Point size\",\n      \"option_position_point_size_desc\": \"Setting point size\",\n      \"option_open_line_animation\": \"Open lines animation\",\n      \"option_open_line_animation_desc\": \"Open lines animation\",\n      \"option_line_animation_color\": \"Lines animation color\",\n      \"option_line_animation_color_desc\": \"Setting lines animation color\",\n      \"option_line_animation_transparent\": \"Lines animation transparent\",\n      \"option_line_animation_transparent_desc\": \"Setting lines animation transparent\",\n      \"option_line_animation_width\": \"Lines animation width\",\n      \"option_line_animation_width_desc\": \"Setting lines animation width\",\n      \"option_line_animation_length_proportion\": \"Lines animation length proportion\",\n      \"option_line_animation_length_proportion_desc\": \"Setting lines animation length proportion\",\n      \"option_line_animation_speed\": \"Lines animation speed\",\n      \"option_line_animation_speed_desc\": \"Setting lines animation speed\",\n      \"option_label_text_regex_3dGlobe_desc\": \"Text for data labels .<br/>The following substitution macros are available：<br/> %_LATITUDE  - Display the latitude <br/>%_LONGITUDE  - Display the longitude  <br/> %_VALUE  - Display the original value <br /> %_COLUMN_N - value of column N  \"\n    }\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/3dGlobeLine.js?");

/***/ })

}]);
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[35],{

/***/ "../src-v5/assets/js/charts.system.senior/timeEvent.js":
/*!*************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/timeEvent.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _charts_plugin_animationTimeSequenceFrame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../charts.plugin/animationTimeSequenceFrame */ \"../src-v5/assets/js/charts.plugin/animationTimeSequenceFrame.js\");\n/* harmony import */ var _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/charts.components/LegendComponent */ \"../src-v5/assets/js/charts.components/LegendComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n\n/** 相关图画图组件 **/\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  chartType: 'timeEvent',\n  //  图形名 [ * 必填项 ]\n  chartDisplayNameKey: \"chart-name-title\",\n  //  图形名称中英文Key [ * 必填项 ]\n  chartDescriptionKey: \"chart-description-title\",\n  //  图形描述中英文Key [ * 必填项 ]\n\n  // 图形配置元素 [ * 必填项 ]\n  needAxis: {\n    // 时间轴\n    time: {\n      i18nKey: \"chart-time-title\"\n    },\n    // 事件标题\n    xAxis: {\n      i18nKey: \"chart-x-axis-title\",\n      defaultXAxisNumber: 1,\n      allowMeasureXAxis: false\n    },\n    // 事件描述\n    rows: {\n      i18nKey: \"chart-y-axis-title\"\n    },\n    // 图例列\n    legend: {}\n  },\n  /**\r\n   * 判断图形允许画的方法 [ * 必填项 ]\r\n   * 适合柱状图的条件 ， 聚合数据且至少一个属性列及至少一个数值列\r\n   * @param searchResultStatistic\r\n   *          {\r\n   *              aggregatedFlag  搜索数据是否聚合的标志\r\n   *\r\n   *              measureColumns    数值列数量\r\n   *              attributeColumns  属性列数量\r\n   *              legendColumns     能作为图例的属性列数量（distinct_count < 50 的列）\r\n   *              dateColumns       日期列数量\r\n   *              lonColumns        经度列数量\r\n   *              latColumns        纬度列数量\r\n   *              queryResultCount    查询数据结果条目\r\n   *              regionColumns        地理列数组（1：国家集合；1.5：国家；2：省集合；2.5：省；3：市集合；3.5：市；4：区集合；4.5：区；0：其他地理列）\r\n   *          }\r\n   *\r\n   * @return Boolean  true: 当前数据适合画当前图形；false: 当前数据不适合画当前图形\r\n   * */\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n\n    // 搜索数据是聚合数据：且至少两个属性列、其中一列为时间列\n    if (searchResultStatistic && searchResultStatistic.aggregatedFlag && searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.attributeColumns.length >= 2) {\n        //必须要有时间列\n        searchResultStatistic.attributeColumns.forEach(function (ac) {\n          if (ac.data_type === \"timestamp\") {\n            satisfiedFlag = true;\n          }\n        });\n      }\n    }\n    return satisfiedFlag;\n  },\n  initChartAxisConfig: function (options = {}) {\n    if (!options.tableData || !options.tableData.headers) return false;\n    let self = this,\n      //  是当前_DataFocusChartTypes中的对象\n      tableData = options.tableData,\n      headers = tableData.headers,\n      columns = tableData.columns;\n\n    // charts是依据各个图形中的getSatisfiedChartAxis生成的\n    let theMatchedChart = tableData.charts && tableData.charts.find(function (chart) {\n        return (chart.name || chart.type) === self.name;\n      }),\n      chartAxis = {};\n    if (!theMatchedChart) {\n      console.log(\"当前数据不适合时间事件图\");\n      return chartAxis;\n    }\n    let getIdIndexInHeader = function (colIdx, headers) {\n      // 目前charts返回的都是索引\n      if (colIdx < headers.length) return colIdx;\n      for (let i = 0; i < headers.length; i++) {\n        if (headers[i].col_id === colIdx) return i;\n      }\n      return -1;\n    };\n    if (self.needAxis && self.needAxis.time) {\n      chartAxis.timeArea = [];\n      theMatchedChart.time && theMatchedChart.time.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        chartAxis.timeArea.push(obj);\n      });\n      chartAxis.curTime = chartAxis.timeArea[0];\n    }\n\n    // 事件标题\n    if (self.needAxis && self.needAxis.xAxis) {\n      chartAxis.xAxisArea = [];\n      theMatchedChart.xAxis && theMatchedChart.xAxis.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = $.extend({}, headers[curColumnIndex]);\n        obj.header = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        chartAxis.xAxisArea.push(obj);\n      });\n\n      // 赋值默认的X轴，默认X轴与图例列不能重叠\n      let xAxisArea = chartAxis.xAxisArea.filter(function (xAxis) {\n        if (chartAxis.curLegend && xAxis.index === chartAxis.curLegend.index) {\n          return false;\n        }\n        if (chartAxis.curTime && xAxis.index === chartAxis.curTime.index) {\n          return false;\n        }\n        return true;\n      });\n      chartAxis.xAxisArea = xAxisArea;\n      chartAxis.curXAxis = [xAxisArea[0]];\n    }\n\n    // 获取图例列及可选数组 [ 默认legend不允许与时间列相同 ]\n    if (self.needAxis && self.needAxis.legend) {\n      chartAxis.legendArea = [];\n      let theLegendArea = [];\n      theMatchedChart.legend && theMatchedChart.legend.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        chartAxis.legendArea.push(obj);\n        theLegendArea.push(obj);\n      });\n\n      // 默认使用值distinct count最小的作为图例\n      theLegendArea.sort(function (a, b) {\n        return a.statistics && b.statistics && a.statistics['unique count'] - b.statistics['unique count'];\n      });\n      chartAxis.legendArea = theLegendArea;\n      chartAxis.curLegend = chartAxis.legendArea.find(legend => {\n        if (!chartAxis.curXAxis || !chartAxis.curXAxis[0]) return true;\n        return legend.index !== chartAxis.curXAxis[0].index;\n      });\n    }\n\n    // 事件描述\n    if (self.needAxis && self.needAxis.rows) {\n      chartAxis.rowArea = [];\n      theMatchedChart.rows && theMatchedChart.rows.forEach(function (c) {\n        let curColumnIndex = getIdIndexInHeader(c, headers);\n        let obj = $.extend({}, headers[curColumnIndex]);\n        obj.header = headers[curColumnIndex];\n        obj.index = curColumnIndex;\n        chartAxis.rowArea.push(obj);\n      });\n      chartAxis.curRows = [];\n    }\n\n    // 因为Legend与Time将属性列全部使用完了，这种时候默认不需要legend , 将Legend分配给XAxis\n    if (self.needAxis && self.needAxis.xAxis) {\n      if (chartAxis.curLegend && !chartAxis.curXAxis.length) {\n        chartAxis.curXAxis = chartAxis.xAxisArea.filter(function (xAxis) {\n          return xAxis.index === chartAxis.curLegend.index;\n        });\n        chartAxis.curLegend = undefined;\n      }\n    }\n    return chartAxis;\n  },\n  validateAxisConfig: function (theAxisConfig) {\n    let theErrorMsgKey = '';\n    if (!theAxisConfig) {\n      theErrorMsgKey = 'chart-axis-config-null-error';\n      return theErrorMsgKey;\n    }\n\n    // 事件不允许为空\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      theErrorMsgKey = 'chart-xy-axis-null';\n      return theErrorMsgKey;\n    }\n\n    // 事件超过1个\n    if (theAxisConfig.xAxis.length > 1) {\n      theErrorMsgKey = 'chart-x-axis-too-much';\n      return theErrorMsgKey;\n    }\n\n    // 事件描述\n    if (theAxisConfig.rows && theAxisConfig.rows.length > 1) {\n      theErrorMsgKey = 'chart-row-axis-too-much';\n      return theErrorMsgKey;\n    }\n\n    // 时间不允许为空\n    if (!theAxisConfig.time) {\n      theErrorMsgKey = 'chart-xy-axis-null';\n      return theErrorMsgKey;\n    }\n\n    // 有legend时，不允许与X轴中的项重复\n    if (theAxisConfig.legend && theAxisConfig.xAxis && theAxisConfig.xAxis.find(function (axis) {\n      return axis.index === theAxisConfig.legend.index;\n    })) {\n      theErrorMsgKey = 'chart_modify_x_legend_not_equal';\n      return theErrorMsgKey;\n    }\n    return theErrorMsgKey;\n  },\n  // 获取当前图形可用的轴配置\n  generateSatisfiedAxes: {\n    // Rows 为属性类和数值列\n    rowsAction: function (searchResultStatistic) {\n      const attributeColumns = searchResultStatistic.attributeColumns || [];\n      const measureColumns = searchResultStatistic.measureColumns || [];\n      return [...attributeColumns.map(function (h) {\n        return h.idx;\n      }), ...measureColumns.map(function (h) {\n        return h.idx;\n      })];\n    }\n  },\n  pickAxesFromSatisfied: {\n    rowsAction: function (theChartType, chartAxis) {\n      return [];\n    }\n  },\n  // 当前图形的配置项[ *新增图形必填项 ]\n  chartConfigureList: [\n  //公共配置\n  {\n    key: \"category_theme\",\n    title: \"category_theme\",\n    options: [\n    //展示方向\n    // {\n    //     key: \"chart_show_orientation\",\n    //     title: \"option_chart_show_orientation\",\n    //     description: \"option_chart_show_orientation_desc\",\n    //     type: 'select',\n    //     selection: [\n    //         \"option_chart_show_orientation_horizon\",\n    //         \"option_chart_show_orientation_vertical\",\n    //     ]\n    // },\n    //主题颜色\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"select\",\n      selection: [\"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"]\n    },\n    //自定义\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    //搜索记录\n    {\n      key: \"chart_page_size\",\n      title: \"option_chart_page_size\",\n      description: \"option_chart_page_size_desc\",\n      onlyConfigFlag: true,\n      type: \"input\",\n      defaultNumber: 1000,\n      withoutSlider: true\n    }]\n  },\n  // 时间轴\n  {\n    key: \"category_style\",\n    title: \"category_chart_timeline\",\n    options: [\n    // 时间线的颜色\n    {\n      key: \"timeline_color\",\n      title: \"option_timeline_color\",\n      description: \"option_timeline_color_desc\",\n      type: 'color',\n      defaultColor: \"#ebebec\"\n    },\n    // 时间线左右间隔\n    {\n      key: \"timeline_gap\",\n      title: \"option_timeline_gap\",\n      description: \"option_timeline_gap_desc\",\n      type: \"input\",\n      min: 10,\n      max: 80,\n      defaultNumber: 30,\n      withoutSlider: true\n    },\n    //节点间距\n    {\n      key: \"style_node_interval\",\n      title: \"option_style_node_interval\",\n      description: \"option_style_node_interval_desc\",\n      type: \"select\",\n      selection: [\"option_node_interval_raw\",\n      // 原始格式\n      // \"option_node_interval_auto\",\n      \"option_node_interval_year\",\n      // \"option_node_interval_season\",\n      \"option_node_interval_month\",\n      // \"option_node_interval_week\",\n      \"option_node_interval_day\", \"option_node_interval_hour\", \"option_node_interval_minute\"]\n    },\n    //节点外圈半径\n    {\n      key: \"node_outer_radius\",\n      title: \"option_node_outer_radius\",\n      description: \"option_node_outer_radius_desc\",\n      type: \"input\",\n      min: 0,\n      max: 20,\n      defaultNumber: 7,\n      withoutSlider: true\n    },\n    //节点外圈宽度\n    {\n      key: \"node_border_width\",\n      title: \"option_node_border_width\",\n      description: \"option_node_border_width_desc\",\n      type: \"input\",\n      min: 0,\n      max: 3,\n      defaultNumber: 2,\n      withoutSlider: true\n    },\n    //节点外圈颜色\n    {\n      key: \"node_border_color\",\n      title: \"option_node_border_color\",\n      description: \"option_node_border_color_desc\",\n      type: 'color'\n    },\n    //节点内心颜色\n    {\n      key: \"node_inter_color\",\n      title: \"option_node_inter_color\",\n      description: \"option_node_inter_color_desc\",\n      type: 'color'\n    }\n    // //连线颜色\n    // {\n    //     key: \"style_line_color\",\n    //     title: \"option_style_line_color\",\n    //     description: \"option_style_line_color_desc\",\n    //     type: 'color',\n    // },\n    //时间标签字体大小\n    // {\n    //     key: \"time_label_font_size\",\n    //     title: \"option_time_label_font_size\",\n    //     description: \"option_time_label_font_size_desc\",\n    //     type: \"input\",\n    //     min: 12,\n    //     max: 32,\n    //     defaultNumber: 14,\n    //     withoutSlider: true,\n    // },\n    //时间标签字体大小\n    // {\n    //     key: \"time_label_font_color\",\n    //     title: \"option_time_label_font_color\",\n    //     description: \"option_time_label_font_color_desc\",\n    //     type: 'color',\n    // },\n    // {\n    //     key: \"timeline_show_event_time\",\n    //     title: \"option_timeline_show_event_time\",\n    //     description: \"option_timeline_show_event_time_desc\",\n    //     type: 'checkbox',\n    // }\n    ]\n  },\n  //事件标题\n  {\n    key: \"category_event_title\",\n    title: \"category_event_title_1\",\n    options: [{\n      key: \"event_aggregation\",\n      title: \"option_event_aggregation\",\n      description: \"option_event_aggregation_desc\",\n      type: \"checkbox-prev\"\n    }, {\n      key: \"event_title_aggregation\",\n      title: \"option_event_title_aggregation\",\n      description: \"option_event_title_aggregation_desc\",\n      type: \"checkbox-prev\",\n      require: 'event_aggregation'\n    }, {\n      key: \"event_title_font_size\",\n      title: \"option_event_title_font_size\",\n      description: \"option_event_title_font_size_desc\",\n      type: \"input\",\n      min: 10,\n      max: 48,\n      defaultNumber: 16,\n      withoutSlider: true\n    }, {\n      key: \"event_title_color\",\n      title: \"option_event_title_color\",\n      description: \"option_event_title_color_desc\",\n      type: 'color',\n      defaultColor: \"#000\"\n    }, {\n      key: \"event_desc_font_size\",\n      title: \"option_event_desc_font_size\",\n      description: \"option_event_desc_font_size_desc\",\n      type: \"input\",\n      min: 10,\n      max: 48,\n      defaultNumber: 14,\n      withoutSlider: true\n    }, {\n      key: \"event_desc_color\",\n      title: \"option_event_desc_color\",\n      description: \"option_event_desc_color_desc\",\n      type: 'color',\n      defaultColor: \"#9f9e9e\"\n    }]\n  }],\n  /**\r\n   * 使用个人画图方法画图形 [*必填项]\r\n   * @params [Object]options  -   当前图形的配置\r\n   *              {\r\n   *                  container       -   当前画图的DOM元素\r\n   *                  chartAxis       -   当前图形的Axis配置\r\n   *                  datas           -   当前画图数据\r\n   *                  isResize        -   是否是窗口变化引起的画图\r\n   *                  chartConfigures -   图形配置\r\n   *                  plugins         -   DataFocus提供的第三方画图库\r\n   *                      {\r\n   *                          d3  -   d3的v3版本\r\n   *                          echarts -   echarts的\r\n   *                      }\r\n   *              }\r\n   * **/\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    let dataOption = {\n      chartAxis: options.chartAxis,\n      columns: options.datas.columns,\n      headers: options.datas.headers,\n      isPieceWishScaleFlag: false\n    };\n    let timeDataResult = _charts_plugin_animationTimeSequenceFrame__WEBPACK_IMPORTED_MODULE_0__[\"default\"].timeData.translateData(dataOption);\n    let isLegendFlag = timeDataResult.isLegendFlag && false;\n\n    //系统配置\n    let d3 = options.plugins.d3v7;\n    let fontSize = options.currentChart.defaultConf.fontSize || 14;\n    let localColor = options.currentChart.defaultConf.localColors.slice(0);\n    //获取配置信息\n\n    let timelineColor = '#ebebec';\n    let timelineGap = 30;\n    let nodeBorderWidth = 2;\n    let nodeBorderColor;\n    let nodeInterval = 'raw'; //事件节点间隔宽度\n    let nodeRadius = 7;\n    let hasNodeColor = false;\n    let nodeColor;\n    let lineColor;\n    let showEventTime = false;\n    let eventAggregation = false;\n    let eventTitleAggregation = false;\n    let eventTitleFontSize = 16;\n    let eventTitleColor = \"#333\";\n    let eventDescFontSize = 14;\n    let eventDescColor = \"#999\";\n    let orientationType = \"vertical\";\n    let hideAxisYTitleFlag = false;\n    let axisYTitlePosition = \"left\";\n    let hideAxisXTitleFlag = false;\n    let axisXTitlePosition = \"bottom\";\n    let hideLegendFlag;\n    let legendPosition = \"bottom\";\n    let legendShape = \"circle\";\n    let hideTimeBarFlag;\n    let timePlayModel = \"none\";\n    let timeLabelPosition = \"center\";\n    let timelineTickFontSize = \"14\";\n    let timelineTickFontColor = '#9395a6';\n    let timeLabelFormat = \"default\";\n    let labelTextPosition = \"top\";\n    let chartConfig;\n    if (options.currentChart.defaultConf.chartConfigures) {\n      chartConfig = options.currentChart.defaultConf.chartConfigures;\n\n      // 时间线颜色\n      if (chartConfig.timeline_color) {\n        timelineColor = chartConfig.timeline_color;\n      }\n      // 时间线左右间隔\n      if (_DataFocusMethod.isPureNumber(chartConfig.timeline_gap)) {\n        timelineGap = parseInt(chartConfig.timeline_gap);\n      }\n\n      //节点外圈宽\n      if (_DataFocusMethod.isPureNumber(chartConfig.node_border_width)) {\n        nodeBorderWidth = parseInt(chartConfig.node_border_width);\n      }\n      //节点外圈颜色\n      if (chartConfig.node_border_color) {\n        nodeBorderColor = chartConfig.node_border_color;\n      }\n      //节点外圈半径\n      if (_DataFocusMethod.isPureNumber(chartConfig.node_outer_radius)) {\n        nodeRadius = parseInt(chartConfig.node_outer_radius);\n      }\n      //节点内心颜色\n      if (chartConfig.node_inter_color) {\n        hasNodeColor = true;\n        nodeColor = chartConfig.node_inter_color;\n      }\n      //连线颜色\n      if (chartConfig.style_line_color) {\n        lineColor = chartConfig.style_line_color;\n      }\n      showEventTime = !!chartConfig.timeline_show_event_time;\n\n      //节点间隔\n      if (chartConfig.style_node_interval) {\n        switch (chartConfig.style_node_interval) {\n          case \"option_node_interval_raw\":\n            nodeInterval = 'raw';\n            break;\n          case \"option_node_interval_auto\":\n            nodeInterval = 'auto';\n            break;\n          case \"option_node_interval_minute\":\n            nodeInterval = 'minute';\n            break;\n          case \"option_node_interval_hour\":\n            nodeInterval = 'hour';\n            break;\n          case \"option_node_interval_day\":\n            nodeInterval = 'day';\n            break;\n          case \"option_node_interval_month\":\n            nodeInterval = 'month';\n            break;\n          case \"option_node_interval_season\":\n            nodeInterval = 'season';\n            break;\n          case \"option_node_interval_year\":\n            nodeInterval = 'year';\n            break;\n          default:\n            nodeInterval = 'raw';\n        }\n      }\n      //展示方向\n      if (chartConfig.chart_show_orientation) {\n        switch (chartConfig.chart_show_orientation) {\n          case \"option_chart_show_orientation_vertical\":\n            orientationType = \"vertical\";\n            break;\n          case \"option_chart_show_orientation_horizon\":\n            orientationType = \"horizon\";\n            break;\n        }\n      }\n\n      //隐藏X轴标题\n      if (chartConfig.hide_axis_x_title) {\n        hideAxisXTitleFlag = true;\n      }\n      //X轴标题方向\n      if (chartConfig.axis_x_title_position) {\n        switch (chartConfig.axis_x_title_position) {\n          case \"option_axis_x_title_position_top\":\n            axisXTitlePosition = 'top';\n            break;\n          case \"option_axis_x_title_position_bottom\":\n            axisXTitlePosition = 'bottom';\n            break;\n        }\n      }\n      //隐藏Y轴标题\n      if (chartConfig.hide_axis_y_title) {\n        hideAxisYTitleFlag = true;\n      }\n      //Y轴标题方向\n      if (chartConfig.axis_y_title_position) {\n        switch (chartConfig.axis_y_title_position) {\n          case \"option_axis_y_title_position_left\":\n            axisYTitlePosition = 'left';\n            break;\n          case \"option_axis_y_title_position_right\":\n            axisYTitlePosition = 'right';\n            break;\n        }\n      }\n\n      //隐藏图例\n      if (chartConfig.hide_chart_legend) {\n        hideLegendFlag = true;\n      }\n\n      //图例位置\n      if (chartConfig.chart_legend_position) {\n        switch (chartConfig.chart_legend_position) {\n          case \"option_legend_position_bottom\":\n            legendPosition = \"bottom\";\n            break;\n          case \"option_legend_position_right\":\n            legendPosition = \"right\";\n            break;\n        }\n      }\n      //图例样式\n      if (chartConfig.chart_legend_shape) {\n        switch (chartConfig.chart_legend_shape) {\n          case \"option_legend_shape_circle\":\n            legendShape = \"circle\";\n            break;\n          case \"option_legend_shape_rect\":\n            legendShape = \"rect\";\n            break;\n        }\n      }\n\n      //隐藏时间轴\n      if (chartConfig.hide_time_bar) {\n        hideTimeBarFlag = true;\n      }\n      if (chartConfig.time_label_position) {\n        switch (chartConfig.time_label_position) {\n          case \"option_time_label_position_top_right\":\n            timeLabelPosition = \"topRight\";\n            break;\n          case \"option_time_label_position_top_left\":\n            timeLabelPosition = \"topLeft\";\n            break;\n          case \"option_time_label_position_bottom_right\":\n            timeLabelPosition = \"bottomRight\";\n            break;\n          case \"option_time_label_position_bottom_left\":\n            timeLabelPosition = \"bottomLeft\";\n            break;\n          case \"option_time_label_position_bottom_center\":\n            timeLabelPosition = \"center\";\n            break;\n        }\n      }\n      if (_DataFocusMethod.isPureNumber(chartConfig.time_label_font_size)) {\n        timelineTickFontSize = parseInt(chartConfig.time_label_font_size);\n      }\n      if (chartConfig.time_label_font_color) {\n        timelineTickFontColor = chartConfig.time_label_font_color;\n      }\n      if (chartConfig.time_label_format) {\n        switch (chartConfig.time_label_format) {\n          case \"option_time_label_format_default\":\n            timeLabelFormat = \"default\";\n            break;\n          case \"option_time_label_format_y\":\n            timeLabelFormat = \"y\";\n            break;\n          case \"option_time_label_format_ym\":\n            timeLabelFormat = \"ym\";\n            break;\n          case \"option_time_label_format_ymd\":\n            timeLabelFormat = \"ymd\";\n            break;\n        }\n      }\n      //播放设置\n      if (chartConfig.time_play_model) {\n        switch (chartConfig.time_play_model) {\n          case \"option_play_model_first_auto\":\n            timePlayModel = \"first\";\n            break;\n          case \"option_play_model_always_auto\":\n            timePlayModel = \"always\";\n            break;\n          case \"option_play_model_none_auto\":\n            timePlayModel = \"none\";\n            break;\n        }\n      }\n\n      //数据标签位置\n      if (chartConfig.label_text_position) {\n        switch (chartConfig.label_text_position) {\n          case \"option_label_text_position_top\":\n            labelTextPosition = \"top\";\n            break;\n          case \"option_label_text_position_center\":\n            labelTextPosition = \"center\";\n            break;\n        }\n      }\n\n      // 事件标题是否在当前时间段内聚合\n      if (chartConfig.event_aggregation) {\n        eventAggregation = true;\n      }\n      if (chartConfig.event_title_aggregation) {\n        eventTitleAggregation = true;\n      }\n      // 事件标题字体大小\n      if (_DataFocusMethod.isPureNumber(chartConfig.event_title_font_size)) {\n        eventTitleFontSize = parseInt(chartConfig.event_title_font_size);\n      }\n      // 事件标题颜色\n      if (chartConfig.event_title_color) {\n        eventTitleColor = chartConfig.event_title_color;\n      }\n      // 事件描述字体大小\n      if (_DataFocusMethod.isPureNumber(chartConfig.event_desc_font_size)) {\n        eventDescFontSize = parseInt(chartConfig.event_desc_font_size);\n      }\n      // 事件描述颜色\n      if (chartConfig.event_desc_color) {\n        eventDescColor = chartConfig.event_desc_color;\n      }\n    }\n    $(options.container).empty();\n    let drawWidth, drawHeight;\n    $(options.container).css(\"position\", \"relative\");\n    drawWidth = $(options.container).width();\n    drawHeight = $(options.container).height();\n    //处理容器\n    let containerOption = {\n      hideTimeBarFlag: hideTimeBarFlag,\n      drawWidth: drawWidth,\n      drawHeight: drawHeight,\n      hideAxisXTitleFlag: hideAxisXTitleFlag,\n      axisXTitlePosition: axisXTitlePosition,\n      isLegendFlag: isLegendFlag,\n      hideLegendFlag: hideLegendFlag,\n      legendPosition: legendPosition,\n      hideAxisYTitleFlag: hideAxisYTitleFlag,\n      axisYTitlePosition: axisYTitlePosition,\n      container: options.container,\n      currentChart: options.currentChart,\n      chartAxis: options.chartAxis,\n      fontSize: fontSize\n    };\n    let containerResult = _charts_plugin_animationTimeSequenceFrame__WEBPACK_IMPORTED_MODULE_0__[\"default\"].containerOp.executeContainer(containerOption);\n    drawWidth = containerResult.drawWidth;\n    drawHeight = containerResult.drawHeight;\n    let svgDiv = containerResult.svgDiv;\n    const svgDivNativeDom = svgDiv.get(0);\n    const canvasContainer = d3.select(svgDivNativeDom);\n    canvasContainer.select('svg').remove(); // 移除初始状态的 SVG 标签\n    const self = this;\n    const chartAxis = options.chartAxis;\n    const chartConfigures = options.chartConfigures || {};\n    const currentChart = options.currentChart;\n    const conf = currentChart.defaultConf || {};\n    // 1. 数据准备\n    const curTimeAxis = options.chartAxis.curTime;\n    const curLegendAxis = options.chartAxis.curLegend;\n    const columns = options.datas.columns;\n    const entireDomain = [new Date(curTimeAxis.statistics.min), new Date(curTimeAxis.statistics.max)];\n    const timeScale = d3.scaleTime().domain(entireDomain);\n    // 需要显示格式化以后的数据 【 主要于时间列 】\n    // const timeAccessor = function(row) {\n    //     return _DataFocusMethod.formatTextData(row[curTimeAxis.idx] , curTimeAxis);\n    // } ;\n    const timeAccessor = row => row[curTimeAxis.idx];\n    const legendAccessor = row => curLegendAxis && row[curLegendAxis.idx];\n    const dotPosAccessor = time => timeScale(new Date(time));\n\n    // 事件标题\n    const [{\n      idx: eventTitleIndex\n    }] = options.chartAxis.curXAxis;\n    const eventTitleAccessor = function (row) {\n      return _DataFocusMethod.formatTextData(row[eventTitleIndex], options.chartAxis.curXAxis && options.chartAxis.curXAxis[0]);\n    };\n    let eventDescColumnIndex = -1;\n    let eventDescAccessor;\n    if (options.chartAxis.curRows && options.chartAxis.curRows.length) {\n      eventDescColumnIndex = options.chartAxis.curRows[0].idx;\n      eventDescAccessor = row => row[eventDescColumnIndex];\n    }\n    let legendValueList = [],\n      defaultLegendList = [];\n    let savedLegendColorConfig = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateLegendColor({\n      // legendColors: conf.legendColors ,\n      // yAxisColors: conf.yAxisColors ,\n      curYAxis: chartAxis.curYAxis,\n      configureLegendList: chartConfigures.chart_legend_list\n    });\n    let colorFunc = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].translateColorThemeConfigure(chartConfigures.chart_color_theme, {\n      chart_custom_theme: chartConfigures.chart_custom_theme\n    });\n    if (curLegendAxis) {\n      chartAxis.curLegend.distincts && chartAxis.curLegend.distincts.forEach(function (legendName, index) {\n        let theLegendId = _pc_assets_js_charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].generateLegendId('legendAxis', legendName); // \"column-value-\" + legendName ,\n        let theConfigLegend = savedLegendColorConfig && savedLegendColorConfig.find(function (theConfig) {\n          return theConfig.id === theLegendId;\n        });\n        legendValueList.push({\n          type: 'columnValue',\n          legend: legendName,\n          id: theLegendId,\n          index: index,\n          color: theConfigLegend && theConfigLegend.color || colorFunc(index),\n          show: !theConfigLegend || theConfigLegend.show === undefined ? true : !!theConfigLegend.show\n        });\n        defaultLegendList.push({\n          type: 'columnValue',\n          legend: legendName,\n          id: theLegendId,\n          index: index,\n          color: colorFunc(index),\n          show: true\n        });\n      });\n      const legendContainer = canvasContainer.append('div');\n      legendContainer.classed('event-legend-container', true);\n\n      // 使用d3语法在legendContainer中绘制每个图例Item\n      const legendItems = legendContainer.selectAll('.legend-item').data(legendValueList).enter().append('div');\n      // 每个item中都包含一个正方形和图例的描述\n      legendItems.classed('legend-item', true).each(function (d) {\n        const legendItem = d3.select(this);\n        legendItem.classed('hidden', !d.show);\n        const legendRect = legendItem.append('div').classed('legend-rect', true).style('background-color', d.color);\n        const legendText = legendItem.append('div').classed('legend-text', true).text(d.legend);\n      });\n      canvasContainer.style('display', 'flex');\n    }\n    const eventBlockContainer = canvasContainer.append('div').classed('event-block-container', true);\n    const cnLocale = d3.timeFormatLocale({\n      \"dateTime\": \"%A, %e %B %Y г. %X\",\n      \"date\": \"%d.%m.%Y\",\n      \"time\": \"%H:%M:%S\",\n      \"periods\": [\"上午\", \"下午\"],\n      \"days\": [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n      \"shortDays\": [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n      \"months\": [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"],\n      \"shortMonths\": [\" 1月\", \" 2月\", \" 3月\", \" 4月\", \" 5月\", \" 6月\", \" 7月\", \" 8月\", \" 9月\", \"10月\", \"11月\", \"12月\"]\n    });\n    const formatMillisecond = cnLocale.format(\".%L\"),\n      formatSecond = cnLocale.format(\"%M:%S\"),\n      formatMinute = cnLocale.format(\"%H:%M\"),\n      formatHour = cnLocale.format(\"%p %H时\"),\n      formatDay = cnLocale.format(\"%b %d日\"),\n      // formatWeek = cnLocale.format(\"%b %d日\"),\n      formatMonth = cnLocale.format(\"%Y年%b\"),\n      formatYear = cnLocale.format(\"%Y\");\n\n    // 对日期进行格式化\n    let multiFormat;\n    if (nodeInterval === 'auto') {\n      console.log('是自动模式');\n      multiFormat = function (date) {\n        return (d3.timeMinute(date) < date ? formatSecond : d3.timeHour(date) < date ? formatMinute : d3.timeDay(date) < date ? formatHour : d3.timeYear(date) < date ? formatMonth : formatYear)(date);\n      };\n    } else {\n      multiFormat = function (date) {\n        return (d3.timeSecond(date) < date ? formatMillisecond : d3.timeMinute(date) < date ? formatSecond : d3.timeHour(date) < date ? formatMinute : d3.timeDay(date) < date ? formatHour : d3.timeYear(date) < date ? formatMonth : formatYear)(date);\n      };\n    }\n    let curFormatter = multiFormat;\n    switch (nodeInterval) {\n      case \"year\":\n        curFormatter = formatYear;\n        break;\n      case \"season\":\n        curFormatter = formatMonth;\n        break;\n      case \"month\":\n        curFormatter = formatMonth;\n        break;\n      case \"day\":\n        curFormatter = formatDay;\n        break;\n      case \"hour\":\n        curFormatter = formatHour;\n        break;\n      case \"minute\":\n        curFormatter = formatMinute;\n        break;\n      case \"microsecond\":\n        curFormatter = formatMillisecond;\n        break;\n      case \"auto\":\n      default:\n        curFormatter = multiFormat;\n        break;\n    }\n    const formattedText = row => curFormatter(new Date(timeAccessor(row)));\n    const aggregatedColumns = [];\n    let maxCount = 0;\n    for (const row of columns) {\n      // 聚合后显示的数据\n      const eventTime = timeAccessor(row);\n      const aggregatedTimeContent = nodeInterval === 'raw' ? eventTime : formattedText(row);\n      // 当前时间段已存在\n      const existedAggregatedColumn = aggregatedColumns.find(existedColumn => timeAccessor(existedColumn) === aggregatedTimeContent);\n      if (existedAggregatedColumn) {\n        // 当前时间段已存在\n        const eventTitleList = existedAggregatedColumn['eventTitleList'];\n        const currentTitle = eventTitleAccessor(row);\n        const existedTitle = eventTitleList.find(obj => obj.title === currentTitle);\n        if (eventTitleAggregation) {\n          // 同一时间段内，事件标题聚合\n          if (!existedTitle) {\n            // 当前时间段内没有此属性\n            eventTitleList.push({\n              title: currentTitle,\n              count: 1,\n              times: [eventTime],\n              legends: [legendAccessor(row)]\n            });\n            maxCount = Math.max(maxCount, 1);\n          } else {\n            // 当前时间段内已经有此属性，则新增时间\n            existedTitle.times.push(eventTime);\n            existedTitle.legends.push(legendAccessor(row));\n            existedTitle.count++;\n            maxCount = Math.max(maxCount, existedTitle.count);\n          }\n        } else {\n          // 同一时间段内，时间标题不聚合\n          eventTitleList.push({\n            title: currentTitle,\n            count: 1,\n            times: [eventTime],\n            legends: [legendAccessor(row)]\n          });\n        }\n      } else {\n        // 当前时间段不存在\n\n        const aggregatedColumn = [...row];\n        aggregatedColumn[curTimeAxis.idx] = aggregatedTimeContent;\n        aggregatedColumn['eventTitleList'] = [{\n          title: eventTitleAccessor(aggregatedColumn),\n          count: 1,\n          // 此属性在当前时间段聚合后的个数\n          times: [eventTime],\n          // 此属性在当前时间段聚合后，的时间列表\n          legends: [legendAccessor(row)]\n        }];\n        maxCount = Math.max(maxCount, 1);\n        aggregatedColumns.push(aggregatedColumn);\n      }\n    }\n    let auxiliaryPrecision, prevFormat;\n    if (nodeInterval !== 'auto') {\n      // 添加辅助线，标识当前精度时间所在的时间区间和范围\n      switch (curFormatter) {\n        case formatMonth:\n          auxiliaryPrecision = cnLocale.format('%Y');\n          prevFormat = formatYear;\n          break;\n        case formatDay:\n          auxiliaryPrecision = cnLocale.format('%Y %b');\n          prevFormat = formatMonth;\n          break;\n        case formatHour:\n          auxiliaryPrecision = cnLocale.format('%Y %b %d日 %p');\n          prevFormat = formatDay;\n          break;\n        case formatMinute:\n          auxiliaryPrecision = cnLocale.format('%Y %b %d日 %p %H时');\n          prevFormat = formatHour;\n          break;\n        case formatSecond:\n          auxiliaryPrecision = cnLocale.format('%Y %b %d日 %p %H:%M');\n          prevFormat = formatMinute;\n          break;\n        case formatMillisecond:\n          auxiliaryPrecision = cnLocale.format('%Y %b %d日 %p %H:%M:%S');\n          prevFormat = formatSecond;\n          break;\n      }\n    }\n\n    // 2. 事件 Block 容器\n    const eventsFragment = document.createDocumentFragment();\n    const columnsToDraw = eventAggregation ? aggregatedColumns : columns;\n    for (let i = 0; i < columnsToDraw.length; i++) {\n      const row = columnsToDraw[i];\n      const eventTitle = eventTitleAccessor(row);\n      const eventDesc = eventDescAccessor ? eventDescAccessor(row) : '';\n      const eventTime = timeAccessor(row);\n      const curEventBlock = document.createElement('div');\n      curEventBlock.classList.add('event-block-item');\n      const timeBlock = document.createElement('div');\n      timeBlock.classList.add('event-block-item-time');\n      const time = document.createElement('span');\n      time.classList.add('text-clip');\n      if (!eventAggregation) {\n        time.textContent = nodeInterval === 'raw' ? eventTime : formattedText(row);\n      } else {\n        time.textContent = timeAccessor(row);\n      }\n      timeBlock.append(time);\n      const center = document.createElement('div');\n      center.classList.add('event-block-item-center');\n      center.style.setProperty('--timelineGap', timelineGap + 'px');\n      center.style.setProperty('--width', 14 + 'px');\n      center.style.setProperty('--timelineColor', timelineColor || '#ebebec');\n      if (i === 0) {\n        center.classList.add('first');\n        center.style.backgroundSize = '100% calc(100% - 6px)';\n        center.style.backgroundPositionY = 'bottom';\n      }\n      if (i === columnsToDraw.length - 1) {\n        center.classList.add('last');\n        center.style.backgroundSize = '100% 6px';\n      }\n      const circle = document.createElement('div');\n      circle.classList.add('event-block-item-circle');\n      if (curLegendAxis) {\n        hasNodeColor = true;\n        nodeColor = '#ccc';\n      }\n      circle.setAttribute('style', `width: ${nodeRadius * 2}px;height:${nodeRadius * 2}px;border-width: ${nodeBorderWidth}px; border-color:${nodeBorderColor || 'transparent'}; background: ${hasNodeColor ? nodeColor : localColor[i % localColor.length]}`);\n      center.appendChild(circle);\n      const eventContent = document.createElement('div');\n      eventContent.classList.add('event-block-item-content');\n      eventContent.classList.add('text-clip');\n      if (!eventAggregation) {\n        // 事件未聚合的情况下，显示事件标题文字\n        const eventTitleBlock = document.createElement('div');\n        eventTitleBlock.classList.add('event-block-item-title');\n        eventTitleBlock.style.fontSize = eventTitleFontSize + 'px';\n        eventTitleBlock.style.color = eventTitleColor;\n        eventTitleBlock.textContent = eventTitle;\n        eventContent.appendChild(eventTitleBlock);\n      } else {\n        // 事件未聚合的情况下，显示每个事件。见#767\n        const eventTitleList = row['eventTitleList'];\n        for (const eventTitle of eventTitleList) {\n          const d = document.createElement('div');\n          d.classList.add('event-block-item-column-container');\n          const title = document.createElement('span');\n          title.classList.add('event-block-item-column-text');\n          title.classList.add('text-clip');\n          title.textContent = eventTitle.title;\n          title.setAttribute('title', `${eventTitle.title} x${eventTitle.count}`);\n          const column = document.createElement('div');\n          column.classList.add('event-block-item-column');\n          if (curLegendAxis) {\n            const concatDetails = eventTitle.times.map((time, i) => `${time} ${eventTitle.legends[i]}`);\n            column.setAttribute('title', `${eventTitle.title} x${eventTitle.count}\\n${concatDetails.join('\\n')}`);\n          } else {\n            column.setAttribute('title', `${eventTitle.title} x${eventTitle.count}\\n${eventTitle.times.join('\\n')}`);\n          }\n          column.style.setProperty('--percent', `${(eventTitle.count / maxCount * 100).toFixed(2)}%`);\n          if (curLegendAxis) {\n            // 当前柱子的颜色\n            const matchedLegendItem = legendValueList.find(legendItem => {\n              return eventTitle.legends && eventTitle.legends.length === 1 && eventTitle.legends.find(legendString => legendString === legendItem.legend);\n            });\n            const columnColor = matchedLegendItem && matchedLegendItem.color || '#ccc';\n            column.style.setProperty('--color', columnColor);\n          } else {\n            column.style.setProperty('--color', '#508c49');\n          }\n          d.appendChild(title);\n          d.appendChild(column);\n          eventContent.appendChild(d);\n        }\n        eventContent.style.flexDirection = 'row';\n        eventContent.style.fontSize = eventTitleFontSize + 'px';\n        eventContent.style.color = eventTitleColor;\n        eventContent.style.gap = '8px';\n        eventContent.style.flexWrap = 'wrap';\n      }\n\n      // 事件聚合的情况下，不显示事件描述\n      if (!eventAggregation && eventDescAccessor) {\n        let eventDescBlock = document.createElement('div');\n        eventDescBlock.classList.add('event-block-item-desc');\n        eventDescBlock.classList.add('text-clip');\n        eventDescBlock.style.fontSize = eventDescFontSize + 'px';\n        eventDescBlock.style.color = eventDescColor;\n        eventDescBlock.textContent = eventDesc;\n        eventContent.appendChild(eventDescBlock);\n      }\n      curEventBlock.appendChild(timeBlock);\n      curEventBlock.appendChild(center);\n      curEventBlock.appendChild(eventContent);\n      eventsFragment.appendChild(curEventBlock);\n    }\n\n    // 作用是使事件水平居中\n    const eventBlockContainerDom = eventBlockContainer.node();\n    eventBlockContainerDom.appendChild(eventsFragment);\n    const firstEventBlockItem = eventBlockContainerDom.querySelector('.event-block-item');\n    const firstEventBlockItemWidth = firstEventBlockItem.offsetWidth;\n    if (curLegendAxis) {\n      const legendContainer = canvasContainer.select('.event-legend-container');\n      legendContainer.node().style.marginLeft = `calc(50% - ${(legendContainer.node().offsetWidth + 32 + firstEventBlockItemWidth) / 2}px)`;\n      eventBlockContainerDom.style.setProperty('--marginLeft', `32px`);\n    } else {\n      eventBlockContainerDom.style.setProperty('--marginLeft', `calc(50% - ${firstEventBlockItemWidth / 2}px)`);\n    }\n    return;\n    function axis(scale) {\n      const axis = orientationType === 'horizon' ? d3.axisBottom(scale.range([20, drawWidth - 20])) : d3.axisLeft(scale.range([20, drawHeight - 20]));\n      return Object.assign(axis, {\n        render() {\n          return timelineArea.call(this).node();\n        }\n      });\n    }\n    let overLapSet = [];\n    const isOverlap = box => {\n      const boxRect = {\n        left: box.x * 1,\n        top: box.y * 1,\n        right: box.x * 1 + box.width * 1,\n        bottom: box.y * 1 + box.height * 1\n      };\n      let allowFlag = true;\n      for (let i = 0; i < overLapSet.length; i++) {\n        const curBox = overLapSet[i];\n        const curBoxRect = {\n          left: curBox.x * 1,\n          top: curBox.y * 1,\n          right: curBox.x * 1 + curBox.width * 1,\n          bottom: curBox.y * 1 + curBox.height * 1\n        };\n        const xMax = Math.max(curBoxRect.right, boxRect.right);\n        const xMin = Math.min(curBoxRect.left, boxRect.left);\n        const yMax = Math.max(curBoxRect.bottom, boxRect.bottom);\n        const yMin = Math.min(curBoxRect.top, boxRect.top);\n        if (xMax - xMin > curBox.width * 1 + box.width * 1 || yMax - yMin > curBox.height * 1 + box.height * 1) {} else {\n          allowFlag = false;\n          break;\n        }\n      }\n      if (allowFlag) {\n        overLapSet.push(box);\n      }\n      return !allowFlag;\n    };\n\n    // 缩放、平移\n    (() => {\n      const zoom = d3.zoom().scaleExtent([0.5, Infinity]).filter(event => {\n        event.preventDefault();\n        return !event.target.closest('.brush') && (!event.ctrlKey || event.type === 'wheel') && !event.button;\n      });\n      let mousePos = {\n        x: 0,\n        y: 0\n      };\n      let prevK = 1;\n      let lastOffsetY = 0,\n        isPan = false;\n      let curDomain = entireDomain;\n      canvasContainer.on('pointermove', e => {\n        mousePos.x = e.offsetX;\n        mousePos.y = e.offsetY;\n      });\n      canvasContainer.on('pointerdown.pan', e => {\n        isPan = true;\n        lastOffsetY = e.y;\n        const moveHandler = e => {\n          if (!isPan) return;\n          const diffY = e.y - lastOffsetY;\n          lastOffsetY = e.y;\n          const panPercentage = diffY / drawHeight;\n          const extent = curDomain[1] - curDomain[0];\n          curDomain = [new Date(curDomain[0].getTime() - extent * panPercentage), new Date(curDomain[1].getTime() - extent * panPercentage)];\n          timeScale.domain(curDomain);\n          updateFrame();\n        };\n        canvasContainer.on('pointermove.pan', moveHandler);\n        canvasContainer.on('pointerup.pan', e => {\n          lastOffsetY = 0;\n          canvasContainer.on('pointermove.pan', null);\n        }, {\n          once: true\n        });\n      });\n      canvasContainer.call(zoom.on(\"zoom\", function (zoomed) {\n        const curTransform = zoomed.transform;\n        const curHeightDegree = mousePos.y / drawHeight;\n        // 处理 scale\n        if (curTransform.k > prevK) {\n          const extent = curDomain[1] - curDomain[0];\n          const diff = extent * 0.1;\n          curDomain = [new Date(curDomain[0].getTime() + diff * curHeightDegree), new Date(curDomain[1].getTime() - diff * (1 - curHeightDegree))];\n          timeScale.domain(curDomain);\n          prevK = curTransform.k;\n        } else if (curTransform.k < prevK) {\n          const extent = curDomain[1] - curDomain[0];\n          const diff = extent * 0.1;\n          curDomain = [new Date(curDomain[0].getTime() - diff * (1 - curHeightDegree)), new Date(curDomain[1].getTime() + diff * curHeightDegree)];\n          timeScale.domain(curDomain);\n          prevK = curTransform.k;\n        } else {\n          // 平移\n          prevK = curTransform.k;\n          return;\n        }\n        updateFrame();\n      })).on('mousedown.zoom', null).on('mousemove.zoom', null).on('mouseup.zoom', null).on('dragstart.zoom', null).on('selectstart.zoom', null).on('touchstart.zoom', null).on('touchmove.zoom', null).on('touchend.zoom', null).on('touchcancel.zoom', null);\n    })();\n\n    // //  时间点 Group\n    // const timeDotGroup = timelineContainer.append('g').classed('time-dots', true);\n    // timeDotGroup.attr('stroke-width', '2px').attr('stroke', '#fff');\n    // // 时间轴上的点\n    // const timeDots = timeDotGroup\n    //     .selectAll('circle')\n    //     .data(columns)\n    //     .join('circle');\n\n    // 事件连线容器\n    const eventLinkContainer = canvasContainer.append('svg').classed('event-link-group', true);\n    if (orientationType === 'horizon') {\n      eventLinkContainer.attr('transform', `translate(0 ${drawHeight / 2 - 15})`);\n    } else {\n      eventLinkContainer.attr('transform', `translate(${drawWidth / 2 + 15}  0)`);\n    }\n    const eventLinkGroup = eventLinkContainer.append('g');\n    eventLinkGroup.attr('fill', '#333');\n    // 事件连线\n    const eventLinks = eventLinkGroup.selectAll('line').data(columns).join('line');\n\n    // 事件发生的时刻\n    const eventTimeContainer = canvasContainer.append('svg').classed('event-time-group', true).style('stroke-width', '0');\n    if (orientationType === 'horizon') {\n      eventTimeContainer.attr('transform', `translate(0 ${drawHeight / 2 + 15})`);\n      eventTimeContainer.attr('dominant-baseline', 'top');\n    } else {\n      eventTimeContainer.attr('transform', `translate(${drawWidth / 2 - 15}  0)`);\n      eventTimeContainer.attr('text-anchor', 'end');\n      eventTimeContainer.attr('dominant-baseline', 'middle');\n    }\n    const eventTimeGroup = eventTimeContainer.append('g');\n    eventTimeGroup.attr('fill', '#333');\n    const eventTimeContents = eventTimeGroup.selectAll('text').data(columns).join('text');\n    const eventContainer = canvasContainer.append('svg').classed('event-group', true);\n    if (orientationType === 'horizon') {\n      eventContainer.attr('transform', `translate(0 ${drawHeight / 2 - 50})`);\n      eventContainer.attr('text-anchor', 'middle');\n    } else {\n      eventContainer.attr('transform', `translate(${drawWidth / 2 + 50}  0)`);\n      eventContainer.attr('dominant-baseline', 'middle');\n    }\n    const eventGroup = eventContainer.append('g');\n    eventGroup.attr('fill', eventTitleColor || '#333').style('stroke-width', '0');\n    // 事件文字内容\n    const eventContents = eventGroup.selectAll('text').data(columns).join('text');\n    const updateFrame = () => {\n      overLapSet = [];\n      const timeAxis = axis(timeScale);\n      // 1. 刻度的间隔   2. 刻度的文字内容（日期格式化）\n      timeAxis.ticks().tickFormat(time => {\n        return curFormatter(time);\n      }).render();\n\n      // 绘制时间轴上的点\n      (() => {\n        timeDots.style('display', row => {\n          if (orientationType === 'horizon') {\n            row.pos = {\n              x: dotPosAccessor(timeAccessor(row)),\n              y: 0\n            };\n          } else {\n            // console.log(timeAccessor(row));\n            row.pos = {\n              x: 0,\n              y: dotPosAccessor(timeAccessor(row))\n            };\n          }\n          // console.log(row.pos);\n          const box = {\n            x: row.pos.x,\n            y: row.pos.y,\n            width: nodeRadius * 2 + 2,\n            height: nodeRadius * 2 + 2\n          };\n          row.isOverLap = isOverlap(box);\n          return row.isOverLap ? 'none' : null;\n        }).attr('stroke-width', nodeBorderWidth).attr('stroke', nodeBorderColor).attr('fill', (row, i) => {\n          return hasNodeColor ? nodeColor : localColor[i % localColor.length];\n        }).attr(\"cx\", row => row.pos.x).attr(\"cy\", row => row.pos.y).attr('r', nodeRadius).on('mouseover.tip', (e, row) => {\n          options.currentChart.positionChartPrompt(e, timeAccessor(row) + '');\n        }).on('mouseout.tip', () => {\n          options.currentChart.clearChartPrompt();\n        });\n\n        // .attr(\"fill\", node => {\n        //     const nodeName = node.id;\n        //     return nodeFill(nodeName)\n        // })\n        // .attr(\"stroke\", nodeStroke)\n        // .attr(\"stroke-opacity\", nodeStrokeOpacity)\n        // .attr(\"stroke-width\", nodeStrokeWidth)\n        // .attr(\"r\", ({id: nodeName}) => nodeRadius(nodeName));\n      })();\n\n      // 绘制到事件的连线\n      (() => {\n        eventLinks.style('display', row => {\n          return row.isOverLap ? 'none' : null;\n        }).attr('stroke', (row, i) => {\n          return lineColor;\n        });\n        if (orientationType === 'horizon') {\n          eventLinks.attr('x1', row => row.pos.x);\n          eventLinks.attr('x2', row => row.pos.x);\n          eventLinks.attr('y1', '0');\n          eventLinks.attr('y2', '-30');\n        } else {\n          eventLinks.attr('x1', '0');\n          eventLinks.attr('x2', '30');\n          eventLinks.attr('y1', row => row.pos.y);\n          eventLinks.attr('y2', row => row.pos.y);\n        }\n      })();\n\n      // 事件发生的时间\n      (() => {\n        if (showEventTime) {\n          const formattedText = row => curFormatter(new Date(timeAccessor(row)));\n          eventTimeContents.text(formattedText).style('display', row => {\n            // return 'none'\n            return row.isOverLap ? 'none' : null;\n          }).attr(\"x\", row => row.pos.x).attr(\"y\", row => row.pos.y);\n        }\n      })();\n\n      // 绘制事件内容\n      (() => {\n        eventContents.text(eventTitleAccessor).style('display', row => {\n          return row.isOverLap ? 'none' : null;\n        }).attr(\"x\", row => row.pos.x).attr(\"y\", row => row.pos.y).style('font-size', eventTitleFontSize + 'px');\n      })();\n\n      // 设置文本的颜色\n      if (showEventTime) {\n        d3.selectAll('.timeline g.tick text').style('display', 'none');\n      } else {\n        d3.selectAll('.timeline g.tick text').attr('stroke', timelineTickFontColor).style('font-size', timelineTickFontSize + 'px').style('font-weight', '100');\n      }\n\n      // 关闭刻度线\n      d3.selectAll('.timeline g.tick line');\n      // .style('display', 'none');\n\n      // 时间轴的颜色\n      d3.select('.timeline path.domain').attr('stroke', '#434449').attr('stroke-width', '3px');\n    };\n    updateFrame();\n  },\n  getTemplateData: function () {\n    let theTemplateData = {\n      headers: [{\n        idx: 0,\n        col_id: '10001',\n        col_uuid: '10001',\n        col_name: '样例事件列',\n        data_type: 'string',\n        operator: '',\n        geo_type: '',\n        col_type: 'ATTRIBUTE',\n        distincts: [\"重大样例事件1\", \"重大样例事件2\", \"重大样例事件3\", \"重大样例事件4\", \"重大样例事件5\"]\n      }, {\n        idx: 1,\n        col_id: '10002',\n        col_uuid: '10002',\n        col_name: '样例时间列',\n        data_type: 'timestamp',\n        operator: '',\n        geo_type: '',\n        col_type: 'ATTRIBUTE',\n        distincts: [\"2022-1-1 00:00:00\", \"2022-2-1 00:00:00\", \"2022-3-1 00:00:00\", \"2022-4-1 00:00:00\", \"2022-5-1 00:00:00\"],\n        statistics: {\n          min: '2022-1-1 00:00:00',\n          max: '2022-5-1 00:00:00'\n        }\n      }],\n      columns: [[\"重大样例事件1\", \"2022-1-1 00:00:00\"], [\"重大样例事件2\", \"2022-2-1 00:00:00\"], [\"重大样例事件3\", \"2022-3-1 00:00:00\"], [\"重大样例事件4\", \"2022-4-1 00:00:00\"], [\"重大样例事件5\", \"2022-5-1 00:00:00\"]],\n      default_chart: {\n        type: 'timeEvent',\n        xAxis: [0],\n        rows: [],\n        time: [1]\n      },\n      charts: [{\n        type: 'timeEvent',\n        xAxis: [0],\n        rows: [],\n        time: [1]\n      }]\n    };\n    return theTemplateData;\n  },\n  // 当前图形定制的中英文[ 配置XY轴，图表配置 ] [ *新增图形必填项 ]\n  i18nObj: {\n    chinese: {\n      \"chart-name-title\": \"时间事件图\",\n      \"chart-description-title\": \"至少一个属性列，一个时间列\",\n      \"chart-x-axis-title\": \"事件标题\",\n      \"chart-y-axis-title\": \"事件描述\",\n      // \"chart-legend-axis-title\": \"图例\",\n      \"chart-time-title\": \"时间\",\n      \"chart-axis-config-null-error\": \"系统没有传入当前用户的Axis配置信息\",\n      \"chart-xy-axis-null\": \"事件标题及时间不能为空\",\n      \"chart-x-axis-too-much\": \"事件只允许一个\",\n      \"chart-row-axis-too-much\": \"事件描述只能有一列\",\n      \"category_chart_general\": \"通用\",\n      \"option_chart_color_theme\": \"颜色主题\",\n      \"option_chart_custom_theme\": \"自定义主题\",\n      \"option_chart_custom_theme_desc\": \"自定义主题\",\n      \"option_label_text_regex_timeEvent_desc\": \"用于数据标签的文本。<br/>有以下替换宏可用：<br/>%_TIME  - 可显示时间标签  <br/>%_NAME  - 可显示第一个属性列  <br/>%_VALUE  - 可显示第一个数值列 <br/> %_COLUMN_N - 第N列的数值 <br /> %_BR - 换行符\",\n      \"category_chart_timeline\": \"时间轴\",\n      \"option_node_inter_radius\": \"节点内心宽度\",\n      \"option_node_inter_radius_desc\": \"设置节点内心的圆圈半径, 默认为4px\",\n      \"option_node_outer_radius\": \"节点半径\",\n      \"option_node_outer_radius_desc\": \"设置节点外圈的半径起点值 ， 默认为7px\",\n      \"option_node_border_width\": \"节点边框宽度\",\n      \"option_node_border_width_desc\": \"设置节点边框宽度，从外圈半径开始往外扩展\",\n      \"option_node_border_color\": \"节点边框颜色\",\n      \"option_node_border_color_desc\": \"设置节点的边框颜色\",\n      \"option_node_inter_color\": \"节点填充颜色\",\n      \"option_node_inter_color_desc\": \"设置节点的填充颜色\",\n      \"option_style_line_color\": \"连线颜色\",\n      \"option_style_line_color_desc\": \"设置连线颜色\",\n      \"option_chart_show_orientation\": \"事件展示方向\",\n      \"option_chart_show_orientation_desc\": \"设置事件展示方向\",\n      \"option_chart_show_orientation_horizon\": \"横向\",\n      \"option_chart_show_orientation_vertical\": \"纵向\",\n      \"option_timeline_color\": \"时间线颜色\",\n      \"option_timeline_color_desc\": \"设置时间线条的颜色\",\n      \"option_timeline_gap\": \"时间线左右间隔\",\n      \"option_timeline_gap_desc\": \"设置时间线条的左右间隔\",\n      \"option_style_node_interval\": \"时间精度\",\n      \"option_style_node_interval_desc\": \"设置时间精度\",\n      \"option_node_interval_raw\": \"原始格式\",\n      \"option_node_interval_auto\": \"自动\",\n      \"option_node_interval_minute\": \"按分钟\",\n      \"option_node_interval_hour\": \"按小时\",\n      \"option_node_interval_day\": \"按天\",\n      \"option_node_interval_week\": \"按周\",\n      \"option_node_interval_month\": \"按月\",\n      \"option_node_interval_season\": \"按季度\",\n      \"option_node_interval_year\": \"按年\",\n      \"option_node_intermix_display\": \"交错显示\",\n      \"option_node_intermix_display_desc\": \"节点的位置相互交错\",\n      \"option_node_intermix_width\": \"交错深度\",\n      \"option_node_intermix_width_desc\": \"节点位置相互交错的深度\",\n      \"category_chart_time_bar\": \"动画配置\",\n      \"option_hide_time_bar\": \"显示动画轴\",\n      \"option_hide_time_bar_desc\": \"设置显示动画的时间轴 ， 默认显示\",\n      \"option_hide_time_label\": \"显示动画标签\",\n      \"option_hide_time_label_desc\": \"设置显示图形背景上的时间动画标签 ， 默认显示年份格式\",\n      \"option_time_label_position\": \"动画标签位置\",\n      \"option_time_label_position_desc\": \"设置图形背景上的时间标签位置 ，默认居中\",\n      \"option_time_label_position_top_right\": \"右上\",\n      \"option_time_label_position_top_left\": \"左上\",\n      \"option_time_label_position_bottom_right\": \"右下\",\n      \"option_time_label_position_bottom_left\": \"左下\",\n      \"option_time_label_position_bottom_center\": \"中心\",\n      \"option_time_label_font_size\": \"刻度字体大小\",\n      \"option_time_label_font_size_desc\": \"设置时间轴刻度的字体大小\",\n      \"option_time_label_font_color\": \"刻度字体颜色\",\n      \"option_time_label_font_color_desc\": \"设置时间轴刻度的字体颜色\",\n      \"option_timeline_show_event_time\": \"显示事件时间\",\n      \"option_timeline_show_event_time_desc\": \"打开后，时间轴显示事件的发生事件，而不显示时间线\",\n      \"option_time_label_format\": \"标签格式\",\n      \"option_time_label_format_desc\": \"时间标签格式\",\n      \"option_time_label_format_default\": \"默认\",\n      \"option_time_label_format_y\": \"YYYY\",\n      \"option_time_label_format_ym\": \"YYYY-MM\",\n      \"option_time_label_format_ymd\": \"YYYY-MM-DD\",\n      \"option_event_aggregation\": \"是否聚合时间\",\n      \"option_event_aggregation_desc\": \"是否按照事件的时间单位对时间及事件标题进行聚合\",\n      \"option_event_title_aggregation\": \"聚合相同事件\",\n      \"option_event_title_aggregation_desc\": \"在同一时间段内，是否聚合相同的事件\",\n      \"option_event_title_font_size\": \"字体大小\",\n      \"option_event_title_font_size_desc\": \"设置字体大小\",\n      \"option_event_title_color\": \"标题字体颜色\",\n      \"option_event_title_color_desc\": \"设置事件标题的字体颜色\",\n      \"option_event_desc_font_size\": \"描述字体大小\",\n      \"option_event_desc_font_size_desc\": \"设置事件描述的字体大小\",\n      \"option_event_desc_color\": \"描述字体颜色\",\n      \"option_event_desc_color_desc\": \"设置事件描述的字体颜色\",\n      \"option_label_text_position_outer\": \"居外\",\n      \"option_label_text_position_center\": \"居中\",\n      \"option_label_text_allow_overlap\": \"重叠\",\n      \"option_chart_config_restart\": \"恢复默认配置\",\n      \"category_time_label_1\": \"时间标签\",\n      \"option_time_label_regex\": \"输入时间标签\",\n      \"category_event_title_1\": \"事件\",\n      \"category_event_text_1\": \"事件内容\"\n    },\n    english: {\n      \"chart-name-title\": \"Time Event\",\n      \"chart-description-title\": \"At least one attribute column,one time column\",\n      \"chart-x-axis-title\": \"Event Title\",\n      \"chart-y-axis-title\": \"Event Description\",\n      // \"chart-legend-axis-title\": \"Legend\",\n      \"chart-time-title\": \"Time\",\n      \"chart-axis-config-null-error\": \"系统没有传入当前用户的Axis配置信息\",\n      \"chart-xy-axis-null\": \"Event or Time is required\",\n      \"chart-x-axis-too-much\": \"Only one event title is allowed \",\n      \"chart-row-axis-too-much\": \"Only one event description is allowed.\",\n      \"category_chart_general\": \"General\",\n      \"option_chart_color_theme\": \"Color theme\",\n      \"option_chart_custom_theme\": \"Custom theme\",\n      \"option_chart_custom_theme_desc\": \"Custom theme\",\n      \"option_label_text_regex_timeEvent_desc\": \"Text for data labels . <br/>The following substitution macros are available：<br/>%_NAME - Display the original text value  <br/>%_VALUE  - Display the original value <br/> %_COLUMN_N - value of column N <br />  %_BR - Newline character \",\n      \"category_chart_timeline\": \"Timeline\",\n      \"option_node_inter_radius\": \"Node inner radius\",\n      \"option_node_inter_radius_desc\": \"Set the ring inner radius of the node in time line , default is 4px\",\n      \"option_node_outer_radius\": \"Node outer radius\",\n      \"option_node_outer_radius_desc\": \"set the ring outer begin radius of the node in time line , default is 7px\",\n      \"option_node_border_width\": \"Node outer width\",\n      \"option_node_border_width_desc\": \"Set the ring outer width of the node in time line , from the outer radius \",\n      \"option_node_border_color\": \"Node outer color\",\n      \"option_node_border_color_desc\": \"Set the ring outer color of the node in time line\",\n      \"option_node_inter_color\": \"Node inner color\",\n      \"option_node_inter_color_desc\": \"Set the ring inner color of the node in time line\",\n      \"option_style_line_color\": \"Line color\",\n      \"option_style_line_color_desc\": \"Set the line color of the time line\",\n      \"option_chart_show_orientation\": \"Direction\",\n      \"option_chart_show_orientation_desc\": \"Set the direction of the time line , default is horizontal\",\n      \"option_chart_show_orientation_horizon\": \"Horizontal\",\n      \"option_chart_show_orientation_vertical\": \"Vertical\",\n      \"option_timeline_color\": \"Timeline color\",\n      \"option_timeline_color_desc\": \"Set the timeline color\",\n      \"option_timeline_gap\": \"Timeline gap\",\n      \"option_timeline_gap_desc\": \"Set the timeline gap between event time and event content\",\n      \"option_style_node_interval\": \"Event separate\",\n      \"option_style_node_interval_desc\": \"Set the separate distance of the node in time line\",\n      \"option_node_intermix_display\": \"Staggered display\",\n      \"option_node_intermix_display_desc\": \"Set the time line node display staggered\",\n      \"option_node_intermix_width\": \"Staggered depth\",\n      \"option_node_intermix_width_desc\": \"Sets the depth at which node positions are staggered\",\n      \"category_chart_time_bar\": \"Animation\",\n      \"option_hide_time_bar\": \"Show animation bar\",\n      \"option_hide_time_bar_desc\": \"Set the timeline for displaying animation, which is displayed by default\",\n      \"option_hide_time_label\": \"Show animation label\",\n      \"option_hide_time_label_desc\": \"Set the time animation label displayed on the chart background, and display the year format by default\",\n      \"option_time_label_position\": \"Label position\",\n      \"option_time_label_position_desc\": \"Set the position of the time label on the chart background, which is centered by default\",\n      \"option_time_label_position_top_right\": \"Upper right\",\n      \"option_time_label_position_top_left\": \"Upper left\",\n      \"option_time_label_position_bottom_right\": \"Lower right\",\n      \"option_time_label_position_bottom_left\": \"Lower left\",\n      \"option_time_label_position_bottom_center\": \"Center\",\n      \"option_time_label_font_size\": \"Label font size\",\n      \"option_time_label_font_size_desc\": \"Sets the font size of the timeline tick\",\n      \"option_time_label_format\": \"Time format\",\n      \"option_time_label_format_desc\": \"Set the format of the \",\n      \"option_time_label_format_default\": \"默认\",\n      \"option_time_label_format_y\": \"YYYY\",\n      \"option_time_label_format_ym\": \"YYYY-MM\",\n      \"option_time_label_format_ymd\": \"YYYY-MM-DD\",\n      \"option_play_model_first_auto\": \"One rotation\",\n      \"option_play_model_always_auto\": \"Loop\",\n      \"option_play_model_none_auto\": \"No auto rotation\",\n      \"option_event_aggregation\": \"Aggregate time\",\n      \"option_event_aggregation_desc\": \"Aggregate event titles and time according to the current time unit\",\n      \"option_event_title_aggregation\": \"Aggregate identical events\",\n      \"option_event_title_aggregation_desc\": \"Whether to aggregate identical events within the same time period\",\n      \"option_event_title_font_size\": \"Title Font size\",\n      \"option_event_title_font_size_desc\": \"Set the font size of the event title\",\n      \"option_event_title_color\": \"Title Font color\",\n      \"option_event_title_color_desc\": \"Set the font color of the event title\",\n      \"option_event_desc_font_size\": \"Detail Font size\",\n      \"option_event_desc_font_size_desc\": \"Set the font size of the event description\",\n      \"option_event_desc_color\": \"Description Font color\",\n      \"option_event_desc_color_desc\": \"Set the font color of the event description\",\n      \"option_label_text_position_outer\": \"Out\",\n      \"option_label_text_position_center\": \"Middle\",\n      \"option_label_text_allow_overlap\": \"Overlap\",\n      \"option_chart_config_restart\": \"Reset default\",\n      \"category_time_label_1\": \"Time content\",\n      \"option_time_label_regex\": \"Time label content\",\n      \"category_event_title_1\": \"Event title\",\n      \"category_event_text_1\": \"Event Content\"\n    }\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/timeEvent.js?");

/***/ })

}]);
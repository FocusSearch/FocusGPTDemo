(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[13],{

/***/ "../src-v5/assets/js/charts.components/ContainerComponent.js":
/*!*******************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/ContainerComponent.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// 画图形容器的组件\nlet ContainerComponent = {\n  /**\r\n   * 画图形的容器，只需要区分图例部分与图形部分[图形内部自己画X轴Y轴标题及图形]\r\n   * @param options\r\n   *          {\r\n   *              container           -   [ *必填项 ]画图容器DOM\r\n   *              legendPosition      -   图例位置[默认没有图例]  top / right / left / bottom\r\n   *              needCanvasFlag      -   是否需要canvas标签的标志\r\n   *          }\r\n   * @return 在container中插入图形区域 及 图例区域\r\n   *          {\r\n   *              svgContainer    -   包裹svg元素的div容器\r\n   *              svgJqDom        -   SVG的DOM元素\r\n   *              canvasJqDom     -   Canvas的DOM元素\r\n   *              legendContainer -   包裹图例的div容器\r\n   *          }\r\n   * */\n  drawCommonContainer: function (options) {\n    options = options || {};\n    if (!options.container) return false;\n    const getChartContent = container => {\n      const existedChartContent = container.querySelector('.chart-content');\n      if (existedChartContent) {\n        return existedChartContent;\n      }\n      const newChartContent = document.createElement('div');\n      newChartContent.classList.add('chart-content');\n      return newChartContent;\n    };\n    const getLegendContent = chartContent => {\n      const existedLegendContent = chartContent.querySelector('.legend-content');\n      if (options.legendPosition) {\n        if (existedLegendContent) return existedLegendContent;\n        const newLegendContent = document.createElement('div');\n        newLegendContent.classList.add('legend-content');\n        return newLegendContent;\n      } else {\n        if (existedLegendContent) existedLegendContent.remove();\n        return null;\n      }\n    };\n    const getSvgContent = chartContent => {\n      const existedSvgContent = chartContent.querySelector('.svg-content');\n      // 每次重新生成元素时，将临时回退元素清除\n      if (existedSvgContent) {\n        let theReturnDom = existedSvgContent.querySelector('.select-return-dom');\n        if (theReturnDom) theReturnDom.remove();\n        return existedSvgContent;\n      }\n      const newSvgContent = document.createElement('div');\n      newSvgContent.classList.add('svg-content');\n      return newSvgContent;\n    };\n    const getSvgDom = svgContent => {\n      const existedSvgDom = svgContent.querySelector('.svg-dom');\n      if (existedSvgDom) {\n        return existedSvgDom;\n      }\n      const newSvgDom = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      newSvgDom.classList.add('svg-dom');\n      return newSvgDom;\n    };\n    const getCanvasDom = svgContent => {\n      const existedCanvasDom = svgContent.querySelector('.canvas-dom');\n      if (options.needCanvasFlag) {\n        if (existedCanvasDom) return existedCanvasDom;\n        const newCanvasDom = document.createElement('canvas');\n        newCanvasDom.classList.add('canvas-dom');\n        return newCanvasDom;\n      } else {\n        if (existedCanvasDom) existedCanvasDom.remove();\n        return null;\n      }\n    };\n    const updateContainerLayout = (container, legendPosition) => {\n      const chartContent = getChartContent(container);\n      const legendContent = getLegendContent(chartContent);\n      const svgContent = getSvgContent(chartContent);\n      const svgDom = getSvgDom(svgContent);\n      const canvasDom = getCanvasDom(svgContent);\n      switch (legendPosition) {\n        case \"top\":\n          chartContent.style.cssText = 'display: flex;flex-direction: column;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:row;width:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height: 0;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        case \"bottom\":\n          chartContent.style.cssText = 'display: flex;flex-direction: column;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:row;width:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height: 0;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(svgContent);\n          chartContent.appendChild(legendContent);\n          break;\n        case \"right\":\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:column;height:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(svgContent);\n          chartContent.appendChild(legendContent);\n          break;\n        case \"left\":\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'height:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        case \"rightTop\":\n          // 图例在右上角\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'position:absolute;right:0;top:0;z-index:1;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        default:\n          // 无图例的部分\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          // legendContent.style.cssText = 'position:absolute;right:0;top:0;z-index:1;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n\n          // chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n      }\n\n      // 最后插入减少浏览器重绘\n      options.container.innerHTML = '';\n      options.container.appendChild(chartContent);\n      return {\n        chartContent,\n        legendContent,\n        svgContent,\n        svgDom,\n        canvasDom\n      };\n    };\n    const {\n      chartContent,\n      legendContent,\n      svgContent,\n      svgDom,\n      canvasDom\n    } = updateContainerLayout(options.container, options.legendPosition);\n    return {\n      chartContainer: chartContent,\n      svgContainer: svgContent,\n      svgJqDom: svgDom,\n      canvasJqDom: canvasDom,\n      legendContainer: legendContent\n    };\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ContainerComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/ContainerComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.senior/decompositionTree/systemDecompositionTreeChart.js":
/*!**************************************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/decompositionTree/systemDecompositionTreeChart.js ***!
  \**************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3v7Export.js */ \"../src-v5/assets/js/d3v7Export.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/ContainerComponent */ \"../src-v5/assets/js/charts.components/ContainerComponent.js\");\n/* harmony import */ var _translateDecompositionTreeData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./translateDecompositionTreeData */ \"../src-v5/assets/js/charts.system.senior/decompositionTree/translateDecompositionTreeData.js\");\n/**\r\n * 系统提供的分解树图\r\n * */\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n// 画图容器组件[ 主要区分svg部分与图例部分 ]\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  chartType: 'decompositionTree',\n  chartDisplayNameKey: \"chart_decompositionTree\",\n  chartDescriptionKey: \"chart_decompositionTree_tooltip\",\n  // [*必填项] 图轴配置元素 ( X轴 ，Y轴 )\n  needAxis: {\n    xAxis: {\n      i18nKey: \"chart_x_axis_title\"\n    },\n    yAxis: {\n      i18nKey: \"chart_y_axis_title\",\n      defaultYAxisNumber: 1\n    }\n  },\n  // 出图条件： 至少一个数值列\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    if (!searchResultStatistic) return false;\n    let satisfiedFlag = false;\n    const measureCount = searchResultStatistic.measureColumns && searchResultStatistic.measureColumns.length;\n    if (measureCount >= 1) {\n      satisfiedFlag = true;\n    }\n    return satisfiedFlag;\n  },\n  // 图轴配置规则： Y轴必须一个数值列，X轴不限制\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '';\n    if (!theAxisConfig) return chartErrorMsg;\n\n    // Y轴必须是四个数值列\n    if (theAxisConfig.yAxis && theAxisConfig.yAxis.length !== 1) {\n      chartErrorMsg = 'chart_axis_modify_y_only_one';\n      return chartErrorMsg;\n    }\n  },\n  // 画图方法\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    window.d3v7 = _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    const self = this,\n      container = options.container,\n      chartAxis = options.chartAxis,\n      currentChart = options.currentChart,\n      tableData = options.datas,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      getI18nKeyFunc = conf.curLanguage;\n    let chartConfigures = options.chartConfigures || {};\n\n    // 当前画图区域的缩放比例【会影响到获取字体高度的计算】\n    if (_DataFocusMethod.isPureNumber(chartConfigures._DF_SYS_TRANSFORM_SCALE)) {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].transformScale = chartConfigures._DF_SYS_TRANSFORM_SCALE;\n    }\n    container.innerHTML = '';\n    // 给图形初始化画图容器  SVG图形部分[ 使用d3.layout.tree树形布局 ]\n    let containerResult = _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].drawCommonContainer({\n      container: container\n    });\n    if (!containerResult.svgJqDom) return false;\n    if (!tableData.columns || !tableData.columns.length) {\n      console.log('当前图形没有合法的画图数据');\n      return false;\n    }\n\n    /**\r\n     * 先处理数据\r\n     * 1. 依据XY轴配置中Y轴获取根节点的值 ； 依据X轴获取可展开的属性列 ；\r\n     * 2. 依据chartConfigures图轴配置中展开列collapseAttributeList的配置值获取展开层级 并且 计算各个已展开的属性列的各个节点值\r\n     *      - 各个属性层级按照从高到低排序\r\n     * */\n    if (!chartAxis.curYAxis || !chartAxis.curYAxis[0]) return false;\n\n    // 开始布局画图 ， 节点宽度 ， 左右连接线宽度 ，上下节点距离，自适应画图区域（翻页)/不自适应（拖拽缩放） ， 渐变比例尺：根节点占比/父节点占比/当前层级最大值占比(默认)\n    // 不需要d3的树状布局，可以直接布局各个节点\n    let rectNodeWidth = parseInt(chartConfigures.rect_node_width) || 150,\n      //  节点宽度\n      rectNodeHeight = parseInt(chartConfigures.rect_node_height) || 12,\n      //  节点高度\n      rectVerticalDistance = parseInt(chartConfigures.rect_node_vertical_distance) || 20,\n      //   树上节点与节点的垂直间距\n      rectHorizontalDistance = parseInt(chartConfigures.rect_node_horizontal_distance) || 75; //   树上节点与节点的水平间距\n\n    let theSvgContainer = containerResult.svgJqDom,\n      svgDrawWidth = $(theSvgContainer).width(),\n      svgDrawHeight = $(theSvgContainer).height();\n    let theTreeHeaderRect = _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theSvgContainer).selectAll(\".decomposition-title-rect\");\n    if (!theTreeHeaderRect.node()) {\n      theTreeHeaderRect = _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theSvgContainer).append(\"rect\").attr(\"class\", \"decomposition-title-rect\").attr('width', svgDrawWidth).attr('height', 0).attr('transform', 'translate(0,0)');\n    }\n    let theTreeContainer = _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theSvgContainer).selectAll(\".treeContainer\");\n    if (!theTreeContainer.node()) {\n      theTreeContainer = _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theSvgContainer).append(\"g\").attr(\"class\", \"treeContainer\").attr('transform', 'translate(0,0)');\n    }\n\n    // 获取当前图形的配置颜色主题方法\n    let colorFunc = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateColorThemeConfigure(chartConfigures.chart_color_theme, {\n      chart_custom_theme: chartConfigures.chart_custom_theme\n    });\n    // 图形通用字体\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 12,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n      containerResult.svgJqDom.style.color = chartFontColor;\n      containerResult.svgJqDom.style.fill = chartFontColor;\n    } else {\n      container.style.color = '';\n      container.style.fill = '';\n      containerResult.svgJqDom.style.color = '';\n      containerResult.svgJqDom.style.fill = '';\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n\n    // 标签 及 数值的文字配置\n    let labelFontSize = chartConfigures.label_font_size_label && parseInt(chartConfigures.label_font_size_label.fontSize) || chartFontSize || 12,\n      labelFontColor = chartConfigures.label_font_size_label && chartConfigures.label_font_size_label.fontColor,\n      labelFontBold = chartConfigures.label_font_size_label && chartConfigures.label_font_size_label.fontBold,\n      labelFontItalic = chartConfigures.label_font_size_label && chartConfigures.label_font_size_label.fontItalic;\n    let valueFontSize = chartConfigures.value_font_size_label && parseInt(chartConfigures.value_font_size_label.fontSize) || chartFontSize || 12,\n      valueFontColor = chartConfigures.value_font_size_label && chartConfigures.value_font_size_label.fontColor,\n      valueFontBold = chartConfigures.value_font_size_label && chartConfigures.value_font_size_label.fontBold,\n      valueFontItalic = chartConfigures.value_font_size_label && chartConfigures.value_font_size_label.fontItalic;\n    let theValueTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', 'KKKK', {\n        fontSize: valueFontSize\n      }),\n      theLabelTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', 'KKKK', {\n        fontSize: labelFontSize\n      });\n    let theNodeDomHeight = rectNodeHeight + theValueTextSize.height + theLabelTextSize.height + 5;\n    // 节点的背景， 正数颜色 ， 负数颜色\n    let theNodeRectBackground = chartConfigures.rect_node_background || 'rgb(230, 230, 230)',\n      thePositiveNodeRectColor = chartConfigures.rect_node_positive_color || colorFunc(0),\n      theNegativeNodeRectColor = chartConfigures.rect_node_negative_color || colorFunc(1);\n    // 连接线的颜色，未选中的连线颜色 ， 选中的连线颜色\n    let theConnectPathDefaultColor = chartConfigures.connect_path_default_color || 'rgb(230, 230, 230)',\n      theConnectPathSelectedColor = chartConfigures.connect_path_selected_color || colorFunc(2);\n    // 动画时间\n    let animateDuration = 1000;\n    let levelPageInfoList = []; //  每个层级的分页情况\n    let cachedTranslateData; //  缓存的解析的各个层级数据\n\n    // 使用数据画树状图\n    currentChart.drawDecompTreeData = function ({\n      decompTreeNodeList,\n      decompTreeLinkList,\n      decmopAssistDomList,\n      highLightNodeList,\n      highLightLink\n    }) {\n      // 开始画所有节点 并 更新\n      theTreeContainer.selectAll(\"g.level-node-item\").data(decompTreeNodeList, function (d) {\n        return d.id;\n      }).join(function (enter) {\n        let theNodeItemContainer = enter.append(\"g\").attr('data-id', function (d) {\n          return d.id;\n        }).attr(\"class\", \"level-node-item\").attr(\"transform\", function (d, i) {\n          return \"translate(\" + d.x + \" , \" + d.y + \")\";\n        }).style('cursor', 'pointer').on(\"click\", function (event, d) {\n          console.log('click node ');\n          _DataFocusMethod.stopEventDefault(event);\n          if (!chartConfigures.collapseAttributeList) chartConfigures.collapseAttributeList = [];\n          let theMatchedConfigIndex = -1,\n            theMatchedConfig = chartConfigures.collapseAttributeList.find(function (theConfig, index) {\n              if (theConfig.idx + '' === d.idx + '') {\n                theMatchedConfigIndex = index;\n                return true;\n              }\n            });\n          let theNextConfig = chartConfigures.collapseAttributeList[theMatchedConfigIndex + 1];\n          // 如果当前节点的下一个节点有展开列, 则切换当前的展开节点 且 需要重新计算数据\n          if (theMatchedConfig && theNextConfig && theMatchedConfig.collapseFilter !== d.name) {\n            theMatchedConfig.collapseFilter = d.name;\n            // 修改图形配置\n            currentChart.requireSetConfig({\n              key: \"collapseAttributeList\",\n              value: chartConfigures.collapseAttributeList,\n              disableRedraw: true\n            });\n            // 切换层级节点时，需要带前面层级的分页信息，后面层级的分页信息清空\n\n            currentChart.translateDecompTreeData(levelPageInfoList && levelPageInfoList.filter(function (level, index) {\n              return index <= d.levelIndex;\n            }));\n          }\n          // 如果点击了当前节点,则需要将他所在的线上的所有节点高亮,其他节点置灰一点\n          else if (theMatchedConfig && theMatchedConfig.collapseFilter !== d.name) {\n            // 将当前节点及上级节点高亮 及 当前节点前的连接线高亮[ 最多找1000下 ]\n            let theNodeList = [d],\n              theNode = d,\n              i = 1000;\n            while (theNode && i > 0) {\n              let theParentFilter = theNode.parentFilter,\n                theParentIdx = theNode.parentIdx;\n              if (theParentIdx > 0) {\n                // 展开的节点,只有一个\n                theNode = decompTreeNodeList.find(function (node) {\n                  return node.idx + '' === theParentIdx + '' && theParentFilter === node.name;\n                });\n              } else if (theParentIdx === 0) {\n                // 根节点只有一个\n                theNode = decompTreeNodeList.find(function (node) {\n                  return node.idx + '' === theParentIdx + '';\n                });\n              } else {\n                theNode = null;\n              }\n              if (theNode) theNodeList.push(theNode);\n              i--;\n            }\n            currentChart.drawDecompTreeData({\n              decompTreeNodeList,\n              decompTreeLinkList,\n              decmopAssistDomList,\n              highLightNodeList: theNodeList,\n              highLightLink: decompTreeLinkList && decompTreeLinkList.find(function (link) {\n                return link.nodeId === d.id;\n              })\n            });\n          }\n        })\n        // 鼠标移入显示悬浮文本\n        .on(\"mouseover\", function (event, d) {\n          let theTranslateSuspendText;\n          if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n            let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n            if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_CATEGORY_NAME: %_NAME %_BR  %_VALUE_NAME : %_VALUE\";\n            let theDataLevel = cachedTranslateData && cachedTranslateData.find(function (dataLevel) {\n              return dataLevel.idx + '' === d.idx + '';\n            });\n            let theTotalDataLevel = cachedTranslateData && cachedTranslateData[0];\n            let theLabelIndex = -1,\n              theLabelTotal = 0,\n              theLabelNumber = 0;\n            if (theDataLevel && theDataLevel.dataList) {\n              theDataLevel.dataList.forEach(function (data, index) {\n                theLabelTotal += data.value;\n                if (data.name === d.name) {\n                  theLabelIndex = index;\n                }\n              });\n              theLabelNumber = theDataLevel.dataList.length;\n            }\n            let theXAxis = chartAxis.curXAxis && chartAxis.curXAxis.find(function (axis) {\n                return axis.idx + '' === d.idx + '';\n              }),\n              theYAxis = chartAxis.curYAxis && chartAxis.curYAxis[0];\n            theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n              xAxis: theXAxis || theYAxis,\n              xLabel: d.translateName || d.name,\n              xLabelIndex: theLabelIndex,\n              //  从dataList中获取\n              xLabelTotal: theLabelTotal,\n              //  从dataList中获取\n              xLabelNumber: theLabelNumber,\n              //  从dataList中获取\n              yValue: d.value,\n              yAxis: theYAxis,\n              legendTotal: theTotalDataLevel && theTotalDataLevel.max,\n              //  从根节点获取\n              headers: tableData.headers,\n              rowData: d.rowData\n            });\n          }\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(event, theTranslateSuspendText || d.name + ':' + d.value);\n        })\n        // 鼠标移出隐藏悬浮文本\n        .on('mouseout', function (event, d) {\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n        });\n        // 矩形进度条\n        theNodeItemContainer.append(\"rect\").attr(\"class\", \"level-node-rect-background\").attr('width', rectNodeWidth).attr('height', rectNodeHeight).style('fill', theNodeRectBackground);\n        let theActiveRect = theNodeItemContainer.append(\"rect\").attr(\"class\", \"level-node-rect-active\").attr('width', 0).attr('height', rectNodeHeight).style('fill', function (d) {\n          if (d.value >= 0) return thePositiveNodeRectColor;else return theNegativeNodeRectColor;\n        }).attr(\"transform\", function (d) {\n          if (d.rangeMin >= 0) {\n            // 如果都是正数区间则不需要偏移\n          } else {\n            // 正数往右偏移一半\n            if (d.value >= 0) {\n              return \"translate(\" + rectNodeWidth * (1 - d.minusPercentage) + \" , 0)\";\n            } else {\n              return \"translate(\" + rectNodeWidth * d.minusPercentage * (1 - Math.min(1, (0 - d.value) / (0 - d.rangeMin || 1))) + \" , 0)\";\n            }\n          }\n        });\n        theActiveRect.transition().duration(animateDuration).attr('width', function (d) {\n          if (d.rangeMin >= 0) {\n            // 正数区间[ 如果只有一个值的情况下，直接100% ]\n            if (d.value >= 0) return Math.min(1, d.value >= d.rangeMax ? 1 : Math.max(0, (d.value - d.rangeMin) / (d.rangeMax - d.rangeMin || 1))) * rectNodeWidth;else return 0;\n          } else {\n            // 有负数区间的情况下需要分两半\n            if (d.value >= 0) {\n              return Math.min(1, d.value / d.rangeMax) * rectNodeWidth * d.minusPercentage;\n            } else {\n              return Math.min(1, (0 - d.value) / (0 - d.rangeMin || 1)) * rectNodeWidth * d.minusPercentage;\n            }\n          }\n        });\n        // 如果当前区间是负数，则需要增加分割线\n        theNodeItemContainer.filter(function (d) {\n          return d.hasMinusFlag;\n        }).append(\"rect\").attr(\"class\", \"level-node-rect-separate\").attr('width', 1).attr('height', rectNodeHeight + 4).style('fill', \"#000\").attr(\"transform\", function (d) {\n          return \"translate(\" + d.minusPercentage * rectNodeWidth + \" , -2)\";\n        });\n        // 添加标签文本\n        theNodeItemContainer.append(\"text\").attr(\"class\", \"level-node-text level-node-text-label\").attr('transform', \"translate(0 , \" + (rectNodeHeight + 5) + \")\").style('font-size', labelFontSize).style('fill', labelFontColor !== 'undefined' ? labelFontColor : 'inherit').style('font-weight', labelFontBold !== 'undefined' ? labelFontBold ? 'bold' : 'normal' : 'inherit').style('font-style', labelFontItalic !== 'undefined' ? labelFontItalic ? 'italic' : 'normal' : 'inherit').style(\"dominant-baseline\", \"text-before-edge\").text(function (d) {\n          let theText = d.name === null ? 'Null' : d.translateName || d.name,\n            baseTextWidth = rectNodeWidth;\n          let theTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theText, {\n            fontSize: labelFontSize\n          });\n          if (theTextSize.width > baseTextWidth) {\n            let theSubText = '';\n            for (let i = 0; i < theText.length; i++) {\n              let chart = theText.charAt(i);\n              theSubText += chart;\n              let theSubTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theSubText, {\n                fontSize: labelFontSize\n              });\n              if (theSubTextSize.width > baseTextWidth) {\n                break;\n              }\n            }\n            if (theSubText.length === theText.length) {\n              return theText;\n            } else {\n              return theSubText + '..';\n            }\n          }\n          return theText;\n        }).append(\"title\").text(function (d) {\n          return d.translateName || d.name;\n        });\n        // 添加数值文本\n        theNodeItemContainer.append(\"text\").attr(\"class\", \"level-node-text level-node-text-value\").attr('transform', \"translate(0 , \" + (rectNodeHeight + 5 + theLabelTextSize.height) + \")\").style('font-size', valueFontSize).style('fill', valueFontColor !== 'undefined' ? valueFontColor : 'inherit').style('font-weight', valueFontBold !== 'undefined' ? valueFontBold ? 'bold' : 'normal' : 'inherit').style('font-style', valueFontItalic !== 'undefined' ? valueFontItalic ? 'italic' : 'normal' : 'inherit').style(\"dominant-baseline\", \"text-before-edge\").text(function (d) {\n          let theText = _DataFocusMethod.formatData(d.value, chartAxis.curYAxis[0]),\n            baseTextWidth = rectNodeWidth;\n          let theTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theText, {\n            fontSize: valueFontSize\n          });\n          if (theTextSize.width > baseTextWidth) {\n            let theSubText = '';\n            for (let i = 0; i < theText.length; i++) {\n              let chart = theText.charAt(i);\n              theSubText += chart;\n              let theSubTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theSubText, {\n                fontSize: valueFontSize\n              });\n              if (theSubTextSize.width > baseTextWidth) {\n                break;\n              }\n            }\n            if (theSubText.length === theText.length) {\n              return theText;\n            } else {\n              return theSubText + '..';\n            }\n          }\n          return theText;\n        }).append(\"title\").text(function (d) {\n          return _DataFocusMethod.formatData(d.value, chartAxis.curYAxis[0]);\n        });\n        // 结点背景\n        theNodeItemContainer.append(\"rect\").attr(\"class\", \"level-node-container\").attr('width', rectNodeWidth).attr('height', theNodeDomHeight).style('fill', '#fff').style('opacity', '0');\n        // 如果后面有可以解析的列，则增加加号\n        theNodeItemContainer.append(\"text\").attr(\"class\", \"title-add-button\").style('display', function (d) {\n          return d.needCollapseFlag ? 'block' : 'none';\n        }).style(\"color\", 'rgb(179, 176, 173)').style(\"line-height\", rectNodeHeight).attr('transform', \"translate(\" + (rectNodeWidth + 5) + \" , \" + rectNodeHeight / 2 + \")\").style(\"dominant-baseline\", \"middle\").style('cursor', 'pointer').on(\"click\", function (event, d) {\n          _DataFocusMethod.stopEventDefault(event);\n\n          // 获取还没被展开的分解属性列\n          let unCollapsedColumn = [];\n          chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n            let theMatchedLevel = chartConfigures.collapseAttributeList && chartConfigures.collapseAttributeList.find(function (theConfig) {\n              return theConfig.idx + '' === xAxis.idx + '';\n            });\n            if (!theMatchedLevel) {\n              unCollapsedColumn.push({\n                idx: xAxis.idx,\n                name: xAxis.displayName || xAxis.col_name\n              });\n            }\n          });\n          let theCollapseDiv = document.getElementById(\"decomposition-tree-collapse-container\");\n          if (unCollapsedColumn && unCollapsedColumn.length) {\n            if (!theCollapseDiv) {\n              theCollapseDiv = document.createElement(\"div\");\n              theCollapseDiv.id = 'decomposition-tree-collapse-container';\n            } else {\n              theCollapseDiv.innerHTML = '';\n            }\n            theCollapseDiv.style.position = 'fixed';\n            theCollapseDiv.style.zIndex = '9999';\n            theCollapseDiv.style.background = '#fff';\n            theCollapseDiv.style.boxShadow = '0 0 10px 0 #ddd';\n            theCollapseDiv.style.left = event.clientX + 5 + 'px';\n            theCollapseDiv.style.top = event.clientY + 5 + 'px';\n            theCollapseDiv.style.minWidth = '100px';\n            unCollapsedColumn.forEach(function (theColumn) {\n              let theItem = document.createElement(\"div\");\n              theItem.style.lineHeight = '25px';\n              theItem.style.padding = '0 8px';\n              theItem.style.className = 'text-clip';\n              theItem.style.cursor = 'pointer';\n              theItem.dataset.idx = theColumn.idx;\n              theItem.innerText = theColumn.name;\n\n              // 鼠标移入，背景变色 ; 移出恢复无背景\n              theItem.onmouseover = function (e) {\n                e.target.style.background = '#eee';\n              };\n              theItem.onmouseout = function (e) {\n                e.target.style.background = '';\n              };\n              // 鼠标点击后，触发展开数据重画图的行为\n              theItem.onclick = function () {\n                if (!chartConfigures.collapseAttributeList) chartConfigures.collapseAttributeList = [];\n                chartConfigures.collapseAttributeList = chartConfigures.collapseAttributeList.filter(function (theConfig) {\n                  return theConfig.idx !== theColumn.idx;\n                });\n\n                // 修改父节点的展开列\n                let prevAttributeItem = chartConfigures.collapseAttributeList[chartConfigures.collapseAttributeList.length - 1];\n                if (prevAttributeItem) {\n                  prevAttributeItem.collapseFilter = d.name;\n                }\n                chartConfigures.collapseAttributeList.push({\n                  idx: theColumn.idx,\n                  type: d.type === 'attribute' ? 'filter' : 'collapse',\n                  collapseFilter: undefined\n                });\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"collapseAttributeList\",\n                  value: chartConfigures.collapseAttributeList,\n                  disableRedraw: true\n                });\n                document.getElementById(\"decomposition-tree-collapse-container\").remove();\n                // 展开列时需要带上分页信息\n                console.log(JSON.stringify(chartConfigures.collapseAttributeList));\n                currentChart.translateDecompTreeData(levelPageInfoList);\n              };\n              theCollapseDiv.appendChild(theItem);\n            });\n            document.body.appendChild(theCollapseDiv);\n          } else {\n            theCollapseDiv && theCollapseDiv.remove();\n          }\n          $(document).one(\"click\", function () {\n            let theDom = document.getElementById(\"decomposition-tree-collapse-container\");\n            theDom && theDom.remove();\n          });\n        }).text('+');\n      }, function (update) {\n        // 修改节点位置\n        update.attr(\"transform\", function (d, i) {\n          return \"translate(\" + d.x + \" , \" + d.y + \")\";\n        }).on(\"click\", function (event, d) {\n          console.log('click node ');\n          _DataFocusMethod.stopEventDefault(event);\n          if (!chartConfigures.collapseAttributeList) chartConfigures.collapseAttributeList = [];\n          let theMatchedConfigIndex = -1,\n            theMatchedConfig = chartConfigures.collapseAttributeList.find(function (theConfig, index) {\n              if (theConfig.idx + '' === d.idx + '') {\n                theMatchedConfigIndex = index;\n                return true;\n              }\n            });\n          let theNextConfig = chartConfigures.collapseAttributeList[theMatchedConfigIndex + 1];\n          // 如果当前节点的下一个节点有展开列, 则切换当前的展开节点 且 需要重新计算数据\n          if (theMatchedConfig && theNextConfig && theMatchedConfig.collapseFilter !== d.name) {\n            theMatchedConfig.collapseFilter = d.name;\n            // 修改图形配置\n            currentChart.requireSetConfig({\n              key: \"collapseAttributeList\",\n              value: chartConfigures.collapseAttributeList,\n              disableRedraw: true\n            });\n            // 切换层级节点时，需要带前面层级的分页信息，后面层级的分页信息清空\n\n            currentChart.translateDecompTreeData(levelPageInfoList && levelPageInfoList.filter(function (level, index) {\n              return index <= d.levelIndex;\n            }));\n          }\n          // 如果点击了当前节点,则需要将他所在的线上的所有节点高亮,其他节点置灰一点\n          else if (theMatchedConfig && theMatchedConfig.collapseFilter !== d.name) {\n            // 将当前节点及上级节点高亮 及 当前节点前的连接线高亮[ 最多找1000下 ]\n            let theNodeList = [d],\n              theNode = d,\n              i = 1000;\n            while (theNode && i > 0) {\n              let theParentFilter = theNode.parentFilter,\n                theParentIdx = theNode.parentIdx;\n              if (theParentIdx > 0) {\n                // 展开的节点,只有一个\n                theNode = decompTreeNodeList.find(function (node) {\n                  return node.idx + '' === theParentIdx + '' && theParentFilter === node.name;\n                });\n              } else if (theParentIdx === 0) {\n                // 根节点只有一个\n                theNode = decompTreeNodeList.find(function (node) {\n                  return node.idx + '' === theParentIdx + '';\n                });\n              } else {\n                theNode = null;\n              }\n              if (theNode) theNodeList.push(theNode);\n              i--;\n            }\n            currentChart.drawDecompTreeData({\n              decompTreeNodeList,\n              decompTreeLinkList,\n              decmopAssistDomList,\n              highLightNodeList: theNodeList,\n              highLightLink: decompTreeLinkList && decompTreeLinkList.find(function (link) {\n                return link.nodeId === d.id;\n              })\n            });\n          }\n        });\n        // 修改矩形进度条背景\n        update.selectAll(\"rect.level-node-rect-background\").attr('width', rectNodeWidth).attr('height', rectNodeHeight).style('fill', theNodeRectBackground);\n        // 修改矩形进度条active\n        update.selectAll(\"rect.level-node-rect-active\").attr('height', rectNodeHeight).attr('width', function (d) {\n          if (d.rangeMin >= 0) {\n            // 正数区间[ 如果只有一个值的情况下，直接100% ]\n            if (d.value >= 0) return Math.min(1, d.value >= d.rangeMax ? 1 : Math.max(0, (d.value - d.rangeMin) / (d.rangeMax - d.rangeMin || 1))) * rectNodeWidth;else return 0;\n          } else {\n            // 有负数区间的情况下需要分两半\n            if (d.value >= 0) {\n              return Math.min(1, d.value / d.rangeMax) * rectNodeWidth * d.minusPercentage;\n            } else {\n              return Math.min(1, (0 - d.value) / (0 - d.rangeMin || 1)) * rectNodeWidth * d.minusPercentage;\n            }\n          }\n        }).style('fill', function (d) {\n          if (d.value >= 0) return thePositiveNodeRectColor;else return theNegativeNodeRectColor;\n        });\n        // 修改负数分割线\n        update.selectAll(\"rect.level-node-rect-separate\").attr('height', rectNodeHeight + 4).attr(\"transform\", function (d) {\n          return \"translate(\" + d.minusPercentage * rectNodeWidth + \" , -2)\";\n        });\n        // 修改文本标签\n        update.selectAll(\".level-node-text-label\").attr('transform', \"translate(0 , \" + (rectNodeHeight + 5) + \")\").style('font-size', labelFontSize).style('fill', labelFontColor !== 'undefined' ? labelFontColor : 'inherit').style('font-weight', labelFontBold !== 'undefined' ? labelFontBold ? 'bold' : 'normal' : 'inherit').style('font-style', labelFontItalic !== 'undefined' ? labelFontItalic ? 'italic' : 'normal' : 'inherit');\n        // 修改数字标签\n        update.selectAll(\".level-node-text-value\").attr('transform', \"translate(0 , \" + (rectNodeHeight + 5 + theLabelTextSize.height) + \")\").style('font-size', valueFontSize).style('fill', valueFontColor !== 'undefined' ? valueFontColor : 'inherit').style('font-weight', valueFontBold !== 'undefined' ? valueFontBold ? 'bold' : 'normal' : 'inherit').style('font-style', valueFontItalic !== 'undefined' ? valueFontItalic ? 'italic' : 'normal' : 'inherit');\n        // 修改节点区域背景\n        update.selectAll(\"rect.level-node-container\").attr('width', rectNodeWidth).attr('height', theNodeDomHeight);\n        // 如果需要高亮节点,则需要高亮\n        if (highLightNodeList && highLightNodeList.length) {\n          let theHighNodeIdObj = {};\n          highLightNodeList.forEach(function (node) {\n            theHighNodeIdObj[node.id] = true;\n          });\n          update.selectAll(\"rect.level-node-container\").style('opacity', function (d) {\n            if (theHighNodeIdObj[d.id]) return 0;else return 0.4;\n          });\n        } else {\n          update.selectAll(\"rect.level-node-container\").style('opacity', 0);\n        }\n        // 修改下的加号需要更新显示隐藏\n        update.select(\".title-add-button\").style(\"line-height\", rectNodeHeight).attr('transform', \"translate(\" + (rectNodeWidth + 5) + \" , \" + rectNodeHeight / 2 + \")\").style('display', function (d) {\n          return d.needCollapseFlag ? 'block' : 'none';\n        }).on(\"click\", function (event, d) {\n          _DataFocusMethod.stopEventDefault(event);\n\n          // 获取还没被展开的分解属性列\n          let unCollapsedColumn = [];\n          chartAxis.curXAxis && chartAxis.curXAxis.forEach(function (xAxis) {\n            let theMatchedLevel = chartConfigures.collapseAttributeList && chartConfigures.collapseAttributeList.find(function (theConfig) {\n              return theConfig.idx + '' === xAxis.idx + '';\n            });\n            if (!theMatchedLevel) {\n              unCollapsedColumn.push({\n                idx: xAxis.idx,\n                name: xAxis.displayName || xAxis.col_name\n              });\n            }\n          });\n          let theCollapseDiv = document.getElementById(\"decomposition-tree-collapse-container\");\n          if (unCollapsedColumn && unCollapsedColumn.length) {\n            if (!theCollapseDiv) {\n              theCollapseDiv = document.createElement(\"div\");\n              theCollapseDiv.id = 'decomposition-tree-collapse-container';\n            } else {\n              theCollapseDiv.innerHTML = '';\n            }\n            theCollapseDiv.style.position = 'fixed';\n            theCollapseDiv.style.zIndex = '9999';\n            theCollapseDiv.style.background = '#fff';\n            theCollapseDiv.style.boxShadow = '0 0 10px 0 #ddd';\n            theCollapseDiv.style.left = event.clientX + 5 + 'px';\n            theCollapseDiv.style.top = event.clientY + 5 + 'px';\n            theCollapseDiv.style.minWidth = '100px';\n            unCollapsedColumn.forEach(function (theColumn) {\n              let theItem = document.createElement(\"div\");\n              theItem.style.lineHeight = '25px';\n              theItem.style.padding = '0 8px';\n              theItem.style.className = 'text-clip';\n              theItem.style.cursor = 'pointer';\n              theItem.dataset.idx = theColumn.idx;\n              theItem.innerText = theColumn.name;\n\n              // 鼠标移入，背景变色 ; 移出恢复无背景\n              theItem.onmouseover = function (e) {\n                e.target.style.background = '#eee';\n              };\n              theItem.onmouseout = function (e) {\n                e.target.style.background = '';\n              };\n              // 鼠标点击后，触发展开数据重画图的行为\n              theItem.onclick = function () {\n                if (!chartConfigures.collapseAttributeList) chartConfigures.collapseAttributeList = [];\n                chartConfigures.collapseAttributeList = chartConfigures.collapseAttributeList.filter(function (theConfig) {\n                  return theConfig.idx !== theColumn.idx;\n                });\n\n                // 修改父节点的展开列\n                let prevAttributeItem = chartConfigures.collapseAttributeList[chartConfigures.collapseAttributeList.length - 1];\n                if (prevAttributeItem) {\n                  prevAttributeItem.collapseFilter = d.name;\n                }\n                chartConfigures.collapseAttributeList.push({\n                  idx: theColumn.idx,\n                  type: d.type === 'attribute' ? 'filter' : 'collapse',\n                  collapseFilter: undefined\n                });\n                // 修改图形配置\n                currentChart.requireSetConfig({\n                  key: \"collapseAttributeList\",\n                  value: chartConfigures.collapseAttributeList,\n                  disableRedraw: true\n                });\n                document.getElementById(\"decomposition-tree-collapse-container\").remove();\n                // 展开列时需要带上分页信息\n                console.log(JSON.stringify(chartConfigures.collapseAttributeList));\n                currentChart.translateDecompTreeData(levelPageInfoList);\n              };\n              theCollapseDiv.appendChild(theItem);\n            });\n            document.body.appendChild(theCollapseDiv);\n          } else {\n            theCollapseDiv && theCollapseDiv.remove();\n          }\n          $(document).one(\"click\", function () {\n            let theDom = document.getElementById(\"decomposition-tree-collapse-container\");\n            theDom && theDom.remove();\n          });\n        });\n      }, function (exit) {\n        exit.remove();\n      });\n\n      // 如果有上一个展开的节点，则需要画连接线\n      let pathFunc = _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].linkHorizontal().x(function (d) {\n        return d.x;\n      }).y(function (d) {\n        return d.y;\n      });\n      theTreeContainer.selectAll(\"path.level-link-item\").data(decompTreeLinkList, function (d) {\n        return d.id;\n      }).join(function (enter) {\n        enter.append(\"path\").attr('data-id', function (d) {\n          return d.id;\n        }).attr(\"class\", \"level-link-item\").attr('stroke', function (d) {\n          return d.currentFlag ? theConnectPathSelectedColor : theConnectPathDefaultColor;\n        }).attr('fill', \"none\").attr('opacity', function (d) {\n          return d.currentFlag ? 1 : 0.8;\n        }).attr('stroke-width', '1px').attr('d', function (d, i) {\n          // 当前节点的XY原点是 theStartLeft + index * (rectNodeWidth + rectHorizontalDistance ， theDomListOffsetTop + (theNodeDomHeight + rectVerticalDistance) * i\n          let source = {\n            x: d.x0,\n            y: d.y0\n          };\n          let target = {\n            x: d.x,\n            y: d.y\n          };\n          return pathFunc({\n            source: source,\n            target: target\n          });\n        });\n      }, function (update) {\n        // 修改连接线的颜色及位置\n        update.attr('stroke', function (d) {\n          let theHighFlag = highLightLink && highLightLink.id === d.id;\n          return d.currentFlag || theHighFlag ? theConnectPathSelectedColor : theConnectPathDefaultColor;\n        }).attr('opacity', function (d) {\n          let theHighFlag = highLightLink && highLightLink.id === d.id;\n          return d.currentFlag || theHighFlag ? 1 : 0.8;\n        }).attr('d', function (d, i) {\n          // 当前节点的XY原点是 theStartLeft + index * (rectNodeWidth + rectHorizontalDistance ， theDomListOffsetTop + (theNodeDomHeight + rectVerticalDistance) * i\n          let source = {\n            x: d.x0,\n            y: d.y0\n          };\n          let target = {\n            x: d.x,\n            y: d.y\n          };\n          return pathFunc({\n            source: source,\n            target: target\n          });\n        });\n      }, function (exit) {\n        exit.remove();\n      });\n\n      // 辅助按钮： 翻页 / ...\n      theTreeContainer.selectAll(\"g.level-assist-item\").data(decmopAssistDomList, function (d) {\n        return d.id;\n      }).join(function (enter) {\n        let theDom = enter.append(\"g\").attr('data-id', function (d) {\n          return d.id;\n        }).attr(\"class\", function (d) {\n          return \"level-assist-item \" + d.type;\n        }).style('color', \"rgb(179, 176, 173)\").style('stroke', \"rgb(179, 176, 173)\").style('font-size', \"14px\").style('line-height', \"20\").style('cursor', \"pointer\").attr('transform', function (d) {\n          return 'translate(' + d.x + ' , ' + d.y + ')';\n        }).on(\"click\", function (event, d) {\n          // 处理分页的数据 , 需要将每个数据列的分页数据记录并更新，交由translateDecompTreeData获取数据并定位\n          if (['prevPage', 'nextPage'].indexOf(d.type) > -1) {\n            let theMatchedPageInfo = levelPageInfoList && levelPageInfoList.find(function (pageInfo) {\n              return pageInfo.idx + '' === d.idx + '';\n            });\n            if (!theMatchedPageInfo) return false;\n            // 往前翻页\n            if (d.type === 'prevPage') {\n              theMatchedPageInfo.prevStart = theMatchedPageInfo.start;\n              theMatchedPageInfo.prevEnd = theMatchedPageInfo.end;\n              theMatchedPageInfo.end = theMatchedPageInfo.start;\n              theMatchedPageInfo.start = theMatchedPageInfo.end - theMatchedPageInfo.pageSize;\n            } else if (d.type === 'nextPage') {\n              theMatchedPageInfo.prevStart = theMatchedPageInfo.start;\n              theMatchedPageInfo.prevEnd = theMatchedPageInfo.end;\n              theMatchedPageInfo.start = theMatchedPageInfo.end;\n              theMatchedPageInfo.end = theMatchedPageInfo.start + theMatchedPageInfo.pageSize;\n            }\n            theMatchedPageInfo.start = Math.max(0, theMatchedPageInfo.start);\n            // 依据最新翻页信息画图\n            currentChart.translateDecompTreeData(levelPageInfoList);\n          }\n        });\n        // 翻页元素使用rect 及 path\n        let thePageDom = theDom.filter(function (d) {\n          return ['prevPage', 'nextPage'].indexOf(d.type) > -1;\n        });\n        thePageDom.append('rect').attr('width', rectNodeWidth).attr('height', 20).attr('fill', '#ddd').style('opacity', '0').attr(\"transform\", function (d) {\n          if (d.type === 'prevPage') {\n            return 'translate(0, -20)';\n          }\n        });\n        thePageDom.append('path').attr('d', function (d) {\n          if (d.type === 'nextPage') {\n            return 'M0 0L7 6 L14 0';\n          } else {\n            return 'M0 0L7 -6 L14 0';\n          }\n        }).attr('transform', function (d) {\n          if (d.type === 'nextPage') {\n            return 'translate(' + (rectNodeWidth / 2 - 7) + ' , 8)';\n          } else {\n            return 'translate(' + (rectNodeWidth / 2 - 7) + ' , -8)';\n          }\n        }).style('stroke', 'inherit').style('stroke-width', '2px').style('fill', 'none');\n        // 非翻页元素使用text\n        theDom.filter(function (d) {\n          return ['prevPage', 'nextPage'].indexOf(d.type) === -1;\n        }).append(\"text\").attr('transform', function (d) {\n          let theTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', d.text, {\n            fontSize: 14\n          });\n          return \"translate(\" + (rectNodeWidth / 2 - theTextSize.width / 2) + \" , \" + -theTextSize.height / 2 + \")\";\n        }).text(function (d) {\n          return d.text;\n        });\n      }, function (update) {\n        // 修改辅助节点的位置\n        update.attr('transform', function (d) {\n          return 'translate(' + d.x + ' , ' + d.y + ')';\n        }).on(\"click\", function (event, d) {\n          // 处理分页的数据 , 需要将每个数据列的分页数据记录并更新，交由translateDecompTreeData获取数据并定位\n          if (['prevPage', 'nextPage'].indexOf(d.type) > -1) {\n            let theMatchedPageInfo = levelPageInfoList && levelPageInfoList.find(function (pageInfo) {\n              return pageInfo.idx + '' === d.idx + '';\n            });\n            if (!theMatchedPageInfo) return false;\n            // 往前翻页\n            if (d.type === 'prevPage') {\n              theMatchedPageInfo.prevStart = theMatchedPageInfo.start;\n              theMatchedPageInfo.prevEnd = theMatchedPageInfo.end;\n              theMatchedPageInfo.end = theMatchedPageInfo.start;\n              theMatchedPageInfo.start = theMatchedPageInfo.end - theMatchedPageInfo.pageSize;\n            } else if (d.type === 'nextPage') {\n              theMatchedPageInfo.prevStart = theMatchedPageInfo.start;\n              theMatchedPageInfo.prevEnd = theMatchedPageInfo.end;\n              theMatchedPageInfo.start = theMatchedPageInfo.end;\n              theMatchedPageInfo.end = theMatchedPageInfo.start + theMatchedPageInfo.pageSize;\n            }\n            theMatchedPageInfo.start = Math.max(0, theMatchedPageInfo.start);\n            // 依据最新翻页信息画图\n            currentChart.translateDecompTreeData(levelPageInfoList);\n          }\n        });\n\n        // 修改分页元素中背景的宽度\n        update.selectAll(\"rect\").attr('width', rectNodeWidth);\n        // 修改分页元素中箭头的位置\n        update.selectAll(\"path\").attr('transform', function (d) {\n          if (d.type === 'nextPage') {\n            return 'translate(' + (rectNodeWidth / 2 - 7) + ' , 8)';\n          } else {\n            return 'translate(' + (rectNodeWidth / 2 - 7) + ' , -8)';\n          }\n        });\n        // 修改非分页元素中文本的位置\n        update.selectAll(\"text\").attr('transform', function (d) {\n          let theTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', d.text, {\n            fontSize: 14\n          });\n          return \"translate(\" + (rectNodeWidth / 2 - theTextSize.width / 2) + \" , \" + -theTextSize.height / 2 + \")\";\n        });\n      }, function (exit) {\n        exit.remove();\n      });\n\n      // 点击画布清除高亮节点\n      _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theSvgContainer).on('click', function () {\n        if (highLightNodeList && highLightNodeList.length && highLightLink) {\n          currentChart.drawDecompTreeData({\n            decompTreeNodeList,\n            decompTreeLinkList,\n            decmopAssistDomList\n          });\n        }\n      });\n    };\n    /**\r\n     *  解析树状图层级数据 并定位各个节点 及 连线的位置\r\n     *  @param pageList -   各个层级的分页信息[ 不必填 ]\r\n     * */\n    currentChart.translateDecompTreeData = function (pageList) {\n      // 如果有缓存数据 且 展开层级及展开属性值没有变则可以使用缓存数据\n      let translateDataLevel;\n      let theCachedLevelStr = cachedTranslateData && cachedTranslateData.map(function (data) {\n          return data.idx;\n        }).join(',') || '',\n        theCollapseLevelStr = chartConfigures.collapseAttributeList && chartConfigures.collapseAttributeList.map(function (config) {\n          return config.idx + (config.collapseFilter || '');\n        }).join(',') || '';\n      theCollapseLevelStr = (chartAxis.curYAxis && chartAxis.curYAxis[0] && chartAxis.curYAxis[0].idx) + ',' + theCollapseLevelStr;\n      if (cachedTranslateData && theCachedLevelStr && theCollapseLevelStr && theCachedLevelStr === theCollapseLevelStr) {\n        translateDataLevel = cachedTranslateData;\n      } else {\n        translateDataLevel = _translateDecompositionTreeData__WEBPACK_IMPORTED_MODULE_3__[\"default\"].translateDecompositionTreeData({\n          tableData: tableData,\n          chartAxis: chartAxis,\n          collapseAttributeList: chartConfigures.collapseAttributeList,\n          mode: chartConfigures.option_rect_node_mode\n        });\n        cachedTranslateData = translateDataLevel;\n      }\n      // 如果上级节点切换collapseFilter，下级的所有pageInfo全部无效\n\n      // 真实分解树图形的整体宽度 用于计算各个节点的 x 位置\n      let theRealChartWidth = (rectNodeWidth + rectHorizontalDistance) * translateDataLevel.length - rectHorizontalDistance,\n        theStartLeft = Math.max((svgDrawWidth - theRealChartWidth) / 2, 5),\n        //  默认居中摆放结点\n        theStartTop = 5;\n      // 如果设置了居左,则从左边开始摆放节点( 默认居左摆放 )\n      if (chartConfigures.tree_position_mode === 'font_style_align_left') {\n        theStartLeft = 5;\n      }\n      // 如果有展开解析列，则需要增加标题行 及 副标题行\n      if (translateDataLevel.length > 1) {\n        let titleBackground = chartConfigures.title_background_color || '#fff'; //  默认是白色背景\n        let titleFontSize = chartConfigures.title_font_size_label && parseInt(chartConfigures.title_font_size_label.fontSize) || chartFontSize + 4 || 16,\n          titleFontColor = chartConfigures.title_font_size_label && chartConfigures.title_font_size_label.fontColor,\n          titleFontBold = chartConfigures.title_font_size_label && chartConfigures.title_font_size_label.fontBold,\n          titleFontItalic = chartConfigures.title_font_size_label && chartConfigures.title_font_size_label.fontItalic;\n        let subTitleFontSize = chartConfigures.sub_title_font_size_label && parseInt(chartConfigures.sub_title_font_size_label.fontSize) || chartFontSize || 12,\n          subTitleFontColor = chartConfigures.sub_title_font_size_label && chartConfigures.sub_title_font_size_label.fontColor,\n          subTitleFontBold = chartConfigures.sub_title_font_size_label && chartConfigures.sub_title_font_size_label.fontBold,\n          subTitleFontItalic = chartConfigures.sub_title_font_size_label && chartConfigures.sub_title_font_size_label.fontItalic;\n        // 画水平方向的标题\n        theTreeContainer.selectAll(\".horizontal-title\").remove();\n        let theHorizontalTitleContainer = theTreeContainer.append(\"g\").attr(\"class\", \"title horizontal-title\");\n        // 标题的背景 需要放在theTreeContainer外,不会被拖拽移动)\n        let titleTextSizeForHeight = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', 'kkk', {\n            fontSize: titleFontSize\n          }),\n          subTitleTextSizeForHeight = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', 'kkk', {\n            fontSize: subTitleFontSize\n          });\n        theTreeHeaderRect.style(\"fill\", titleBackground || '#fff').attr('rx', '2').attr(\"width\", svgDrawWidth).attr(\"height\", titleTextSizeForHeight.height + 13 + subTitleTextSizeForHeight.height);\n        for (let i = 1; i < translateDataLevel.length; i++) {\n          let theDataLevel = translateDataLevel[i];\n          let theAttribute = chartAxis.curXAxis && chartAxis.curXAxis.find(function (head) {\n            return head.idx + '' === theDataLevel.idx + '';\n          });\n          if (!theAttribute) continue;\n          let theTitleText = theAttribute.displayName || theAttribute.col_name;\n          let theTitleTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theTitleText, {\n            fontSize: titleFontSize\n          });\n          let theTitleItem = theHorizontalTitleContainer.append('g').attr(\"class\", \"decomposition-title-item\").attr(\"transform\", \"translate(\" + (theStartLeft + (rectNodeWidth + rectHorizontalDistance) * i) + \" , 3)\").on(\"mouseover\", function () {\n            theTitleItem.select(\".title-lock-button\").style(\"display\", \"block\");\n          }).on(\"mouseout\", function () {\n            theTitleItem.select(\".title-lock-button\").style(\"display\", \"none\");\n          });\n          // // 锁的标志\n          // theTitleItem.append(\"text\")\n          //     .attr(\"class\" , \"title-lock-button lock-icon\")\n          //     .style(\"display\",\"none\")\n          //     .style(\"color\" , highLightConnectColor)\n          //     .style(\"line-height\" , theTitleTextSize.height)\n          //     .attr('transform' , \"translate(-16 , 0)\")\n          //     .style(\"dominant-baseline\" , \"text-before-edge\")\n          //     .on(\"click\" , function(){\n          //         console.log('锁定');\n          //     })\n          //     .text(theDataLevel.locked ? '' : '')\n          //     .append(\"title\")\n          //     .text(\"锁定级别\");\n\n          // 主标题\n          theTitleItem.append(\"text\").style('font-size', titleFontSize).style('fill', titleFontColor !== 'undefined' ? titleFontColor : 'inherit').style('font-weight', titleFontBold !== 'undefined' ? titleFontBold ? 'bold' : 'normal' : 'inherit').style('font-style', titleFontItalic !== 'undefined' ? titleFontItalic ? 'italic' : 'normal' : 'inherit').style(\"dominant-baseline\", \"text-before-edge\").text(function () {\n            let theText = theTitleText,\n              baseTextWidth = rectNodeWidth - 15;\n            if (theTitleTextSize.width > baseTextWidth) {\n              let theSubText = '';\n              for (let i = 0; i < theText.length; i++) {\n                let chart = theText.charAt(i);\n                theSubText += chart;\n                let theSubTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theSubText, {\n                  fontSize: titleFontSize\n                });\n                if (theSubTextSize.width > baseTextWidth) {\n                  break;\n                }\n              }\n              if (theSubText.length === theText.length) {\n                return theText;\n              } else {\n                return theSubText + '..';\n              }\n            }\n            return theText;\n          }).append(\"title\").text(theTitleText);\n          // 删除按钮[ 级别只有在没锁定的情况下才显示 ]\n          let theRemoveIcon = theTitleItem.append(\"g\").attr(\"class\", \"title-remove-button\").style('display', theDataLevel.locked ? 'none' : 'block').style(\"fill\", 'rgb(179, 176, 173)').style(\"font-size\", '16px').style(\"line-height\", theTitleTextSize.height).attr('transform', \"translate(\" + (rectNodeWidth - 10) + \" , 0)\").style(\"dominant-baseline\", \"text-before-edge\").style(\"cursor\", \"pointer\").on(\"click\", function () {\n            if (!chartConfigures.collapseAttributeList) chartConfigures.collapseAttributeList = [];\n            chartConfigures.collapseAttributeList = chartConfigures.collapseAttributeList.filter(function (theConfig) {\n              return theConfig.idx !== theDataLevel.idx;\n            });\n\n            // 清除最后一个展开列的展开值\n            let theLastConfig = chartConfigures.collapseAttributeList[chartConfigures.collapseAttributeList.length - 1];\n            if (theLastConfig && theLastConfig.collapseFilter !== undefined) {\n              theLastConfig.collapseFilter = undefined;\n            }\n            // 修改图形配置\n            currentChart.requireSetConfig({\n              key: \"collapseAttributeList\",\n              value: chartConfigures.collapseAttributeList,\n              disableRedraw: true\n            });\n\n            // 删除级别的时候，也需要带分页信息[ 但是删除列的分析信息被残留到后面的展开列，需要将删除列后面的分页信息清空 ]\n            let theLevelIndex = -1;\n            levelPageInfoList.find(function (pageInfo, index) {\n              if (pageInfo.idx === theDataLevel.idx) {\n                theLevelIndex = -1;\n                return true;\n              }\n            });\n            levelPageInfoList = levelPageInfoList && levelPageInfoList.filter(function (pageInfo, index) {\n              return index < theLevelIndex;\n            });\n            currentChart.translateDecompTreeData(levelPageInfoList);\n            if (document.getElementById(\"decomposition-tree-collapse-container\")) {\n              document.getElementById(\"decomposition-tree-collapse-container\").remove();\n            }\n          });\n          theRemoveIcon.append(\"rect\").attr('fill', '#ddd').style('opacity', '0').attr('width', 10).attr('height', theTitleTextSize.height);\n          theRemoveIcon.append(\"text\").text('×');\n          // 间隔线\n          theTitleItem.append(\"rect\").attr('transform', \"translate(0 , \" + (theTitleTextSize.height + 3) + \")\").attr('width', rectNodeWidth).attr('height', 3).attr('fill', theConnectPathSelectedColor);\n\n          // 如果当前属性列有被展开的子元素，则需要增加副标题\n          if (theDataLevel.collapseFilter !== undefined) {\n            theTitleItem.append(\"text\").attr('transform', \"translate(0 , \" + (theTitleTextSize.height + 9) + \")\").style('font-size', subTitleFontSize).style('color', subTitleFontColor === 'undefined' ? 'inherit' : subTitleFontColor).style('font-weight', subTitleFontBold === 'undefined' ? subTitleFontBold ? 'bold' : 'normal' : 'inherit').style('font-style', subTitleFontItalic === 'undefined' ? subTitleFontItalic ? 'italic' : 'normal' : 'inherit').style(\"dominant-baseline\", \"text-before-edge\").text(function () {\n              let theText = theDataLevel.collapseFilter === null ? 'Null' : theDataLevel.collapseFilter,\n                theSubTitleTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theText, {\n                  fontSize: subTitleFontSize\n                }),\n                baseTextWidth = rectNodeWidth - 10;\n              if (theSubTitleTextSize.width > baseTextWidth) {\n                let theSubText = '';\n                for (let i = 0; i < theText.length; i++) {\n                  let chart = theText.charAt(i);\n                  theSubText += chart;\n                  let theSubTextSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theSubText, {\n                    fontSize: subTitleFontSize\n                  });\n                  if (theSubTextSize.width > baseTextWidth) {\n                    break;\n                  }\n                }\n                if (theSubText.length === theText.length) {\n                  return theText;\n                } else {\n                  return theSubText + '..';\n                }\n              }\n              return theText;\n            }).append(\"title\").text(theDataLevel.collapseFilter);\n          }\n        }\n        theStartTop = (theHorizontalTitleContainer.node() && theHorizontalTitleContainer.node().getBBox().height || 0) + 5;\n      } else {\n        // 没有标题时，直接清除\n        theTreeContainer.selectAll(\".horizontal-title\").remove();\n        theTreeHeaderRect.attr('height', 0);\n      }\n      // 画分解树图中各个级别的各个节点\n      let theTreeCompHeight = svgDrawHeight - theStartTop - 5;\n      // 节点需要将分页部分预留出来[ 每个分页20 ]\n      let theNodePageSize = Math.max(1, Math.floor((theTreeCompHeight - 40) / (theNodeDomHeight + rectVerticalDistance)));\n      let prevCollapseNode,\n        decompTreeNodeList = [],\n        //  树上节点的数组\n        decompTreeLinkList = [],\n        //  树上所有连接线的数组\n        decmopAssistDomList = []; //  树上辅助节点（翻页/...）等数组\n      translateDataLevel && translateDataLevel.forEach(function (dataLevel, index) {\n        if (!dataLevel.dataList || !dataLevel.dataList.length) return false;\n        let thePageInfo = pageList && pageList[index];\n        let theDataList = dataLevel.dataList,\n          thePageSize = Math.min(theDataList.length, theNodePageSize),\n          theDomTotalHeight = thePageSize * (theNodeDomHeight + rectVerticalDistance) - rectVerticalDistance,\n          theDomListOffsetTop = Math.max(theStartTop + 5, (theTreeCompHeight - theDomTotalHeight) / 2 + theStartTop + 5);\n        let prevStart, prevEnd;\n        dataLevel.steps = thePageSize;\n        dataLevel.end = Math.min(dataLevel.start + dataLevel.steps, theDataList.length);\n        dataLevel.start = Math.min(dataLevel.start, theDataList.length - dataLevel.steps);\n        if (thePageInfo) {\n          prevStart = thePageInfo.prevStart;\n          prevEnd = thePageInfo.prevEnd;\n          dataLevel.steps = thePageInfo.pageSize;\n          dataLevel.start = thePageInfo.start;\n          dataLevel.end = thePageInfo.end;\n          dataLevel.end = Math.min(dataLevel.start + dataLevel.steps, theDataList.length);\n          dataLevel.start = Math.min(dataLevel.start, theDataList.length - dataLevel.steps);\n          dataLevel.start = Math.max(0, dataLevel.start);\n        }\n        // 有翻页 且 有展开节点的情况下：如果展开节点在起点前面，则将当前的end减一，将展开的节点位置预留下来\n        if (thePageSize < theDataList.length && dataLevel.collapseIndex >= 0) {\n          // 如果展开节点在前面 / 或者再后面，得判断是往前翻页，还是往后翻页\n          if (dataLevel.start > dataLevel.collapseIndex || dataLevel.end <= dataLevel.collapseIndex) {\n            // 如果当前是初始化，不是翻页，则默认挤掉后面的\n            if (prevStart === undefined) {\n              dataLevel.end--;\n            } else {\n              // 如果往前翻页，则当前页最后一个节点在上一页看过，就挤掉最后一个节点 ； 如果没看过就挤掉前一个节点\n              if (prevStart >= dataLevel.start) {\n                // 往前翻页,如果当前页最后一个节点，在上一页展示过 ， 则挤掉最后一个节点\n                if (dataLevel.end - 1 >= prevStart && dataLevel.end - 1 < prevEnd) {\n                  dataLevel.end--;\n                } else {\n                  dataLevel.start++;\n                }\n              }\n              // 如果是往后翻页，则当前页第一个节点在上一页看过，就挤掉第一个节点 ； 如果没看过就挤掉最后一个节点\n              else {\n                // 往后翻页，则当前第一个节点在上一页看过，就挤掉第一个节点 ； 如果没看过就挤掉最后一个节点\n                if (dataLevel.start >= prevStart && dataLevel.start < prevEnd) {\n                  dataLevel.start++;\n                } else {\n                  dataLevel.end--;\n                }\n              }\n            }\n          }\n        }\n        // 没有翻页的情况下，则节点位置会受上级展开节点的位置的影响\n        else if (thePageSize >= theDataList.length && prevCollapseNode && prevCollapseNode.collapseIndex >= 0) {\n          theDomListOffsetTop = Math.max(prevCollapseNode.nodeOffsetTop + theNodeDomHeight / 2 - theDomTotalHeight / 2, theStartTop + 5);\n          theDomListOffsetTop = Math.min(theTreeCompHeight - theDomTotalHeight, theDomListOffsetTop);\n        }\n\n        // 翻页的节点位置\n        if (thePageSize < theDataList.length) {\n          // 有前翻页的按钮\n          if (dataLevel.start > 0) {\n            decmopAssistDomList.push({\n              id: dataLevel.idx + '-' + 'prev',\n              idx: dataLevel.idx,\n              x: theStartLeft + index * (rectNodeWidth + rectHorizontalDistance),\n              y: theDomListOffsetTop - 5,\n              type: 'prevPage',\n              start: dataLevel.start,\n              end: dataLevel.end,\n              pageSize: thePageSize,\n              index: index,\n              text: '▲'\n            });\n          }\n          if (dataLevel.end < theDataList.length) {\n            decmopAssistDomList.push({\n              id: dataLevel.idx + '-' + 'next',\n              idx: dataLevel.idx,\n              x: theStartLeft + index * (rectNodeWidth + rectHorizontalDistance),\n              y: theDomListOffsetTop + (theNodeDomHeight + rectVerticalDistance) * thePageSize - rectVerticalDistance + 5,\n              type: 'nextPage',\n              start: dataLevel.start,\n              end: dataLevel.end,\n              pageSize: thePageSize,\n              index: index,\n              text: '▼'\n            });\n          }\n        }\n        // 计算所有节点的位置，宽高等数据数组，为每个节点定义唯一标识id\n        let showIndex = 0;\n        theDataList && theDataList.forEach(function (dataItem, i) {\n          let theFlag = false;\n          if (thePageSize < theDataList.length) {\n            theFlag = i >= dataLevel.start && i < dataLevel.end || i === dataLevel.collapseIndex;\n\n            // 如果展开的节点在上一页，则需要展示，且 在后面加上...\n            if (i < dataLevel.start && i === dataLevel.collapseIndex) {\n              decmopAssistDomList.push({\n                id: dataLevel.idx + '-' + 'text',\n                x: theStartLeft + index * (rectNodeWidth + rectHorizontalDistance),\n                y: theDomListOffsetTop + (theNodeDomHeight + rectVerticalDistance) * showIndex + theNodeDomHeight + rectVerticalDistance / 2,\n                type: 'text',\n                text: '. . .'\n              });\n            }\n            // 如果展开的节点在下一页，则需要展示 且 在前面加上...\n            else if (i > dataLevel.end && i === dataLevel.collapseIndex) {\n              decmopAssistDomList.push({\n                id: dataLevel.idx + '-' + 'text',\n                x: theStartLeft + index * (rectNodeWidth + rectHorizontalDistance),\n                y: theDomListOffsetTop + (theNodeDomHeight + rectVerticalDistance) * showIndex - rectVerticalDistance / 2,\n                type: 'text',\n                text: '. . .'\n              });\n            }\n          } else {\n            theFlag = true;\n          }\n\n          // 如果当前节点需要显示 , 如果有上级展开节点则计算连线\n          if (theFlag) {\n            dataItem.id = index + '-' + dataLevel.idx + '-' + i + '-' + (dataItem.name === null ? 'Null' : dataItem.name) + '-' + dataItem.value; // 列数 + 列idx + 行数\n            if (prevCollapseNode) {\n              dataItem.id += '-' + prevCollapseNode.collapseIndex + '-' + prevCollapseNode.dataLevel.idx;\n            }\n            dataItem.x = theStartLeft + index * (rectNodeWidth + rectHorizontalDistance);\n            dataItem.y = theDomListOffsetTop + (theNodeDomHeight + rectVerticalDistance) * showIndex;\n            dataItem.idx = dataLevel.idx;\n            dataItem.levelIndex = index;\n            dataItem.type = dataLevel.type;\n            dataItem.parentFilter = prevCollapseNode && prevCollapseNode.collapseFilter;\n            dataItem.parentIdx = prevCollapseNode && prevCollapseNode.dataLevel.idx;\n            switch (chartConfigures.rect_node_mode) {\n              case \"parent_level_model\":\n                dataItem.rangeMax = Math.max(Math.abs(dataLevel.total), Math.abs(dataLevel.min));\n                dataItem.rangeMin = dataLevel.min < 0 ? -dataItem.rangeMax : 0;\n                break;\n              case \"root_level_model\":\n                dataItem.rangeMax = Math.max(Math.abs(dataLevel.root), Math.abs(dataLevel.min));\n                dataItem.rangeMin = dataLevel.min < 0 ? -dataItem.rangeMax : 0;\n                break;\n              default:\n                dataItem.rangeMax = Math.max(Math.abs(dataLevel.max), Math.abs(dataLevel.min));\n                dataItem.rangeMin = dataLevel.min < 0 ? -dataItem.rangeMax : 0;\n                break;\n            }\n            if (_DataFocusMethod.isPureNumber(chartConfigures.rect_node_mode_start) && _DataFocusMethod.isPureNumber(chartConfigures.rect_node_mode_end)) {\n              let configMin = parseFloat(chartConfigures.rect_node_mode_start),\n                configMax = parseFloat(chartConfigures.rect_node_mode_end);\n              if (configMin < configMax) {\n                dataItem.rangeMin = configMin;\n                dataItem.rangeMax = configMax;\n              }\n            } else if (_DataFocusMethod.isPureNumber(chartConfigures.rect_node_mode_start)) {\n              let configMin = parseFloat(chartConfigures.rect_node_mode_start);\n              if (configMin < dataItem.rangeMax) {\n                dataItem.rangeMin = parseFloat(chartConfigures.rect_node_mode_start);\n              }\n            } else if (_DataFocusMethod.isPureNumber(chartConfigures.rect_node_mode_end)) {\n              let configMax = parseFloat(chartConfigures.rect_node_mode_end);\n              if (configMax > dataItem.rangeMin) {\n                dataItem.rangeMax = parseFloat(chartConfigures.rect_node_mode_end);\n              }\n            }\n            dataItem.hasMinusFlag = dataLevel.min < 0;\n            dataItem.minusPercentage = dataItem.rangeMin < 0 ? Math.abs(dataItem.rangeMin) / (dataItem.rangeMax - dataItem.rangeMin) : 0;\n            dataItem.collapseFlag = dataLevel.collapseFilter === undefined || dataLevel.collapseFilter === dataItem.name;\n            dataItem.needCollapseFlag = index === translateDataLevel.length - 1 && chartAxis.curXAxis && index < chartAxis.curXAxis.length;\n            decompTreeNodeList.push(dataItem);\n\n            // 如果有来源节点，则需要增加一条连接线\n            if (prevCollapseNode) {\n              let theLinkItem = {};\n              theLinkItem.id = prevCollapseNode.index + '-' + prevCollapseNode.dataLevel.idx + '-' + prevCollapseNode.collapseIndex + '-' + dataItem.id;\n              theLinkItem.nodeId = dataItem.id;\n              theLinkItem.x0 = prevCollapseNode.nodeOffsetLeft + rectNodeWidth + 2;\n              theLinkItem.y0 = prevCollapseNode.nodeOffsetTop + rectNodeHeight / 2;\n              theLinkItem.x = dataItem.x - 2;\n              theLinkItem.y = dataItem.y + rectNodeHeight / 2;\n              theLinkItem.currentFlag = index > 0 && dataLevel.collapseIndex === i; // 当前被展开的节点就是需要高亮的线\n              decompTreeLinkList.push(theLinkItem);\n            }\n            showIndex++;\n          }\n        });\n\n        // 记录上一个展开的节点的信息[ 展开了一个属性列或者展开了根节点的数值列 ]\n        if (dataLevel.collapseFilter !== undefined && dataLevel.collapseIndex >= 0 || index === 0 && translateDataLevel.length > 1) {\n          // 如果是展开的是属性列\n          if (dataLevel.collapseFilter !== undefined) {\n            prevCollapseNode = {\n              index: index,\n              dataLevel: dataLevel,\n              start: dataLevel.start,\n              end: dataLevel.end,\n              offsetTop: theDomListOffsetTop,\n              collapseIndex: dataLevel.collapseIndex,\n              collapseFilter: dataLevel.collapseFilter,\n              // nodeIndex从1开始计\n              nodeIndex: dataLevel.collapseIndex < dataLevel.start ? 1 : dataLevel.collapseIndex > dataLevel.end ? thePageSize : dataLevel.collapseIndex + 1 - dataLevel.start\n            };\n          } else {\n            // 如果是初始的根节点\n            prevCollapseNode = {\n              index: index,\n              dataLevel: dataLevel,\n              start: 0,\n              end: 1,\n              offsetTop: theDomListOffsetTop,\n              collapseIndex: 0,\n              // nodeIndex从1开始计\n              nodeIndex: 1\n            };\n          }\n          prevCollapseNode.nodeOffsetTop = prevCollapseNode.offsetTop + (prevCollapseNode.nodeIndex - 1) * (theNodeDomHeight + rectVerticalDistance);\n          prevCollapseNode.nodeOffsetLeft = theStartLeft + prevCollapseNode.index * (rectNodeWidth + rectHorizontalDistance);\n        }\n      });\n      console.info(decompTreeNodeList);\n      currentChart.drawDecompTreeData({\n        decompTreeNodeList,\n        decompTreeLinkList,\n        decmopAssistDomList\n      });\n      let pageInfoList = [];\n      translateDataLevel && translateDataLevel.forEach(function (dataLevel) {\n        pageInfoList.push({\n          idx: dataLevel.idx,\n          start: dataLevel.start,\n          end: dataLevel.end,\n          pageSize: dataLevel.steps\n        });\n      });\n      levelPageInfoList = pageInfoList;\n    };\n    currentChart.translateDecompTreeData();\n\n    // 为树状图增加缩放拖拽操作\n    _pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(theSvgContainer).call(_pc_assets_js_d3v7Export_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].zoom().translateExtent([[0, 0], [Math.max(svgDrawWidth, (rectNodeWidth + rectHorizontalDistance) * (levelPageInfoList.length + 1)), svgDrawHeight]]).duration(200)\n    // 只允许平移[ 标题背景不平移 ]\n    .on('zoom', function (event) {\n      theTreeContainer.attr('transform', event.transform);\n    }));\n\n    /* *\r\n    * 画完图需要告诉外部的配置组件，当前图形的配置：\r\n    * 高亮展开列的颜色\r\n    * 正数颜色\r\n    * 负数颜色\r\n    * 选中连线的颜色\r\n    * */\n    let returnConfigureAutoValue = {};\n    if (!chartConfigures.rect_node_positive_color) {\n      returnConfigureAutoValue.rect_node_positive_color = colorFunc(0);\n    }\n    if (!chartConfigures.rect_node_negative_color) {\n      returnConfigureAutoValue.rect_node_negative_color = colorFunc(1);\n    }\n    if (!chartConfigures.connect_path_selected_color) {\n      returnConfigureAutoValue.connect_path_selected_color = colorFunc(2);\n    }\n    return {\n      chartAutoConfigures: returnConfigureAutoValue\n    };\n  },\n  // 图表配置\n  chartConfigureList: [\n  // 通用\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"theme\",\n      selection: [\"option_chart_theme_eight\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"],\n      defaultValue: \"option_chart_theme_one\"\n    },\n    //自定义主题颜色\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    // 图形字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 12\n      }\n    },\n    // 当前分解树图被展开的层级配置值，是不可以被重置的\n    {\n      key: 'collapseAttributeList',\n      disableRestartFlag: true,\n      //  不可以被重置的标志\n      hide: true,\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 树形配置 [ 垂直间距，水平间距 ]\n  {\n    key: \"category_tree_config\",\n    title: \"category_tree_config\",\n    options: [\n    // 位置\n    {\n      key: \"tree_position_mode\",\n      title: \"option_tree_position_mode\",\n      type: \"selectTile\",\n      selection: [\"font_style_align_left\", \"font_style_align_center\"],\n      defaultValue: 'font_style_align_center'\n    },\n    // 垂直间距\n    {\n      key: \"rect_node_vertical_distance\",\n      title: \"option_rect_node_vertical_distance\",\n      type: \"input\",\n      min: 5,\n      max: 100,\n      defaultNumber: 20\n    },\n    // 水平间距\n    {\n      key: \"rect_node_horizontal_distance\",\n      title: \"option_rect_node_horizontal_distance\",\n      type: \"input\",\n      min: 10,\n      max: 200,\n      defaultNumber: 75\n    },\n    // 选中线颜色\n    {\n      key: \"connect_path_selected_color\",\n      title: \"option_connect_path_selected_color\",\n      type: \"color\"\n    },\n    // 未选中线颜色\n    {\n      key: \"connect_path_default_color\",\n      title: \"option_connect_path_default_color\",\n      type: \"color\",\n      defaultColor: 'rgb(230, 230, 230)'\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 节点配置\n  {\n    key: \"category_node_config\",\n    title: \"category_node_config\",\n    options: [\n    // 计算进度条的规则\n    {\n      key: \"rect_node_mode\",\n      title: \"option_rect_node_mode\",\n      description: \"option_rect_node_mode_desc\",\n      type: \"select\",\n      selection: [\"current_level_top_mode\", \"parent_level_model\", \"root_level_model\"],\n      defaultValue: 'current_level_top_mode'\n    },\n    // 计算起点\n    {\n      key: \"rect_node_mode_start\",\n      title: \"option_rect_node_mode_start\",\n      type: 'text',\n      placeholderKey: 'pinboard_component_tab_switch_type_auto'\n    },\n    // 计算终点\n    {\n      key: \"rect_node_mode_end\",\n      title: \"option_rect_node_mode_end\",\n      type: 'text',\n      placeholderKey: 'pinboard_component_tab_switch_type_auto'\n    },\n    // 节点宽度\n    {\n      key: \"rect_node_width\",\n      title: \"option_rect_node_width\",\n      type: \"input\",\n      min: 50,\n      max: 200,\n      allowNullFlag: true,\n      // withoutSlider: true ,\n      defaultNumber: 150\n    },\n    // 节点高度\n    {\n      key: \"rect_node_height\",\n      title: \"option_rect_node_height\",\n      type: \"input\",\n      min: 5,\n      max: 100,\n      allowNullFlag: true,\n      defaultNumber: 12\n    },\n    // 节点矩形背景\n    {\n      key: \"rect_node_background\",\n      title: \"option_rect_node_background\",\n      type: \"color\",\n      defaultColor: 'rgb(230, 230, 230)'\n    },\n    // 正数颜色\n    {\n      key: \"rect_node_positive_color\",\n      title: \"option_rect_node_positive_color\",\n      type: \"color\"\n    },\n    // 负数颜色\n    {\n      key: \"rect_node_negative_color\",\n      title: \"option_rect_node_negative_color\",\n      type: \"color\"\n    },\n    // 标签字体\n    {\n      key: \"label_font_size_label\",\n      title: \"option_label_font_size_label\",\n      type: \"fontStyle\",\n      defaultValueConfig: \"font_size_label\"\n    },\n    // 数值字体\n    {\n      key: \"value_font_size_label\",\n      title: \"option_value_font_size_label\",\n      type: \"fontStyle\",\n      defaultValueConfig: \"font_size_label\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 标题配置\n  {\n    key: \"category_tree_title_config\",\n    title: \"category_tree_title_config\",\n    options: [\n    // 标题字体\n    {\n      key: \"title_font_size_label\",\n      title: \"option_title_font_size_label\",\n      type: \"fontStyle\",\n      defaultValueConfig: \"font_size_label + 4\"\n    },\n    // 副标题字体\n    {\n      key: \"sub_title_font_size_label\",\n      title: \"option_sub_title_font_size_label\",\n      type: \"fontStyle\",\n      defaultValueConfig: \"font_size_label\"\n    },\n    // 标题背景\n    {\n      key: \"title_background_color\",\n      title: \"option_title_background_color\",\n      type: \"color\",\n      defaultColor: '#fff'\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 悬浮文本设置\n  {\n    key: \"category_suspend_text\",\n    title: \"category_suspend_text\",\n    options: [{\n      key: \"suspend_text_regex\",\n      title: \"option_suspend_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  // 自定义宏\n  chartConfigureAdvanced: {\n    chartMacroList: [{\n      key: '%_NAME',\n      nameKey: '%_NAME',\n      descriptionKey: '%_NAME_desc'\n    }, {\n      key: '%_CATEGORY_NAME',\n      nameKey: '%_CATEGORY_NAME',\n      descriptionKey: '%_CATEGORY_NAME_desc'\n    }, {\n      key: '%_VALUE_NAME',\n      nameKey: '%_VALUE_NAME',\n      descriptionKey: '%_VALUE_NAME_desc'\n    }, {\n      key: '%_VALUE',\n      nameKey: '%_VALUE',\n      descriptionKey: '%_VALUE_desc'\n    }, {\n      key: '%_CATEGORY_TOTAL',\n      nameKey: '%_CATEGORY_TOTAL',\n      descriptionKey: '%_CATEGORY_TOTAL_desc'\n    }, {\n      key: '%_CATEGORY_AVERAGE',\n      nameKey: '%_CATEGORY_AVERAGE',\n      descriptionKey: '%_CATEGORY_AVERAGE_desc'\n    }, {\n      key: '%_PERCENT_OF_CATEGORY',\n      nameKey: '%_PERCENT_OF_CATEGORY',\n      descriptionKey: '%_PERCENT_OF_CATEGORY_desc'\n    }, {\n      key: '%_PERCENT_OF_TOTAL',\n      nameKey: '%_PERCENT_OF_TOTAL',\n      descriptionKey: '%_PERCENT_OF_TOTAL_desc'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR',\n      descriptionKey: '%_BR_desc'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type        -\r\n     *\r\n     *              xLabel       -   图形单元对应的属性值 用于实现%_NAME %_CATEGORY_NAME\r\n     *              xLabelIndex  -   图形单元对应的属性索引，用于实现 %_CATEGORY_NUMBER\r\n     *              xLabelTotal  -   图形单元对应的属性上所有值的总和用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              xLabelNumber -   图形单元对应的属性上所有值的个数用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              yValue       -   图形单元对应的值 用于实现 %_VALUE\r\n     *              yAxis        -   图形单元对应的值列 用于实现 %_VALUE_NAME  %_SERIES_NAME\r\n     *              legend       -   图形单元对应的图例名(为空时说明是多Y轴) 用于实现 %_SERIES_NAME\r\n     *              legendIndex  -   图形单元对应的图例索引 用于实现 %_SERIES_NUMBER\r\n     *              legendTotal  -   图形单元对应的图例上所有值的总和,用于实现 %_PERCENT_OF_TOTAL\r\n     *              rowData -  图形单元对应的一整行数据 用于实现%_COLUMN_N的宏\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case \"%_NAME\":\n            theMatchedTextValue += options.xLabel || '';\n            break;\n          case \"%_NAME_NUMBER\":\n            theMatchedTextValue += options.xLabelIndex || '';\n            break;\n          case \"%_CATEGORY_NAME\":\n            if (options.xAxis) {\n              theMatchedTextValue += options.xAxis.displayName || options.xAxis.col_name || '';\n            }\n            break;\n          case \"%_VALUE_NAME\":\n            if (options.yAxis) {\n              theMatchedTextValue += options.yAxis.displayName || options.yAxis.col_name || '';\n            }\n            break;\n          case \"%_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.yValue, options.yAxis) || '';\n            break;\n          case \"%_CATEGORY_TOTAL\":\n            theMatchedTextValue += options.xLabelTotal || '';\n            break;\n          case \"%_CATEGORY_AVERAGE\":\n            let theAverage = options.xLabelTotal / (options.xLabelNumber || 1);\n            if (!isNaN(theAverage)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theAverage, 2) + '%';\n            }\n            break;\n          case \"%_PERCENT_OF_CATEGORY\":\n            let theCPercent = options.yValue / (options.xLabelTotal || 1);\n            if (!isNaN(theCPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theCPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_PERCENT_OF_TOTAL\":\n            let theTPercent = options.yValue / (options.legendTotal || 1);\n            if (!isNaN(theTPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theTPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n              let theColumnN = parseInt(theMatchStr.substring(9));\n              if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN <= options.rowData.length) {\n                theMatchedTextValue += _DataFocusMethod.formatData(options.rowData[theColumnN - 1], options.headers && options.headers[theColumnN - 1]);\n              }\n            }\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    }\n  },\n  i18nObj: {\n    chinese: {\n      chart_x_axis_title: \"分解维度\",\n      chart_y_axis_title: \"分析值\",\n      chart_axis_modify_y_only_one: \"分析值只允许一个数值列\",\n      category_tree_config: '树',\n      option_tree_position_mode: '位置',\n      option_rect_node_vertical_distance: '垂直间隔',\n      option_rect_node_horizontal_distance: '水平间隔',\n      option_connect_path_selected_color: '选中连线',\n      option_connect_path_default_color: '未选中连线',\n      category_node_config: '节点',\n      option_rect_node_mode: '计算模式',\n      current_level_top_mode: '同级最大节点',\n      parent_level_model: '父节点',\n      root_level_model: '根节点',\n      option_rect_node_mode_desc: '配置当前树上各个节点条形占比的计算模式: <br />' + '同级最大节点: 所有节点值占当前层级最大数值的比例 ;<br />' + '父节点: 所有节点值占父节点数值的比例 ;<br />' + '根节点: 所有节点值占根节点数值的比例 ;<br />',\n      option_rect_node_mode_start: '计算起点',\n      option_rect_node_mode_end: '计算终点',\n      option_rect_node_width: '条形图宽度',\n      option_rect_node_height: '条形图高度',\n      option_rect_node_background: '条形图背景',\n      option_rect_node_positive_color: '正数矩形',\n      option_rect_node_negative_color: '负数矩形',\n      option_label_font_size_label: '标签',\n      option_value_font_size_label: '数值',\n      category_tree_title_config: '标题',\n      option_title_font_size_label: '标题字体',\n      option_sub_title_font_size_label: '副标题字体',\n      option_title_background_color: '背景',\n      \"%_NAME\": '标签',\n      \"%_NAME_NUMBER\": '标签索引',\n      \"%_CATEGORY_NAME\": '维度名',\n      \"%_VALUE_NAME\": '值列名',\n      \"%_VALUE\": '值',\n      \"%_CATEGORY_TOTAL\": '维度总和',\n      \"%_CATEGORY_AVERAGE\": '维度平均值',\n      \"%_PERCENT_OF_CATEGORY\": '维度占比',\n      \"%_PERCENT_OF_TOTAL\": '总占比',\n      \"%_BR\": '换行'\n    },\n    english: {\n      chart_x_axis_title: \"Decompose dimensions\",\n      chart_y_axis_title: \"Analysis value\",\n      chart_axis_modify_y_only_one: \"Only one numerical column is allowed for analysis values\",\n      category_tree_config: 'Tree',\n      option_rect_node_vertical_distance: 'Vertical spacing',\n      option_rect_node_horizontal_distance: 'Horizontal spacing',\n      option_connect_path_selected_color: 'Selected line',\n      option_connect_path_default_color: 'UnSelected line',\n      category_node_config: 'Node',\n      option_label_font_size_label: 'Label',\n      option_value_font_size_label: 'Value',\n      option_rect_node_width: 'Rect width',\n      option_rect_node_height: 'Rect Height',\n      option_rect_node_background: 'Rect background',\n      option_rect_node_positive_color: 'Rect positive color',\n      option_rect_node_negative_color: 'Rect negative color',\n      category_tree_title_config: 'Title',\n      option_title_font_size_label: 'Title',\n      option_sub_title_font_size_label: 'SubTitle',\n      option_title_background_color: 'Background',\n      \"%_NAME\": 'Label',\n      \"%_NAME_NUMBER\": 'Label index',\n      \"%_CATEGORY_NAME\": 'Decomposition name',\n      \"%_VALUE_NAME\": 'Value name',\n      \"%_VALUE\": 'Value',\n      \"%_CATEGORY_TOTAL\": 'Decomposition Total',\n      \"%_CATEGORY_AVERAGE\": 'Decomposition Average',\n      \"%_PERCENT_OF_CATEGORY\": 'Percentage of Decomposition',\n      \"%_PERCENT_OF_TOTAL\": 'Percentage of Total',\n      \"%_BR\": 'BR'\n    }\n  },\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/decompositionTree/systemDecompositionTreeChart.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.senior/decompositionTree/translateDecompositionTreeData.js":
/*!****************************************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/decompositionTree/translateDecompositionTreeData.js ***!
  \****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /**\r\n   * 处理分解树的数据，将数据表的二维数据，转成画分解树的数据\r\n   * @param [Object]options\r\n   *          {\r\n   *              tableData   -   查询数据\r\n   *              chartAxis   -   图表配置\r\n   *              collapseAttributeList   -   用户已展开的属性列的配置\r\n   *          }\r\n   *\r\n   * @return [Array]translateData\r\n   *          [{\r\n   *              idx     -   列索引\r\n   *              type    -   attribute / measure\r\n   *              datas\r\n   *              min     -   最小值\r\n   *              max     -   最大值\r\n   *              dataList    -   数值列表\r\n   *          }]\r\n   * */\n  translateDecompositionTreeData: function (options) {\n    options = options || {};\n    if (!options.chartAxis || !options.chartAxis.curYAxis || !options.chartAxis.curYAxis[0] || !options.tableData || !options.tableData.columns) return false;\n    const self = this;\n    const theYAxis = options.chartAxis.curYAxis[0],\n      tableData = options.tableData;\n    let translateDataLevel = [{\n      idx: theYAxis.idx,\n      type: 'measure',\n      datas: {\n        value: 0,\n        displayName: theYAxis.displayName || theYAxis.col_name,\n        rowData: []\n      }\n    }];\n    // 生成各个属性列的数值\n    options.collapseAttributeList && options.collapseAttributeList.forEach(function (collapseAttribute, index) {\n      let prevCollapseAttribute = options.collapseAttributeList[index - 1];\n      translateDataLevel.push({\n        idx: collapseAttribute.idx,\n        type: 'attribute',\n        collapseFilter: collapseAttribute.collapseFilter,\n        //  当前列的展开列中值\n        parentFilter: prevCollapseAttribute && prevCollapseAttribute.collapseFilter,\n        //  父级列的展开值\n        parentFilterIdx: prevCollapseAttribute && prevCollapseAttribute.idx,\n        //  父级列的索引\n        datas: {\n          valueObj: {},\n          displayName: []\n        }\n      });\n    });\n\n    // 计算树上各个节点的聚合数据 及 各个节点所拥有的行数据\n    tableData.columns && tableData.columns.forEach(function (rowData, index) {\n      let theMeasureValue = rowData[theYAxis.idx];\n      if (!_DataFocusMethod.isPureNumber(theMeasureValue)) return false;\n      translateDataLevel.forEach(function (dataLevel, index) {\n        // 如果是展开的属性列，则需要获取当前属性列中所有属性值的值的总和\n        if (dataLevel.type === 'attribute' && rowData[dataLevel.idx] !== undefined) {\n          let theAttrValue = rowData[dataLevel.idx];\n          let theAttrHeader = tableData.headers[dataLevel.idx];\n\n          // 展开父列匹配的数值\n          let theMatchedParent = translateDataLevel.filter(function (parentDataLevel, parentIndex) {\n            if (parentIndex > 0 && parentIndex < index) {\n              return parentDataLevel.collapseFilter !== undefined && parentDataLevel.collapseFilter === rowData[parentDataLevel.idx];\n            } else {\n              return false;\n            }\n          });\n          // 如果有父元素的过滤\n          if (index >= 2 && theMatchedParent && theMatchedParent.length === index - 1) {\n            if (dataLevel.datas.valueObj[theAttrValue] === undefined) {\n              dataLevel.datas.displayName.push(theAttrValue);\n              dataLevel.datas.valueObj[theAttrValue] = {\n                value: 0,\n                translateName: _DataFocusMethod.formatTextData(theAttrValue, theAttrHeader),\n                rowData: []\n              };\n              dataLevel.datas.valueObj[theAttrValue].value = theMeasureValue;\n              // 生成每个节点最新的rowData:  属性列拿最近的一条数据的值，数值列拿累加值【 主要用于悬浮文本 】\n              dataLevel.datas.valueObj[theAttrValue].rowData = self.calculateNewRowData(tableData.headers, rowData, dataLevel.datas.valueObj[theAttrValue].rowData);\n            } else {\n              if (dataLevel.datas.valueObj[theAttrValue] === undefined) dataLevel.datas.valueObj[theAttrValue] = {\n                value: 0,\n                translateName: _DataFocusMethod.formatTextData(theAttrValue, theAttrHeader),\n                rowData: []\n              };\n              dataLevel.datas.valueObj[theAttrValue].value += theMeasureValue;\n              // 生成每个节点最新的rowData:  属性列拿最近的一条数据的值，数值列拿累加值【 主要用于悬浮文本 】\n              dataLevel.datas.valueObj[theAttrValue].rowData = self.calculateNewRowData(tableData.headers, rowData, dataLevel.datas.valueObj[theAttrValue].rowData);\n            }\n          }\n          // 如果没有父元素的过滤, 前两个级别都是没有父元素过滤的\n          else if (index < 2) {\n            if (dataLevel.datas.valueObj[theAttrValue] === undefined) {\n              dataLevel.datas.displayName.push(theAttrValue);\n              dataLevel.datas.valueObj[theAttrValue] = {\n                value: 0,\n                translateName: _DataFocusMethod.formatTextData(theAttrValue, theAttrHeader),\n                rowData: []\n              };\n              dataLevel.datas.valueObj[theAttrValue].value = theMeasureValue;\n              // 生成每个节点最新的rowData:  属性列拿最近的一条数据的值，数值列拿累加值【 主要用于悬浮文本 】\n              dataLevel.datas.valueObj[theAttrValue].rowData = self.calculateNewRowData(tableData.headers, rowData, dataLevel.datas.valueObj[theAttrValue].rowData);\n            } else {\n              if (dataLevel.datas.valueObj[theAttrValue] === undefined) dataLevel.datas.valueObj[theAttrValue] = {\n                value: 0,\n                translateName: _DataFocusMethod.formatTextData(theAttrValue, theAttrHeader),\n                rowData: []\n              };\n              dataLevel.datas.valueObj[theAttrValue].value += theMeasureValue;\n              // 生成每个节点最新的rowData:  属性列拿最近的一条数据的值，数值列拿累加值【 主要用于悬浮文本 】\n              dataLevel.datas.valueObj[theAttrValue].rowData = self.calculateNewRowData(tableData.headers, rowData, dataLevel.datas.valueObj[theAttrValue].rowData);\n            }\n          }\n        }\n        // 数值列\n        else if (dataLevel.type === 'measure') {\n          dataLevel.datas.value += theMeasureValue;\n          dataLevel.datas.rowData = self.calculateNewRowData(tableData.headers, rowData, dataLevel.datas.rowData);\n        }\n      });\n    });\n    // 获取各个层级的数据的最大值最小值[ 如果有层级找不到上层展开的列中值，则展开失效 ]\n    let prevCollapseIndex = 0,\n      theRootValue = 0;\n    translateDataLevel && translateDataLevel.forEach(function (dataLevel, index) {\n      if (dataLevel.type === 'attribute') {\n        let min = Infinity,\n          max = -Infinity,\n          total = 0,\n          dataList = [];\n        dataLevel.datas.displayName.forEach(function (theName) {\n          let theNodeData = dataLevel.datas.valueObj[theName];\n          if (!theNodeData) return false;\n          let theValue = theNodeData.value;\n          min = Math.min(theValue, min);\n          max = Math.max(theValue, max);\n          total += theValue;\n          dataList.push({\n            name: theName,\n            value: theValue,\n            translateName: theNodeData.translateName,\n            rowData: theNodeData.rowData\n          });\n        });\n        dataList && dataList.sort(function (a, b) {\n          return b.value - a.value;\n        });\n        dataLevel.start = 0;\n        dataLevel.end = dataList.length;\n        dataLevel.steps = dataList.length;\n        dataLevel.min = min;\n        dataLevel.max = max;\n        dataLevel.total = total;\n        dataLevel.root = theRootValue;\n        dataLevel.dataList = dataList;\n        // 如果后面的属性列有父展开列中值，则找到指定列中值的位置[第一列是数值列，后面都是属性列]\n        if (index > 0 && dataLevel.collapseFilter !== undefined) {\n          let theCollapseIndex = -1;\n          for (let i = 0; dataList && i < dataList.length; i++) {\n            let theData = dataList[i];\n            if (theData.name === dataLevel.collapseFilter) {\n              theCollapseIndex = i;\n              break;\n            }\n          }\n          dataLevel.collapseIndex = theCollapseIndex;\n        } else {\n          // 当前列没有展开，则后面的dataLevel数据可以清楚了\n          dataLevel.collapseIndex = -1;\n        }\n      } else {\n        theRootValue = dataLevel.datas.value;\n        dataLevel.min = dataLevel.datas.value;\n        dataLevel.max = dataLevel.datas.value;\n        dataLevel.total = dataLevel.datas.value;\n        dataLevel.root = dataLevel.datas.value;\n        dataLevel.dataList = [{\n          name: dataLevel.datas.displayName,\n          value: dataLevel.datas.value,\n          rowData: dataLevel.datas.rowData\n        }];\n        dataLevel.collapseIndex = translateDataLevel.length > 0 ? 0 : -1;\n      }\n\n      // 如果展开了，但是下一层及没有找到对对应的展开值，则为空，不清除展开列的信息\n      if (prevCollapseIndex >= 0) {\n        prevCollapseIndex = dataLevel.collapseIndex;\n      }\n    });\n    return translateDataLevel || [];\n  },\n  // 计算每个节点新的行数据\n  calculateNewRowData: function (headers, originalRowData, newRowData) {\n    if (!headers || !headers.length || !originalRowData) return false;\n    let theNewData = newRowData || [];\n    headers.forEach(function (header) {\n      let theCellData = originalRowData[header.idx];\n\n      // 如果当前列是数值列，则计算累加的结果\n      if (header.columnClassify === 'number' && (header.col_type || header.colType) === _DataFocusMethod._MEASURE) {\n        if (theNewData[header.idx] === undefined) theNewData[header.idx] = 0;\n        if (_DataFocusMethod.isPureNumber(theCellData)) theNewData[header.idx] += theCellData;\n      }\n      // 如果是属性列，则拿第一个非空的数据\n      else if (theNewData[header.idx] === undefined && theCellData) {\n        theNewData[header.idx] = theCellData;\n      }\n    });\n    return theNewData;\n  }\n});\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/decompositionTree/translateDecompositionTreeData.js?");

/***/ })

}]);
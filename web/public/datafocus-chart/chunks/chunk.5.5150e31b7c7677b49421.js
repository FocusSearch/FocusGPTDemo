(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "../src-v5/assets/js/charts.components/ReferenceLineComponent.js":
/*!***********************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/ReferenceLineComponent.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3.js */ \"../src-v5/assets/js/d3.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n// 画目标线 或 标度【参考线】的组件 [ 即： 用户配置了目标值 或 标度后的参考线 或 参考区域 ]\n\n\n\nlet ReferenceLineComponent = {\n  /**\r\n   * 翻译标度[参考]线的配置值，转换为固定的结构，共方法调用: 此处需要兼容帕累托图中的累加百分比的情况\r\n   * @param  referenceConfig    -   参考线配置值对象\r\n   * @param  options\r\n   *          {\r\n   *              statistics      -   为标度提供的统计信息\r\n   *          }\r\n   * */\n  translateReferenceConfigure: function (referenceConfig, options) {\n    if (!referenceConfig || !referenceConfig.length) return false;\n    options = options || {};\n    let theAxisList = options.axisList;\n    let theStatistics = options.statistics;\n    let theConfigArray = [];\n    referenceConfig && referenceConfig.forEach(function (theConfigItem) {\n      let divisionText = '',\n        divisionValue,\n        divisionTopValue,\n        divisionBottomValue,\n        divisionLineWidth = 1,\n        divisionLineColor,\n        divisionLineStyle,\n        divisionRangeBackColor,\n        divisionRangeTransparent = 30,\n        divisionRangeBorderColor,\n        divisionRangeBorderStyle,\n        divisionStatistics = null;\n\n      // option_scale_config_column值的格式是 -y-axis-2-销售数量 类似\n      let theDivisionAxisObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n        return op.title === 'option_scale_config_column';\n      });\n      if (theDivisionAxisObj && theDivisionAxisObj.value) {\n        // 只有标度值选择其他数据列,才可以使用其他数据列的统计信息 ; 选择defined_cumulative是帕累托图自定义的累加百分比, 只允许用户输入数值\n        if (theDivisionAxisObj.value !== 'defined_cumulative') {\n          let theAxisIdx = theDivisionAxisObj.value.split('-')[3];\n          let theAxis = options.axisList && options.axisList.find(function (axis) {\n            return axis.idx + '' === theAxisIdx;\n          });\n          if (theAxis) {\n            divisionStatistics = theAxis.statistics;\n          }\n        }\n      }\n      let divisionTypeObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n        return op.title === 'option_scale_config_type';\n      });\n      // 默认是直线处理方式\n      let divisionType = divisionTypeObj && divisionTypeObj.value || 'options_scale_config_type_line';\n      // 如果默认的标度类型，则不需要画标度元素\n      if (!divisionType || divisionType === 'option_default_value') return false;\n      switch (divisionType) {\n        case \"options_scale_config_type_line\":\n          // 直线类型\n          if (theDivisionAxisObj && theDivisionAxisObj.value === 'defined_cumulative') {\n            // 累加百分比的标度线值配置\n            let divisionValueObj = theConfigItem.options && theConfigItem.options.filter(function (op) {\n              return op.title === 'option_scale_config_value_input';\n            });\n            divisionValue = divisionValueObj && divisionValueObj[divisionValueObj.length - 1] && divisionValueObj[divisionValueObj.length - 1].value || '';\n\n            // 如果输入是大于1 的,则转换为百分比小数\n            if (_DataFocusMethod.isPureNumber(divisionValue)) {\n              let theValue = parseFloat(divisionValue);\n              if (theValue > 1) {\n                divisionValue = theValue / 100;\n              }\n            }\n          } else {\n            // 普通数值列的标度线值配置\n            let divisionValueTypeObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n              return op.title === 'option_scale_config_value_type';\n            });\n            let divisionValueObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n              return op.title === 'option_scale_config_value_input';\n            });\n            switch (divisionValueTypeObj && divisionValueTypeObj.value || '') {\n              case \"options_config_value_input\":\n                // 手动输入\n                divisionValue = divisionValueObj && divisionValueObj.value || '';\n                break;\n              case \"options_config_value_max\":\n                divisionValue = divisionStatistics ? divisionStatistics.max : theStatistics && theStatistics.max;\n                divisionText = options.language !== 'english' ? '最大值' : 'Max';\n                break;\n              case \"options_config_value_min\":\n                divisionValue = divisionStatistics ? divisionStatistics.min : theStatistics && theStatistics.min;\n                divisionText = options.language !== 'english' ? '最小值' : 'Min';\n                break;\n              case \"options_config_value_std\":\n                divisionValue = divisionStatistics ? divisionStatistics['standard deviation'] : theStatistics && theStatistics['standard deviation'];\n                divisionText = options.language !== 'english' ? '标准差' : 'Std';\n                break;\n              case \"options_config_value_avg\":\n              default:\n                divisionValue = divisionStatistics ? divisionStatistics.average : theStatistics && theStatistics.average;\n                divisionText = options.language !== 'english' ? '平均值' : 'Avg';\n                break;\n            }\n          }\n          if (!_DataFocusMethod.isPureNumber(divisionValue)) return false;\n          divisionValue = parseFloat(divisionValue);\n\n          // 颜色\n          let divisionColorObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_value_color';\n          });\n          divisionLineColor = divisionColorObj && divisionColorObj.value;\n\n          // 文本\n          let divisionTextObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_text';\n          });\n          if (divisionTextObj && divisionTextObj.value) divisionText = divisionTextObj.value;\n\n          // 粗细\n          let divisionThicknessObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_value_thickness';\n          });\n          if (divisionThicknessObj && _DataFocusMethod.isPureNumber(divisionThicknessObj.value)) {\n            divisionLineWidth = parseFloat(divisionThicknessObj.value);\n          }\n\n          // 虚实\n          let divisionStyleObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_value_style';\n          });\n          switch (divisionStyleObj && divisionStyleObj.value) {\n            case \"option_line_style_dashed\":\n              divisionLineStyle = 'dashed';\n              break;\n          }\n          theConfigArray.push({\n            type: 'line',\n            valueColumn: theDivisionAxisObj && theDivisionAxisObj.value,\n            value: divisionValue,\n            lineColor: divisionLineColor,\n            lineThickness: divisionLineWidth,\n            lineStyle: divisionLineStyle || 'solid',\n            hoverText: divisionText\n          });\n          break;\n        case \"options_scale_config_type_range\":\n          // 区间类型\n          if (theDivisionAxisObj && theDivisionAxisObj.value === 'defined_cumulative') {\n            // 累加百分比的标度线值配置\n            let divisionTopValueObj = theConfigItem.options && theConfigItem.options.filter(function (op) {\n              return op.title === 'option_scale_config_top_range_input';\n            });\n            divisionTopValue = divisionTopValueObj && divisionTopValueObj[divisionTopValueObj.length - 1] && divisionTopValueObj[divisionTopValueObj.length - 1].value || '';\n            if (!_DataFocusMethod.isPureNumber(divisionTopValue)) return false;\n\n            // 如果输入是大于1 的,则转换为百分比小数\n            if (_DataFocusMethod.isPureNumber(divisionTopValue)) {\n              let theValue = parseFloat(divisionTopValue);\n              if (theValue > 1) {\n                divisionTopValue = theValue / 100;\n              }\n            }\n            let divisionBottomValueObj = theConfigItem.options && theConfigItem.options.filter(function (op) {\n              return op.title === 'option_scale_config_bottom_range_input';\n            });\n            divisionBottomValue = divisionBottomValueObj && divisionBottomValueObj[divisionBottomValueObj.length - 1] && divisionBottomValueObj[divisionBottomValueObj.length - 1].value || '';\n            if (!_DataFocusMethod.isPureNumber(divisionBottomValue)) return false;\n\n            // 如果输入是大于1 的,则转换为百分比小数\n            if (_DataFocusMethod.isPureNumber(divisionBottomValue)) {\n              let theValue = parseFloat(divisionBottomValue);\n              if (theValue > 1) {\n                divisionBottomValue = theValue / 100;\n              }\n            }\n          } else {\n            let divisionTopValueTypeObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n              return op.title === 'option_scale_config_top_range_type';\n            });\n            let divisionTopValueObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n              return op.title === 'option_scale_config_top_range_input';\n            });\n            switch (divisionTopValueTypeObj && divisionTopValueTypeObj.value || '') {\n              case \"options_config_value_max\":\n                divisionTopValue = theStatistics && theStatistics.max;\n                divisionText = options.language !== 'english' ? '最大值' : 'Max';\n                break;\n              case \"options_config_value_min\":\n                divisionTopValue = theStatistics && theStatistics.min;\n                divisionText = options.language !== 'english' ? '最小值' : 'Min';\n                break;\n              case \"options_config_value_std\":\n                divisionTopValue = theStatistics && theStatistics['standard deviation'];\n                divisionText = options.language !== 'english' ? '标准差' : 'Std';\n                break;\n              case \"options_config_value_avg\":\n                divisionTopValue = theStatistics && theStatistics.average;\n                divisionText = options.language !== 'english' ? '平均值' : 'Avg';\n                break;\n              case \"options_config_value_input\":\n              default:\n                divisionTopValue = divisionTopValueObj && divisionTopValueObj.value || '';\n                break;\n            }\n            if (!_DataFocusMethod.isPureNumber(divisionTopValue)) return false;\n            divisionTopValue = parseFloat(divisionTopValue);\n\n            // 区间下限值【  默认为用户输入的值 】\n            let divisionBottomValueTypeObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n              return op.title === 'option_scale_config_bottom_range_type';\n            });\n            let divisionBottomValueObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n              return op.title === 'option_scale_config_bottom_range_input';\n            });\n            switch (divisionBottomValueTypeObj && divisionBottomValueTypeObj.value || '') {\n              case \"options_config_value_max\":\n                divisionBottomValue = divisionStatistics ? divisionStatistics.max : theStatistics && theStatistics.max;\n                if (divisionText) {\n                  divisionText += '-';\n                }\n                divisionText += options.language !== 'english' ? '最大值' : 'Max';\n                break;\n              case \"options_config_value_min\":\n                divisionBottomValue = divisionStatistics ? divisionStatistics.min : theStatistics && theStatistics.min;\n                if (divisionText) {\n                  divisionText += '-';\n                }\n                divisionText += options.language !== 'english' ? '最小值' : 'Min';\n                break;\n              case \"options_config_value_std\":\n                divisionBottomValue = divisionStatistics ? divisionStatistics['standard deviation'] : theStatistics && theStatistics['standard deviation'];\n                if (divisionText) {\n                  divisionText += '-';\n                }\n                divisionText += options.language !== 'english' ? '标准差' : 'Std';\n                break;\n              case \"options_config_value_avg\":\n                divisionBottomValue = divisionStatistics ? divisionStatistics.average : theStatistics && theStatistics.average;\n                if (divisionText) {\n                  divisionText += '-';\n                }\n                divisionText += options.language !== 'english' ? '平均值' : 'Avg';\n                break;\n              case \"options_config_value_input\":\n              default:\n                divisionBottomValue = divisionBottomValueObj && divisionBottomValueObj.value || '';\n                break;\n            }\n            if (!_DataFocusMethod.isPureNumber(divisionBottomValue)) return false;\n            divisionBottomValue = parseFloat(divisionBottomValue);\n          }\n\n          // 区间颜色\n          let divisionRangeColorObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_range_color';\n          });\n          divisionRangeBackColor = divisionRangeColorObj && divisionRangeColorObj.value;\n\n          // 文本\n          let divisionRangeTextObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_text';\n          });\n          if (divisionRangeTextObj && divisionRangeTextObj.value) {\n            divisionText = divisionRangeTextObj.value;\n          }\n\n          // 区间透明度\n          let divisionRangeTransObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_range_color_transparent';\n          });\n          if (divisionRangeTransObj && _DataFocusMethod.isPureNumber(divisionRangeTransObj.value)) {\n            divisionRangeTransparent = divisionRangeTransObj && divisionRangeTransObj.value;\n          }\n\n          // 区间边框颜色\n          let divisionRangeBorderColorObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_range_edge_color';\n          });\n          divisionRangeBorderColor = divisionRangeBorderColorObj && divisionRangeBorderColorObj.value;\n\n          // 区间边框虚实\n          let divisionRangeBorderDashedObj = theConfigItem.options && theConfigItem.options.find(function (op) {\n            return op.title === 'option_scale_config_range_edge_style';\n          });\n          divisionRangeBorderStyle = divisionRangeBorderDashedObj && divisionRangeBorderDashedObj.value === 'option_line_style_dashed' ? 'dashed' : '';\n          theConfigArray.push({\n            type: 'range',\n            valueColumn: theDivisionAxisObj && theDivisionAxisObj.value,\n            topValue: Math.min(divisionTopValue, divisionBottomValue),\n            bottomValue: Math.max(divisionTopValue, divisionBottomValue),\n            rangeBackground: divisionRangeBackColor,\n            rangeTransparent: divisionRangeTransparent,\n            rangeBorder: divisionRangeBorderColor,\n            rangeBorderStyle: divisionRangeBorderStyle || 'solid',\n            hoverText: divisionText\n          });\n          break;\n      }\n    });\n    return theConfigArray;\n  },\n  /**\r\n   *  画水平方向的目标线\r\n   *  @param options\r\n   *          {\r\n   *              svgContainer    -   画图容器\r\n   *              position        -   目标线的位置 left: 左侧 ； right: 右侧\r\n   *              translateLeft\r\n   *              translateTop\r\n   *              lineWidth\r\n   *              goalStyleColor\r\n   *          }\r\n   * **/\n  drawHorizontalGoalLine: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.lineWidth) return false;\n    let thePosition = options.position || 'left';\n    let theGoalContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer).append(\"g\").attr(\"class\", \"goal-line horizontal-goal-line\").attr(\"transform\", \"translate(\" + options.translateLeft + \" , \" + options.translateTop + \")\");\n    theGoalContainer.append(\"line\").attr(\"class\", \"goal-line\").attr('x1', '0').attr(\"y1\", '0').attr('x2', options.lineWidth).attr('y2', '0').attr('stroke-width', '1').attr(\"stroke\", options.goalStyleColor || \"#eea68d\");\n    let thePathData = \"M0 -8 L0 8 L10 0 Z\";\n    if (thePosition === 'right') {\n      thePathData = \"M0 -8 L0 8 L-10 0 Z\";\n    }\n    theGoalContainer.append('path').attr(\"class\", \"goal-marker\").attr(\"d\", thePathData).attr(\"fill\", \"#eea68d\").attr('stroke-width', '1').attr(\"stroke\", options.goalStyleColor || \"#eea68d\").attr(\"transform\", \"translate(\" + (thePosition === 'right' ? options.lineWidth + 8 : '-8') + \" , 0)\").style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n      if (options.hoverText) {\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, options.hoverText);\n      }\n    }).on(\"touchstart\", function () {\n      if (options.hoverText) {\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, options.hoverText);\n      }\n    }).on(\"mouseout\", function () {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n    }).on(\"touchend\", function () {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n    });\n  },\n  /**\r\n   *  画垂直方向的目标线\r\n   *  @param options\r\n   *          {\r\n   *              svgContainer    -   画图容器\r\n   *              position        -   目标线的位置 top: 顶部 ； bottom: 底部\r\n   *              translateLeft\r\n   *              translateTop\r\n   *              lineWidth\r\n   *          }\r\n   * **/\n  drawVerticalGoalLine: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.lineHeight) return false;\n    let thePosition = options.position || 'bottom';\n    let theGoalContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer).append(\"g\").attr(\"class\", \"goal-line vertical-goal-line\").attr(\"transform\", \"translate(\" + options.translateLeft + \" , \" + options.translateTop + \")\");\n    theGoalContainer.append(\"line\").attr(\"class\", \"goal-line\").attr('x1', '0').attr(\"y1\", '0').attr('x2', '0').attr('y2', options.lineHeight).attr('stroke-width', '1').attr(\"stroke\", options.goalStyleColor || \"#eea68d\");\n    let thePathData = \"M-8 2 L8 2 L0 -8 Z\";\n    if (thePosition === 'top') {\n      thePathData = \"M-8 0 L8 0 L0 10 Z\";\n    }\n    theGoalContainer.append('path').attr(\"class\", \"goal-marker\").attr(\"d\", thePathData).attr(\"fill\", \"#eea68d\").attr('stroke-width', '1').attr(\"stroke\", options.goalStyleColor || \"#eea68d\").attr(\"transform\", \"translate(0 , \" + (thePosition === 'bottom' ? options.lineHeight + 8 : '-8') + \")\").style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n      if (options.hoverText) {\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, options.hoverText);\n      }\n    }).on(\"touchstart\", function () {\n      if (options.hoverText) {\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, options.hoverText);\n      }\n    }).on(\"mouseout\", function () {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n    }).on(\"touchend\", function () {\n      _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n    });\n  },\n  /**\r\n   * 画水平方向的标度线: 此处兼容了帕累托图的累加百分比的配置\r\n   * @param options\r\n   *          {\r\n   *              language\r\n   *              referenceConfigure      -   标度配置值\r\n   *              hardDivisionFlag: true ,  // 强制画标度\r\n   *\r\n   *              svgContainer            -   画图容器\r\n   *              measureAxis             -   数值轴的标尺信息，用户定位\r\n   *              translateLeft           -   标度区域的左侧偏移\r\n   *              translateTop            -   标度区域的顶部偏移\r\n   *              rangeWidth              -   标度元素的宽度\r\n   *              defaultTitleText        -   默认标度信息的标题\r\n   *          }\r\n   * **/\n  drawHorizontalDivisionRange: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.measureAxis) return false;\n    if (!options.measureAxis.firstMeasure) return false;\n    // 如果有左右两个Y轴，则不画标度 ; 可以通过参数配置强制画标度\n    if (options.measureAxis.firstMeasure && options.measureAxis.secondMeasure && !options.hardDivisionFlag) return false;\n    let self = this,\n      firstMeasure = options.measureAxis.firstMeasure,\n      theFirstAxisList = firstMeasure.measureAxis && firstMeasure.measureAxis.axisList;\n    if (!theFirstAxisList || !theFirstAxisList[0] || !firstMeasure) return false;\n\n    // 默认情况下是使用第一个Y轴的统计信息，如果有多个Y轴，则需要在配置中指定\n    let theReferenceConfigArray = self.translateReferenceConfigure(options.referenceConfigure, {\n      language: options.language,\n      axisList: theFirstAxisList,\n      statistics: theFirstAxisList[0].statistics\n    });\n    if (!theReferenceConfigArray || !theReferenceConfigArray.length) return false;\n    let theScaleFunc = options.measureAxis.firstMeasureScaleFunc,\n      theScaleTicks = firstMeasure && firstMeasure.measureTickScale,\n      theReferenceContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer).append(\"g\").attr(\"class\", \"reference-container horizontal-reference-container\").attr(\"transform\", \"translate(\" + options.translateLeft + \" , \" + options.translateTop + \")\");\n    // 如果标度列配置的是自定义的累加百分比,则需要使用右Y轴处理标度\n    if (theReferenceConfigArray[0].valueColumn === 'defined_cumulative') {\n      firstMeasure = options.measureAxis.secondMeasure;\n      theScaleFunc = options.measureAxis.secondMeasureScaleFunc;\n      theScaleTicks = firstMeasure && firstMeasure.measureTickScale;\n    }\n    if (!theScaleFunc) return false;\n    theReferenceConfigArray && theReferenceConfigArray.forEach(function (theReference) {\n      if (theReference.type === 'line') {\n        let theItemContainer = theReferenceContainer.append('g').attr(\"class\", \"reference-item\").attr(\"transform\", \"translate(0 , \" + theScaleFunc(theReference.value) + \")\");\n        theItemContainer.append('line').attr(\"class\", 'division-line').attr({\n          'x1': '0',\n          'y1': '0',\n          'x2': options.rangeWidth,\n          'y2': '0'\n        }).attr('stroke-width', theReference.lineThickness).attr(\"stroke\", theReference.lineColor || \"#D62728\").attr(\"stroke-dasharray\", theReference.lineStyle === \"dashed\" ? \"8,8\" : \"0\");\n        theItemContainer.append('path').attr(\"class\", \"goal-marker\").attr(\"d\", \"M0 -6 L0 6 L10 0 Z\").style(\"fill\", theReference.lineColor || \"#D62728\").attr('stroke-width', '1').attr(\"stroke\", theReference.lineColor || \"#D62728\").attr(\"transform\", \"translate(-8 , 0)\").style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.value, firstMeasure.yScaleFormat));\n          }\n        }).on(\"touchstart\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.value, firstMeasure.yScaleFormat));\n          }\n        }).on(\"mouseout\", function () {\n          if (options.hoverText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n          }\n        }).on(\"touchend\", function () {\n          if (options.hoverText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n          }\n        });\n      } else if (theReference.type === 'range') {\n        // 范围需要在坐标轴的起止范围内\n        let theMaxValue = Math.max(theReference.topValue, theReference.bottomValue),\n          theMinValue = Math.min(theReference.topValue, theReference.bottomValue);\n        // 如果配置的标度范围不在刻度的起始范围，则不显示\n        if (theScaleTicks && _DataFocusMethod.isPureNumber(theScaleTicks.min + theScaleTicks.max)) {\n          if (theScaleTicks.min > theMaxValue || theScaleTicks.max < theMinValue) return false;\n          theMaxValue = Math.min(theMaxValue, theScaleTicks.max);\n          theMinValue = Math.max(theMinValue, theScaleTicks.min);\n        }\n        let theTopValue = theScaleFunc(theMaxValue),\n          theBottomValue = theScaleFunc(theMinValue);\n        let theItemContainer = theReferenceContainer.append('g').attr(\"class\", \"reference-item\").attr(\"transform\", \"translate(0 , \" + Math.min(theTopValue, theBottomValue) + \")\");\n        theItemContainer.append('rect').attr(\"class\", \"goal-marker\").attr(\"x\", 1).attr(\"y\", 0).attr(\"width\", options.rangeWidth - 2).attr(\"height\", Math.abs(theTopValue - theBottomValue)).style(\"fill\", theReference.rangeBackground || \"#D62728\").style(\"fill-opacity\", parseFloat(theReference.rangeTransparent) / 100).attr('stroke-width', '1').attr(\"stroke\", theReference.rangeBorder || \"#D62728\").attr(\"stroke-dasharray\", theReference.rangeBorderStyle === \"dashed\" ? \"8,8\" : \"0\").style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.topValue, firstMeasure.yScaleFormat) + ' ~ ' + _DataFocusMethod.formatData(theReference.bottomValue, firstMeasure.yScaleFormat));\n          }\n        }).on(\"touchstart\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.topValue, firstMeasure.yScaleFormat) + ' ~ ' + _DataFocusMethod.formatData(theReference.bottomValue, firstMeasure.yScaleFormat));\n          }\n        }).on(\"mouseout\", function () {\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n        }).on(\"touchend\", function () {\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n        });\n      }\n    });\n  },\n  /**\r\n   * 画垂直方向的标度线\r\n   * @param options\r\n   *          {\r\n   *              referenceConfigure      -   标度配置值\r\n   *\r\n   *              svgContainer            -   画图容器\r\n   *              measureAxis             -   数值轴的标尺信息，用户定位\r\n   *              translateLeft           -   标度区域的左侧偏移\r\n   *              translateTop            -   标度区域的顶部偏移\r\n   *              rangeWidth              -   标度元素的宽度\r\n   *              defaultTitleText        -   默认标度信息的标题\r\n   *          }\r\n   *\r\n   * **/\n  drawVerticalDivisionRange: function (options) {\n    options = options || {};\n    if (!options.svgContainer || !options.measureAxis) return false;\n    if (!options.measureAxis.firstMeasure) return false;\n    if (options.measureAxis.firstMeasure && options.measureAxis.secondMeasure) return false;\n    let self = this,\n      firstMeasure = options.measureAxis.firstMeasure,\n      theFirstAxisList = firstMeasure.measureAxis && firstMeasure.measureAxis.axisList;\n    if (!theFirstAxisList || !theFirstAxisList[0]) return false;\n\n    // 默认情况下是使用第一个Y轴的统计信息，如果有多个Y轴，则需要在配置中指定\n    let theReferenceConfigArray = self.translateReferenceConfigure(options.referenceConfigure, {\n      language: options.language,\n      axisList: theFirstAxisList,\n      statistics: theFirstAxisList[0].statistics\n    });\n    if (!theReferenceConfigArray || !theReferenceConfigArray.length) return false;\n    let theScaleFunc = options.measureAxis.firstMeasureScaleFunc,\n      theScaleTicks = firstMeasure && firstMeasure.measureTickScale,\n      theReferenceContainer = _pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(options.svgContainer).append(\"g\").attr(\"class\", \"reference-container horizontal-reference-container\").attr(\"transform\", \"translate(\" + options.translateLeft + \" , \" + options.translateTop + \")\");\n    theReferenceConfigArray && theReferenceConfigArray.forEach(function (theReference) {\n      if (theReference.type === 'line') {\n        let theItemContainer = theReferenceContainer.append('g').attr(\"class\", \"reference-item\").attr(\"transform\", \"translate(\" + theScaleFunc(theReference.value) + \" , 0)\");\n        theItemContainer.append('line').attr(\"class\", 'division-line').attr({\n          'x1': '0',\n          'y1': '0',\n          'x2': '0',\n          'y2': options.rangeHeight\n        }).attr('stroke-width', theReference.lineThickness).attr(\"stroke\", theReference.lineColor || \"#D62728\").attr(\"stroke-dasharray\", theReference.lineStyle === \"dashed\" ? \"8,8\" : \"0\");\n        theItemContainer.append('path').attr(\"class\", \"goal-marker\").attr(\"d\", options.position === 'bottom' ? \"M0 -8 L-6 2 L6 2 Z\" : \"M0 0 L-5 -6 L5 -6 Z\").style(\"fill\", theReference.lineColor || \"#D62728\").attr('stroke-width', '1').attr(\"stroke\", theReference.lineColor || \"#D62728\").attr(\"transform\", options.position === 'bottom' ? \"translate(0,\" + (options.rangeHeight + 8) + \")\" : \"translate(-8 , 0)\").style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.value, firstMeasure.yScaleFormat));\n          }\n        }).on(\"touchstart\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.value, firstMeasure.yScaleFormat));\n          }\n        }).on(\"mouseout\", function () {\n          if (options.hoverText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n          }\n        }).on(\"touchend\", function () {\n          if (options.hoverText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n          }\n        });\n      } else if (theReference.type === 'range') {\n        // 范围需要在坐标轴的起止范围内\n        let theMaxValue = Math.max(theReference.topValue, theReference.bottomValue),\n          theMinValue = Math.min(theReference.topValue, theReference.bottomValue);\n        // 如果配置的标度范围不在刻度的起始范围，则不显示\n        if (theScaleTicks && _DataFocusMethod.isPureNumber(theScaleTicks.min + theScaleTicks.max)) {\n          if (theScaleTicks.min > theMaxValue || theScaleTicks.max < theMinValue) return false;\n          theMaxValue = Math.min(theMaxValue, theScaleTicks.max);\n          theMinValue = Math.max(theMinValue, theScaleTicks.min);\n        }\n        let theTopValue = theScaleFunc(theMaxValue),\n          theBottomValue = theScaleFunc(theMinValue);\n        let theItemContainer = theReferenceContainer.append('g').attr(\"class\", \"reference-item\").attr(\"transform\", \"translate(\" + Math.min(theTopValue, theBottomValue) + \", 0)\");\n        theItemContainer.append('rect').attr(\"class\", \"goal-marker\").attr(\"x\", 1).attr(\"y\", 0).attr(\"height\", options.rangeHeight).attr(\"width\", Math.abs(theTopValue - theBottomValue)).style(\"fill\", theReference.rangeBackground || \"#D62728\").style(\"fill-opacity\", parseFloat(theReference.rangeTransparent) / 100 || 0.5).attr('stroke-width', '1').attr(\"stroke\", theReference.rangeBorder || \"#D62728\").attr(\"stroke-dasharray\", theReference.rangeBorderStyle === \"dashed\" ? \"8,8\" : \"0\").style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.topValue, firstMeasure.yScaleFormat) + ' ~ ' + _DataFocusMethod.formatData(theReference.bottomValue, firstMeasure.yScaleFormat));\n          }\n        }).on(\"touchstart\", function () {\n          let theText = theReference.hoverText || options.defaultTitleText;\n          if (theText) {\n            _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(_pc_assets_js_d3_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].event, theText + ': ' + _DataFocusMethod.formatData(theReference.topValue, firstMeasure.yScaleFormat) + ' ~ ' + _DataFocusMethod.formatData(theReference.bottomValue, firstMeasure.yScaleFormat));\n          }\n        }).on(\"mouseout\", function () {\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n        }).on(\"touchend\", function () {\n          _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n        });\n      }\n    });\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReferenceLineComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/ReferenceLineComponent.js?");

/***/ })

}]);
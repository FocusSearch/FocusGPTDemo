(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[34],{

/***/ "../src-v5/assets/js/charts.system.senior/extendSankey.js":
/*!****************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.senior/extendSankey.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _charts_plugin_animationTimeSequenceFrame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../charts.plugin/animationTimeSequenceFrame */ \"../src-v5/assets/js/charts.plugin/animationTimeSequenceFrame.js\");\n/* harmony import */ var _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/d3-sankey.js */ \"../src-v5/assets/js/d3-sankey.js\");\n/* harmony import */ var _pc_assets_js_sankeyChart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/sankeyChart.js */ \"../src-v5/assets/js/sankeyChart.js\");\n\n\n\n\n/** 相关图画图组件 **/\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  chartType: 'extendSankey',\n  //  图形名 [ * 必填项 ]\n  chartDisplayNameKey: \"chart-name-title\",\n  //  图形名称中英文Key [ * 必填项 ]\n  chartDescriptionKey: \"chart-description-title\",\n  //  图形描述中英文Key [ * 必填项 ]\n\n  // 搜索数据是聚合数据且至少一个属性列且至少一个数值列\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    if (searchResultStatistic && searchResultStatistic.aggregatedFlag && searchResultStatistic.attributeColumns) {\n      if (searchResultStatistic.attributeColumns.length === 3) {\n        let maxDistinct = searchResultStatistic.attributeColumns.find(c => c.statistics.count_distinct <= 10 && c.statistics.count_distinct >= 2);\n        if (maxDistinct) {\n          satisfiedFlag = true;\n        }\n      }\n    }\n    return satisfiedFlag;\n  },\n  // 图形配置元素 [ * 必填项 ]\n  needAxis: {\n    columns: {\n      i18nKey: \"chart-column-axis-title\",\n      required: true,\n      maxDistinct: 10,\n      minDistinct: 2\n    },\n    rows: {\n      i18nKey: \"chart-row-axis-title\",\n      required: true,\n      minDistinct: 2\n    }\n  },\n  /**\n   * 判断当前图形的Axis配置是否合法 [ * 必填项 ]\n   * 例：X轴不允许为空，Y轴不允许为空，X轴不允许与图例列相同\n   * @params [Object]theAxisConfig      -   当前用户手动配置的规则\n   *          {\n   *              xAxis: [{\n   *                  index\n   *                  columnId\n   *                  type\n   *              }] ,\n   *              yAxis: [{\n   *                  index\n   *                  columnId\n   *              }] ,\n   *              legend: [{\n   *                  index\n   *                  columnId\n   *              }] ,\n   *\n   *              // 搜素数据的统计信息\n   *              searchResultStatistic: {\n   *                  aggregatedFlag  搜索数据是否聚合的标志\n   *\n   *                  measureColumns    数值列数量\n   *                  attributeColumns  属性列数量\n   *                  legendColumns     能作为图例的属性列数量（distinct_count < 50 的列）\n   *                  dateColumns       日期列数量\n   *                  lonColumns        经度列数量\n   *                  latColumns        纬度列数量\n   *                  queryResultCount    查询数据结果条目\n   *                  regionColumns        地理列数组（1：国家集合；1.5：国家；2：省集合；2.5：省；3：市集合；3.5：市；4：区集合；4.5：区；0：其他地理列）\n   *              }\n   *          }\n   *\n   * 判断条件：\n   * 1. xAxis不允许为空\n   * 2. yAxis不允许为空\n   * 3. 主Y轴不允许为空\n   * 4. legend只允许一个\n   * 5. legend存在时Y轴只允许一个\n   * 6. legend不允许与xAxis重复\n   *\n   * @return [String]errorKey -   错误提示对应的key;\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let theErrorMsgKey = '';\n    theAxisConfig = theAxisConfig || {};\n    // 行数据与值数据不能为空\n    if (!theAxisConfig.rows || !theAxisConfig.rows.length) {\n      theErrorMsgKey = \"chart-row-value-axis-null\";\n    }\n    if (!theAxisConfig.columns || !theAxisConfig.columns.length) {\n      theErrorMsgKey = \"chart-row-value-axis-null\";\n    }\n\n    // 只能有一个columns\n    if (theAxisConfig.columns.length > 1) {\n      theErrorMsgKey = \"chart-column-value-axis-1\";\n    }\n\n    // 当前图形需要将所有属性列利用起来\n    let searchResultStatistic = theAxisConfig.searchResultStatistic || {};\n    let usedAttributeNum = (theAxisConfig.rows && theAxisConfig.rows.length || 0) + (theAxisConfig.columns && theAxisConfig.columns.length || 0);\n    let dataAttributeNum = searchResultStatistic.attributeColumns && searchResultStatistic.attributeColumns.length || 0;\n    // 不能重复使用同一列\n    if (usedAttributeNum > dataAttributeNum) {\n      theErrorMsgKey = \"chart-attribute-columns-duplicated\";\n    }\n    if (usedAttributeNum < dataAttributeNum) {\n      theErrorMsgKey = \"chart-need-all-attribute-columns\";\n    }\n    // 不能重复使用同一列\n    if (theAxisConfig.columns.length && theAxisConfig.rows) {\n      let columnId = theAxisConfig.columns[0].columnId;\n      let rowIds = theAxisConfig.rows.map(r => r.columnId);\n      if (rowIds.includes(columnId)) {\n        theErrorMsgKey = \"chart-attribute-columns-duplicated\";\n      }\n    }\n    return theErrorMsgKey;\n  },\n  // 当前图形的配置项[ *新增图形必填项 ]\n  chartConfigureList: [\n  //公共配置\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    //主题颜色\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"select\",\n      selection: [\"option_default_value\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"]\n    },\n    //自定义\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    //字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"input\",\n      defaultNumber: 14\n    },\n    // 隐藏图表标题\n    {\n      key: \"hidden_chart_title\",\n      title: \"option_hidden_chart_title\",\n      description: \"option_hidden_chart_title_desc\",\n      type: \"checkbox\",\n      value: true\n    }, {\n      key: \"chart_page_size\",\n      title: \"option_chart_page_size\",\n      description: \"option_chart_page_size_desc\",\n      onlyConfigFlag: true,\n      type: \"input\"\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    // 其他图形的配置数据标签的配置\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      charts: [_DataFocusMethod.chartTypes.extendSankey],\n      description: \"option_label_text_regex_sankey_desc\",\n      type: \"textArea\"\n    }]\n  }, {\n    key: \"category_suspend_text\",\n    title: \"category_suspend_text\",\n    options: [{\n      key: \"suspend_text_regex\",\n      title: \"option_suspend_text_regex\",\n      description: \"option_suspend_text_regex_sankey_desc\",\n      type: \"textArea\"\n    }]\n  }],\n  /**\n   * 使用个人画图方法画图形 [*必填项]\n   * @params [Object]options  -   当前图形的配置\n   *              {\n   *                  container       -   当前画图的DOM元素\n   *                  chartAxis       -   当前图形的Axis配置\n   *                  datas           -   当前画图数据\n   *                  isResize        -   是否是窗口变化引起的画图\n   *                  chartConfigures -   图形配置\n   *                  plugins         -   DataFocus提供的第三方画图库\n   *                      {\n   *                          d3  -   d3的v3版本\n   *                          echarts -   echarts的\n   *                      }\n   *              }\n   * **/\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    let startTime = new Date().getTime();\n    let currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      container = options.container,\n      chartAxis = options.chartAxis,\n      chartDatas = options.datas.columns,\n      curYAxis = options.chartAxis.curColumns;\n    let chartConfig = conf.chartConfigures;\n    if (chartConfig) {}\n    //系统配置\n    let d3 = options.plugins.d3v7;\n    let fontSize = chartConfig && chartConfig.font_size_label || 14;\n    d3.sankey = _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sankey;\n    d3.sankeyCenter = _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sankeyCenter;\n    d3.sankeyJustify = _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sankeyJustify;\n    d3.sankeyLeft = _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sankeyLeft;\n    d3.sankeyLinkHorizontal = _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sankeyLinkHorizontal;\n    d3.sankeyRight = _pc_assets_js_d3_sankey_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sankeyRight;\n\n    // 清除画图容器\n    $(container).empty();\n    let drawWidth, drawHeight;\n    // $(container).css({\"position\": \"relative\"  , \"text-align\": textAlign});\n    drawWidth = $(container).width();\n    drawHeight = $(container).height();\n    // 准备画图容器 ， 绘制标题元素等\n    let containerResult = _charts_plugin_animationTimeSequenceFrame__WEBPACK_IMPORTED_MODULE_0__[\"default\"].containerOp.executeContainer({\n      hideTimeBarFlag: true,\n      drawWidth: drawWidth,\n      drawHeight: drawHeight,\n      isLegendFlag: false,\n      hideAxisYTitleFlag: false,\n      axisYTitlePosition: 'bottom',\n      hideAxisXTitleFlag: false,\n      axisXTitlePosition: 'bottom',\n      container: container,\n      currentChart: currentChart,\n      chartAxis: chartAxis,\n      fontSize: fontSize\n    });\n    drawWidth = containerResult.drawWidth - 10;\n    drawHeight = containerResult.drawHeight - 10 - fontSize - 10;\n    let svgDiv = containerResult.svgDiv;\n    let xAxis = chartAxis.curColumns[0].index; // x轴\n    let attr = chartAxis.curRows[1].index; // 节点\n    let meas = chartAxis.curRows[0].index; // 线条宽度\n\n    let datas = chartDatas.map(d => {\n      return {\n        [xAxis]: d[xAxis],\n        [attr]: d[attr],\n        [meas]: d[meas]\n      };\n    });\n    function handleSankeyDataWithX(data) {\n      let nodes = {},\n        links = [],\n        xAxisOrders = [];\n      let measFlows = {};\n\n      // TODO 先根据xAxis 对数据整理排序\n      // ...\n\n      data.forEach(d => {\n        let value = Object.entries(d);\n        // 获取节点\n        if (nodes[d[xAxis]]) {\n          if (nodes[d[xAxis]][d[attr]]) {\n            ++nodes[d[xAxis]][d[attr]].count;\n          } else {\n            nodes[d[xAxis]][d[attr]] = {};\n            nodes[d[xAxis]][d[attr]].count = 1;\n          }\n        } else {\n          nodes[d[xAxis]] = {};\n          nodes[d[xAxis]][d[attr]] = {};\n          nodes[d[xAxis]][d[attr]].count = 1;\n        }\n        if (measFlows[d[meas]]) {\n          measFlows[d[meas]].push(d);\n        } else {\n          measFlows[d[meas]] = [d];\n        }\n        if (!xAxisOrders.includes(d[xAxis])) {\n          xAxisOrders.push(d[xAxis]);\n        }\n      });\n      // console.log(measFlows);\n      let maxLength;\n      for (let [date, obj] of Object.entries(nodes)) {\n        nodes[date].length = Object.values(obj).reduce(function (total, value) {\n          return total + value.count;\n        }, 0);\n        if (maxLength === undefined || maxLength < nodes[date].length) {\n          maxLength = nodes[date].length;\n        }\n      }\n      nodes.widthCount = Object.keys(nodes).length;\n      nodes.heightCount = maxLength;\n\n      // 查找存在link\n      function findLinkInArr(link, arr, key) {\n        return arr.find(l => {\n          return link.source[key.attr] === l.source[key.attr] && link.source[key.xAxis] === l.source[key.xAxis] && link.target[key.attr] === l.target[key.attr] && link.target[key.xAxis] === l.target[key.xAxis];\n        });\n      }\n      // console.log(nodes);\n      for (let data of Object.values(measFlows)) {\n        let pre = null;\n        data.forEach((d, i) => {\n          if (pre) {\n            let link = {\n              source: pre,\n              target: d\n            };\n            let findLink = findLinkInArr(link, links, {\n              attr,\n              xAxis\n            });\n            if (findLink) findLink.value++;else {\n              let source = {\n                [attr]: pre[attr],\n                [xAxis]: pre[xAxis]\n              };\n              let target = {\n                [attr]: d[attr],\n                [xAxis]: d[xAxis]\n              };\n              links.push({\n                source,\n                target,\n                value: 1\n              });\n            }\n          }\n          pre = {\n            ...d\n          };\n        });\n      }\n      return {\n        nodes,\n        links,\n        xAxisOrders\n      };\n    }\n    let {\n      links,\n      xAxisOrders\n    } = handleSankeyDataWithX(datas);\n\n    // 邻接矩阵\n    const ngraph = {};\n    // 是否被访问\n    let visited = {};\n    // 是否是有向无环图\n    let isDAG = true;\n    // 节点\n    const nodes = [];\n    // 向邻接表中添加边\n    function pushEdge(edge) {\n      ngraph[JSON.stringify(edge.source)][JSON.stringify(edge.target)] = 1;\n    }\n    // 深度优先遍历 从s开始遍历，查找是否可以遍历到t\n    function DFS(s) {\n      // 有向无环图\n      let isDAG = true;\n      if (!Object.keys(ngraph[s]).length) return true;\n      visited[s] = 1;\n      for (let target of Object.keys(ngraph[s])) {\n        if (visited[target] === 1) {\n          isDAG = false;\n          break;\n        } else {\n          isDAG = DFS(target);\n          if (!isDAG) break;\n        }\n      }\n      return isDAG;\n    }\n    // 最终结果\n    const result = [];\n    // let reverses = curChartDatas.reverse();\n    links.forEach(e => {\n      if (!nodes.includes(JSON.stringify(e.source))) {\n        nodes.push(JSON.stringify(e.source));\n        ngraph[JSON.stringify(e.source)] = {};\n      }\n      if (!nodes.includes(JSON.stringify(e.target))) {\n        nodes.push(JSON.stringify(e.target));\n        ngraph[JSON.stringify(e.target)] = {};\n      }\n      pushEdge(e);\n\n      // 判断target是否有环路\n      visited = {};\n      isDAG = DFS(JSON.stringify(e.target));\n      if (isDAG) {\n        result.push(e);\n      }\n    });\n    if (!result.length) {\n      console.log('links:', result);\n      return svgDiv[0].appendChild(d3.create(\"svg\").node());\n    }\n    let distinctX = result.reduce((t, l) => {\n      if (!t.includes(l.source[xAxis])) t.push(l.source[xAxis]);\n      if (!t.includes(l.target[xAxis])) t.push(l.target[xAxis]);\n      return t;\n    }, []);\n    if (distinctX.length <= 1) {\n      console.log('distinct of x: ', distinctX);\n      return d3.create(\"svg\").node();\n    }\n    // console.log(links, xAxis)\n\n    // 数据标签\n    let nodeText = d => currentChart.generateTextByMacros({\n      x: d.id[attr],\n      y: d.value,\n      yAxis: curYAxis[0],\n      defaultRegexText: `%_NAME`\n    }, \"label\");\n    let linkTitle = d => currentChart.generateTextByMacros({\n      x: curYAxis[0].col_name,\n      y: d.value,\n      yAxis: curYAxis[0],\n      sourceX: d.source.id[attr],\n      sourceY: d.source.value,\n      targetX: d.target.id[attr],\n      targetY: d.target.value,\n      defaultRegexText: `%_SOURCE_NAME → %_TARGET_NAME : %_VALUE`\n    }, \"text\");\n    let chart = Object(_pc_assets_js_sankeyChart_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(d3, {\n      links: result\n    }, {\n      nodeGroup: d => d.id[xAxis] + d.id[attr],\n      // take first word for color\n      nodeAlign: \"left\",\n      // e.g., d3.sankeyJustify; set by input above\n      linkColor: \"source\",\n      // e.g., \"source\" or \"target\"; set by input above\n      format: (f => d => `${f(d)}`)(d3.format(\",.1~f\")),\n      width: drawWidth,\n      height: drawHeight,\n      nodeTitle: nodeText,\n      linkTitle: linkTitle,\n      noRepeat: d => d[attr] + d[xAxis],\n      nodeAttribute: attr,\n      nodeXAxis: xAxis,\n      sortDepth: {\n        sortBy: xAxis,\n        sortList: xAxisOrders\n      },\n      fontSize: fontSize,\n      nodeStrokeWidth: 0,\n      currentChart: currentChart,\n      colors: conf.localColors\n    });\n    svgDiv[0].appendChild(chart);\n  },\n  getTemplateData: function () {\n    let theTemplateData = {\n      headers: [{\n        idx: 0,\n        col_id: '10001',\n        col_uuid: '10001',\n        col_name: '索引1',\n        data_type: 'string',\n        operator: '',\n        geo_type: '',\n        col_type: 'ATTRIBUTE',\n        distincts: [1, 2, 3, 4, 5],\n        statistics: {\n          count_distinct: 5\n        }\n      }, {\n        idx: 1,\n        col_id: '10002',\n        col_uuid: '10002',\n        col_name: '索引2',\n        data_type: 'string',\n        operator: 'SUM',\n        geo_type: '',\n        col_type: 'ATTRIBUTE',\n        distincts: [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\", \"p7\", \"p8\", \"p9\", \"p10\", \"p11\", \"p12\", \"p13\", \"p14\", \"p15\", \"p16\", \"p17\", \"p18\"]\n      }, {\n        idx: 2,\n        col_id: '10003',\n        col_uuid: '10003',\n        col_name: '索引2',\n        data_type: 'string',\n        operator: '',\n        geo_type: '',\n        col_type: 'ATTRIBUTE'\n      }],\n      columns: [[\"1\", \"p4\", \"a1\"], [\"1\", \"p6\", \"a2\"], [\"1\", \"p7\", \"a2\"], [\"1\", \"p3\", \"a3\"], [\"1\", \"p2\", \"a3\"], [\"1\", \"p5\", \"a1\"], [\"1\", \"p1\", \"a3\"], [\"2\", \"p7\", \"a4\"], [\"2\", \"p4\", \"a2\"], [\"2\", \"p3\", \"a2\"], [\"2\", \"p9\", \"a3\"], [\"2\", \"p2\", \"a1\"], [\"2\", \"p12\", \"a1\"], [\"2\", \"p5\", \"a2\"], [\"2\", \"p11\", \"a1\"], [\"2\", \"p6\", \"a4\"], [\"2\", \"p8\", \"a3\"], [\"2\", \"p1\", \"a1\"], [\"2\", \"p10\", \"a3\"], [\"2\", \"p13\", \"a1\"], [\"3\", \"p13\", \"a2\"], [\"3\", \"p15\", \"a2\"], [\"3\", \"p1\", \"a2\"], [\"3\", \"p2\", \"a2\"], [\"3\", \"p5\", \"a5\"], [\"3\", \"p11\", \"a2\"], [\"3\", \"p10\", \"a2\"], [\"3\", \"p8\", \"a1\"], [\"3\", \"p9\", \"a2\"], [\"3\", \"p14\", \"a1\"], [\"3\", \"p12\", \"a2\"], [\"3\", \"p4\", \"a4\"], [\"4\", \"p12\", \"a4\"], [\"4\", \"p16\", \"a3\"], [\"4\", \"p11\", \"a4\"], [\"4\", \"p17\", \"a2\"], [\"4\", \"p18\", \"a2\"], [\"4\", \"p14\", \"a2\"], [\"4\", \"p3\", \"a4\"], [\"4\", \"p8\", \"a2\"], [\"5\", \"p14\", \"a4\"], [\"5\", \"p4\", \"a6\"], [\"5\", \"p9\", \"a4\"], [\"5\", \"p8\", \"a4\"], [\"5\", \"p10\", \"a4\"], [\"5\", \"p18\", \"a5\"], [\"5\", \"p2\", \"a4\"], [\"5\", \"p16\", \"a2\"], [\"5\", \"p17\", \"a4\"], [\"5\", \"p1\", \"a4\"], [\"5\", \"p15\", \"a5\"], [\"5\", \"p13\", \"a5\"], [\"5\", \"p11\", \"a4\"]],\n      default_chart: {\n        type: 'extendSankey',\n        columns: [0],\n        rows: [1, 2]\n      },\n      charts: [{\n        type: 'extendSankey',\n        columns: [0],\n        rows: [1, 2]\n      }]\n    };\n    return theTemplateData;\n  },\n  // 当前图形定制的中英文[ 配置XY轴，图表配置 ] [ *新增图形必填项 ]\n  i18nObj: {\n    chinese: {\n      \"chart-name-title\": \"扩展桑基图\",\n      \"chart-description-title\": \"三个属性列，需要一个列的去重值大于1且小于等于10，节点在x轴的映射量不能小于2\",\n      \"chart-column-axis-title\": \"x轴\",\n      \"chart-row-axis-title\": \"线条：节点\",\n      \"chart-row-value-axis-null\": \"行数据和值不能为空\",\n      \"chart-column-value-axis-1\": \"只能有一个x轴\",\n      \"chart-attribute-columns-duplicated\": \"不能重复使用同一列\",\n      \"chart-need-all-attribute-columns\": \"当前图形需要将所有的属性列利用起来\"\n    },\n    english: {\n      \"chart-name-title\": \"Extended Sankey\",\n      \"chart-description-title\": \"For three attribute columns, the de duplication value of one column should be greater than 1 and less than or equal to 10\",\n      \"chart-column-axis-title\": \"X-axis\",\n      \"chart-row-axis-title\": \"Line : Node\",\n      \"chart-row-value-axis-null\": \"Row data and value cannot be empty\",\n      \"chart-column-value-axis-1\": \"There can only be one X-axis\",\n      \"chart-attribute-columns-duplicated\": \"Cannot reuse the same column\",\n      \"chart-need-all-attribute-columns\": \"The current chart needs to make use of all attribute columns\"\n    }\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.senior/extendSankey.js?");

/***/ })

}]);
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[16],{

/***/ "../src-v5/assets/js/charts.components/ContainerComponent.js":
/*!*******************************************************************!*\
  !*** ../src-v5/assets/js/charts.components/ContainerComponent.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// 画图形容器的组件\nlet ContainerComponent = {\n  /**\r\n   * 画图形的容器，只需要区分图例部分与图形部分[图形内部自己画X轴Y轴标题及图形]\r\n   * @param options\r\n   *          {\r\n   *              container           -   [ *必填项 ]画图容器DOM\r\n   *              legendPosition      -   图例位置[默认没有图例]  top / right / left / bottom\r\n   *              needCanvasFlag      -   是否需要canvas标签的标志\r\n   *          }\r\n   * @return 在container中插入图形区域 及 图例区域\r\n   *          {\r\n   *              svgContainer    -   包裹svg元素的div容器\r\n   *              svgJqDom        -   SVG的DOM元素\r\n   *              canvasJqDom     -   Canvas的DOM元素\r\n   *              legendContainer -   包裹图例的div容器\r\n   *          }\r\n   * */\n  drawCommonContainer: function (options) {\n    options = options || {};\n    if (!options.container) return false;\n    const getChartContent = container => {\n      const existedChartContent = container.querySelector('.chart-content');\n      if (existedChartContent) {\n        return existedChartContent;\n      }\n      const newChartContent = document.createElement('div');\n      newChartContent.classList.add('chart-content');\n      return newChartContent;\n    };\n    const getLegendContent = chartContent => {\n      const existedLegendContent = chartContent.querySelector('.legend-content');\n      if (options.legendPosition) {\n        if (existedLegendContent) return existedLegendContent;\n        const newLegendContent = document.createElement('div');\n        newLegendContent.classList.add('legend-content');\n        return newLegendContent;\n      } else {\n        if (existedLegendContent) existedLegendContent.remove();\n        return null;\n      }\n    };\n    const getSvgContent = chartContent => {\n      const existedSvgContent = chartContent.querySelector('.svg-content');\n      // 每次重新生成元素时，将临时回退元素清除\n      if (existedSvgContent) {\n        let theReturnDom = existedSvgContent.querySelector('.select-return-dom');\n        if (theReturnDom) theReturnDom.remove();\n        return existedSvgContent;\n      }\n      const newSvgContent = document.createElement('div');\n      newSvgContent.classList.add('svg-content');\n      return newSvgContent;\n    };\n    const getSvgDom = svgContent => {\n      const existedSvgDom = svgContent.querySelector('.svg-dom');\n      if (existedSvgDom) {\n        return existedSvgDom;\n      }\n      const newSvgDom = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      newSvgDom.classList.add('svg-dom');\n      return newSvgDom;\n    };\n    const getCanvasDom = svgContent => {\n      const existedCanvasDom = svgContent.querySelector('.canvas-dom');\n      if (options.needCanvasFlag) {\n        if (existedCanvasDom) return existedCanvasDom;\n        const newCanvasDom = document.createElement('canvas');\n        newCanvasDom.classList.add('canvas-dom');\n        return newCanvasDom;\n      } else {\n        if (existedCanvasDom) existedCanvasDom.remove();\n        return null;\n      }\n    };\n    const updateContainerLayout = (container, legendPosition) => {\n      const chartContent = getChartContent(container);\n      const legendContent = getLegendContent(chartContent);\n      const svgContent = getSvgContent(chartContent);\n      const svgDom = getSvgDom(svgContent);\n      const canvasDom = getCanvasDom(svgContent);\n      switch (legendPosition) {\n        case \"top\":\n          chartContent.style.cssText = 'display: flex;flex-direction: column;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:row;width:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height: 0;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        case \"bottom\":\n          chartContent.style.cssText = 'display: flex;flex-direction: column;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:row;width:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height: 0;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(svgContent);\n          chartContent.appendChild(legendContent);\n          break;\n        case \"right\":\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'display:flex;flex-direction:column;height:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(svgContent);\n          chartContent.appendChild(legendContent);\n          break;\n        case \"left\":\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'height:100%;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        case \"rightTop\":\n          // 图例在右上角\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          legendContent.style.cssText = 'position:absolute;right:0;top:0;z-index:1;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n          chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n          break;\n        default:\n          // 无图例的部分\n          chartContent.style.cssText = 'display: flex;flex-direction: row;justify-content: center;align-items: center;width:100%;height:100%;';\n          // legendContent.style.cssText = 'position:absolute;right:0;top:0;z-index:1;';\n          svgContent.style.cssText = 'position:relative;flex:1;flex-grow:1;width:100%;height:100%;';\n          svgDom.style.cssText = 'width:100%;height:100%;';\n          canvasDom && (canvasDom.style.cssText = 'position:absolute;width:100%;height:100%;top:0;left:0;');\n          svgContent.appendChild(svgDom);\n          canvasDom && svgContent.appendChild(canvasDom);\n\n          // chartContent.appendChild(legendContent);\n          chartContent.appendChild(svgContent);\n      }\n\n      // 最后插入减少浏览器重绘\n      options.container.innerHTML = '';\n      options.container.appendChild(chartContent);\n      return {\n        chartContent,\n        legendContent,\n        svgContent,\n        svgDom,\n        canvasDom\n      };\n    };\n    const {\n      chartContent,\n      legendContent,\n      svgContent,\n      svgDom,\n      canvasDom\n    } = updateContainerLayout(options.container, options.legendPosition);\n    return {\n      chartContainer: chartContent,\n      svgContainer: svgContent,\n      svgJqDom: svgDom,\n      canvasJqDom: canvasDom,\n      legendContainer: legendContent\n    };\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (ContainerComponent);\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.components/ContainerComponent.js?");

/***/ }),

/***/ "../src-v5/assets/js/charts.system.basic/funnel/systemFunnelChart.js":
/*!***************************************************************************!*\
  !*** ../src-v5/assets/js/charts.system.basic/funnel/systemFunnelChart.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pc/assets/js/d3v7Export */ \"../src-v5/assets/js/d3v7Export.js\");\n/* harmony import */ var _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pc/assets/js/charts.components/CommonComponent */ \"../src-v5/assets/js/charts.components/CommonComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pc/assets/js/charts.components/ContainerComponent */ \"../src-v5/assets/js/charts.components/ContainerComponent.js\");\n/* harmony import */ var _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pc/assets/js/charts.components/TranslateDataComponent */ \"../src-v5/assets/js/charts.components/TranslateDataComponent.js\");\n/* harmony import */ var _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../charts.components/LegendComponent */ \"../src-v5/assets/js/charts.components/LegendComponent.js\");\n\n// 通用组件[ 获取字符串长度之类 ...  ]\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  // [*必填项] 图姓唯一标识\n  chartType: \"funnel\",\n  // [*必填项] 图形名称中英文Key\n  chartDisplayNameKey: \"chart_funnel\",\n  // [*必填项] 图形描述中英文Key\n  chartDescriptionKey: \"chart_funnel_tooltip\",\n  // [*必填项] 图轴配置元素 ( X轴 ，Y轴 )\n  needAxis: {\n    xAxis: {},\n    yAxis: {\n      defaultYAxisNumber: 1\n    }\n  },\n  // [*必填项] 搜索数据是否支持该图形 ( 至少一个属性列，一个数值列 且 查询结果少于10条)\n  isSatisfiedTheChart: function (searchResultStatistic) {\n    let satisfiedFlag = false;\n    if (!searchResultStatistic) return false;\n    if (searchResultStatistic.attributeColumns && searchResultStatistic.measureColumns) {\n      if (searchResultStatistic.measureColumns.length >= 1 && searchResultStatistic.attributeColumns.length >= 1 && searchResultStatistic.queryResultCount <= 10) {\n        satisfiedFlag = true;\n      }\n    }\n    return satisfiedFlag;\n  },\n  /***\r\n   * [*必填项] 图轴配置是否合法\r\n   * - X轴不允许为空\r\n   * - Y轴不允许为空\r\n   * - 只允许一个Y轴\r\n   * */\n  validateAxisConfig: function (theAxisConfig) {\n    let chartErrorMsg = '';\n    if (!theAxisConfig) return chartErrorMsg;\n\n    // X轴为必填选项\n    if (!theAxisConfig.xAxis || !theAxisConfig.xAxis.length) {\n      chartErrorMsg = 'chart_modify_x_not_null';\n      return chartErrorMsg;\n    }\n\n    // Y轴不允许为空\n    if (!theAxisConfig.yAxis || !theAxisConfig.yAxis.length) {\n      chartErrorMsg = 'chart_modify_y_not_null';\n      return chartErrorMsg;\n    }\n\n    // Y轴只允许一个\n    if (theAxisConfig.yAxis && theAxisConfig.yAxis.length > 1) {\n      chartErrorMsg = 'chart_modify_y_only_one';\n      return chartErrorMsg;\n    }\n  },\n  // [* 必填项]画图方法\n  drawChart: function (options) {\n    options = options || {};\n    if (!options.container) {\n      console.error('DataFocus没有提供画图元素Dom');\n      return false;\n    }\n    if (!options.currentChart) {\n      console.error('DataFocus没有提供图形实例');\n      return false;\n    }\n    if (!options.chartAxis) {\n      console.error('DataFocus没有图形的配置信息');\n      return false;\n    }\n    if (!options.datas) {\n      console.error('DataFocus没有提供画图数据');\n      return false;\n    }\n    let self = this,\n      container = options.container,\n      chartAxis = options.chartAxis,\n      currentChart = options.currentChart,\n      conf = currentChart.defaultConf || {},\n      chartUUID = conf.chartUUID,\n      tableData = options.datas,\n      cachedTranslateData = conf.cachedTranslateData,\n      systemLanguage = conf.systemLanguage || 'chinese',\n      chartConfigures = options.chartConfigures || {};\n    /**\r\n     * 1. 为当前图形布局\r\n     * 左右布局，左侧图例列表（占30%），右侧图形（占70%） ； 可以切换图例位置，左侧右侧\r\n     * \r\n     * 默认情况，左侧列表与右侧图形是垂直居中显示的 ， 左侧列表可以配置隐藏数值部分 ，\r\n     * \r\n     * 在画图区域变小时，左侧列表的信息可以慢慢减少，直到只剩下图例名及颜色 ； 再小，左侧列表消失，只显示右侧图形\r\n     * \r\n     * */\n    // 画图例元素\n    let drawLegendFlag = !!(chartConfigures.show_legend === undefined || chartConfigures.show_legend);\n    let legendPosition = drawLegendFlag ? chartConfigures.legend_position === 'option_position_right' ? 'right' : 'left' : '';\n    let containerResult = _pc_assets_js_charts_components_ContainerComponent__WEBPACK_IMPORTED_MODULE_2__[\"default\"].drawCommonContainer({\n      container: container,\n      legendPosition: legendPosition //  后续支持图例位置配置，居左，居右\n    });\n    if (!containerResult.svgJqDom) return false;\n    if (!options.datas.columns || !options.datas.columns.length) {\n      console.error('当前图形没有合法的画图数据');\n      return false;\n    }\n\n    // 2. 解析数据为当前画图数据 [ 如果当前图形的处理数据缓存过，其当前只是窗口变化，则使用缓存数据不再计算数据 ]\n    let translateData;\n    if (options.isResize && cachedTranslateData && cachedTranslateData.hashKey === tableData.hash_key) {\n      // 如果当前使用的X轴类型与配置的X轴类型不一致，则需要重新解析数据\n      let currentXLabelType = 'dotLine';\n      if (cachedTranslateData.xLabelType !== currentXLabelType) {\n        // 不需要使用缓存数据\n      } else {\n        // console.log('使用缓存数据');\n        translateData = cachedTranslateData;\n      }\n    }\n    // 如果没有使用缓存数据，则重新解析数据\n    if (!translateData) {\n      translateData = _pc_assets_js_charts_components_TranslateDataComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].translateXYLegendBasicData({\n        tableData: tableData,\n        chartAxis: chartAxis,\n        xLabelType: 'dotLine',\n        language: systemLanguage\n      });\n      // 暂时使用_DataFocusChart对象实例中的defaultConf兑现过来暂存缓存\n      conf.cachedTranslateData = translateData;\n    }\n\n    // 获取图形的字体大小配置\n    let chartFontSize = chartConfigures.font_size_label && parseInt(chartConfigures.font_size_label.fontSize) || 10,\n      chartFontColor = chartConfigures.font_size_label && chartConfigures.font_size_label.fontColor,\n      chartFontBold = chartConfigures.font_size_label && chartConfigures.font_size_label.fontBold,\n      chartFontItalic = chartConfigures.font_size_label && chartConfigures.font_size_label.fontItalic;\n    chartFontSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateFontSizeConfigure(chartFontSize) || 10;\n    if (chartFontColor) {\n      container.style.color = chartFontColor || 'inherit';\n      container.style.fill = chartFontColor || 'inherit';\n      containerResult.svgJqDom.style.color = chartFontColor;\n      containerResult.svgJqDom.style.fill = chartFontColor;\n    } else {\n      container.style.color = '';\n      container.style.fill = '';\n      containerResult.svgJqDom.style.color = '';\n      containerResult.svgJqDom.style.fill = '';\n    }\n    if (chartFontBold) {\n      container.style.fontWeight = 'bold';\n    } else {\n      container.style.fontWeight = 'normal';\n    }\n    if (chartFontItalic) {\n      container.style.fontStyle = 'italic';\n    } else {\n      container.style.fontStyle = 'normal';\n    }\n\n    // 获取隐藏聚合方式的标志配置, 即所有属性列的聚合方式不显示在标签内\n    let hideOperatorFlag = false;\n    if (chartConfigures.hide_operator_label) hideOperatorFlag = true;\n    //  是否禁止动画的标志\n    let animateFlag = !chartConfigures.animation_forbidden;\n    // 画图区域宽度，不同尺寸下，显示内容不同\n    let originalDrawWidth = $(container).width(),\n      hideLegendValueFlag = false;\n    if (originalDrawWidth < 250) {\n      // 画图区域太小，不显示图例\n      legendPosition = '';\n      hideLegendValueFlag = true;\n    } else if (originalDrawWidth < 400) {\n      // 画图区域太小，不显示数值\n      hideLegendValueFlag = true;\n    }\n    // 设置图例的区域\n    containerResult.legendContainer && _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.legendContainer).style(\"display\", \"flex\").style(\"flex-direction\", \"column\").style(\"justify-content\", \"center\").style(\"align-items\", legendPosition === 'right' ? 'start' : \"end\").style(\"width\", legendPosition ? \"40%\" : \"0%\").style(\"height\", \"100%\");\n    // 配置的颜色规则 \n    let colorFormats = chartAxis.curYAxis && chartAxis.curYAxis[0] && chartAxis.curYAxis[0].header && chartAxis.curYAxis[0].header.colorFormattings;\n    // 获取当前图形的配置颜色主题方法\n    let colorFunc = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].translateColorThemeConfigure(chartConfigures.chart_color_theme, {\n      chart_custom_theme: chartConfigures.chart_custom_theme\n    });\n\n    // 画图形部分\n    let svgDrawWidth = $(containerResult.svgJqDom).width(),\n      svgDrawHeight = $(containerResult.svgJqDom).height();\n    let funnelWidth = svgDrawWidth * 0.9,\n      funnelHeight = svgDrawHeight - 10;\n    let funnelItemDatas = translateData.datas || [],\n      funnelItemLength = funnelItemDatas.length;\n    let theMinItemValue = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].min(funnelItemDatas, d => d.y0),\n      theMaxItemValue = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].max(funnelItemDatas, d => d.y0);\n    let theWidthScale = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].scaleLinear().domain([theMinItemValue / 2, theMaxItemValue]).range([0, funnelWidth]);\n    let theItemWidthArray = funnelItemDatas.map(function (data) {\n      return theWidthScale(data.y0) || 1;\n    });\n    // 为了便于计算最后一条数据的下宽度，需要在最后一个宽度数据后面再添加一个数据\n    theItemWidthArray.push(1);\n    let theItemHeightNum = funnelHeight / (funnelItemLength || 1);\n\n    // 当前图形各个属性的颜色配置[ 允许用户配置，默认按照主题颜色分配 ]\n    let theXLabelColorList = [],\n      defaultXLabelColorList = [];\n    let theLabelColorConfig = chartConfigures.chart_custom_label_color,\n      preData = undefined;\n    funnelItemDatas && funnelItemDatas.forEach(function (data, index) {\n      let xLabel = data.x0 || '';\n      let theMatchedColorConfig = theLabelColorConfig && theLabelColorConfig.find(function (theConfig) {\n        return theConfig.legend === xLabel;\n      });\n      theXLabelColorList.push({\n        show: true,\n        index: theXLabelColorList.length,\n        id: xLabel,\n        legend: xLabel,\n        //  因为使用的legendList组件，所以显示名命名都是legend\n        color: theMatchedColorConfig && theMatchedColorConfig.color || colorFunc(index),\n        value: _DataFocusMethod.formatData(data.y0, chartAxis.curYAxis[0]),\n        rate: _DataFocusMethod.formatData(preData === undefined ? 1 : data.y0 / preData, {\n          formatType: 'percent',\n          percentType: true\n        })\n      });\n      preData = data.y0;\n      defaultXLabelColorList.push({\n        id: xLabel,\n        legend: xLabel,\n        color: colorFunc(index)\n      });\n    });\n\n    // 画左侧图例属性列表\n    let theLegendFontSize = chartConfigures.legend_font_style && parseInt(chartConfigures.legend_font_style.fontSize) || chartFontSize || 10;\n    let autoLegendWidthFlag = !!chartConfigures.legend_list_flex_flag;\n    _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].drawAttributeLegend({\n      container: containerResult.legendContainer,\n      chartWidth: svgDrawWidth,\n      chartHeight: svgDrawHeight,\n      legendPosition: legendPosition,\n      legendWidth: autoLegendWidthFlag ? '' : $(containerResult.legendContainer).width() * 0.8,\n      legendMaxWidth: $(containerResult.legendContainer).width() * 0.8,\n      legendValueList: theXLabelColorList,\n      drawValueKeyList: hideLegendValueFlag ? [] : ['value', 'rate'],\n      // 需要画的数值部分的key\n      legendIntervalSpace: _DataFocusMethod.isPureNumber(chartConfigures.legend_position_interval) ? chartConfigures.legend_position_interval : 2,\n      legendFontSize: theLegendFontSize,\n      legendFontColor: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontColor,\n      legendBoldStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontBold,\n      legendItalicStyle: chartConfigures.legend_font_style && chartConfigures.legend_font_style.fontItalic,\n      legendShapeType: _charts_components_LegendComponent__WEBPACK_IMPORTED_MODULE_4__[\"default\"].translateLegendShapeConfigure(chartConfigures && chartConfigures.legend_shape_type || 'funnel'),\n      // 鼠标移入后对应区域高亮\n      mouseoverEventCallback: function (options) {\n        // 高亮当前图例所在的图形元素，置灰其他元素\n        options = options || {};\n        clearTimeout(conf.timer);\n        if (_DataFocusMethod.isPureNumber(options.legendIndex)) {\n          let theMatchedLegend = theXLabelColorList[options.legendIndex];\n          if (theMatchedLegend && theMatchedLegend.id && theMatchedLegend.show) {\n            _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon\").attr(\"class\", \"polygon fill-grey\");\n            _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon[legendId='\" + theMatchedLegend.id + \"']\").attr(\"class\", \"polygon\");\n            _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text\").attr(\"class\", \"labels fill-grey\");\n            _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text[legendId='\" + theMatchedLegend.id + \"']\").attr(\"class\", \"labels\");\n            if (options.legendDom) {\n              $(options.legendDom).removeClass(\"disabled\");\n              $(options.legendDom).siblings().addClass(\"disabled\");\n            }\n          }\n        }\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n      },\n      // 鼠标移出，对应区域恢复\n      mouseoutEventCallback: function () {\n        options = options || {};\n        // // 恢复高亮所有图例的图形元素\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon.fill-grey\").attr(\"class\", \"polygon\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text.fill-grey\").attr(\"class\", \"labels\");\n        if (containerResult.legendContainer) $(containerResult.legendContainer).find(\".legend-item\").removeClass(\"disabled\");\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n      }\n    });\n\n    // 画右侧图形部分\n    let labelFontSize = chartConfigures.label_text_font_style && parseInt(chartConfigures.label_text_font_style.fontSize) || Math.max(chartFontSize - 2, 10) || 10,\n      showLabelFlag = !!chartConfigures.label_text_visible;\n    let labelFontColor = chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontColor,\n      labelFontBold = chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontBold,\n      labelFontItalic = chartConfigures.label_text_font_style && chartConfigures.label_text_font_style.fontItalic;\n    labelFontColor = labelFontColor === undefined ? 'inherit' : labelFontColor;\n    labelFontBold = labelFontBold === undefined ? 'inherit' : labelFontBold ? 'bold' : '500';\n    labelFontItalic = labelFontItalic === undefined ? 'inherit' : labelFontItalic ? 'italic' : 'normal';\n    _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon\").data(funnelItemDatas, d => d.x0).join(enter => {\n      let thePolygon = enter.append(\"g\").attr(\"class\", \"funnel-chart-polygon\").attr(\"transform\", \"translate(\" + (legendPosition === 'right' ? funnelWidth * 0.1 + '' : legendPosition === 'left' ? '0' : funnelWidth * 0.05 + '') + \",0)\").on(\"mouseover\", function (event, d) {\n        clearTimeout(conf.timer);\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon\").attr(\"class\", \"polygon fill-grey\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon[legendId='\" + d.x0 + \"']\").attr(\"class\", \"polygon\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text\").attr(\"class\", \"labels fill-grey\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text[legendId='\" + d.x0 + \"']\").attr(\"class\", \"labels\");\n        if (containerResult.legendContainer) {\n          let theLegendDom = $(containerResult.legendContainer).find(\".legend-item[data-legend-id='\" + d.x0 + \"']\");\n          theLegendDom.removeClass(\"disabled\");\n          theLegendDom.siblings().addClass(\"disabled\");\n        }\n        let theTranslateSuspendText;\n        if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n          let theMatchedLegend = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n            return d.x0 === theLegend.id;\n          });\n          let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n          let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n          if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_NAME : %_VALUE\";\n          theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n            xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n            yValue: d['y0'],\n            yAxis: theMatchedLegend && chartAxis.curYAxis[0],\n            conversionRate: theMatchedLegend && theMatchedLegend.rate,\n            rowData: d.rowData,\n            headers: tableData && tableData.headers\n          });\n        }\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(event, theTranslateSuspendText || d.x0 + ':' + d['y0']);\n      }).on(\"mouseout\", function () {\n        conf.timer = setTimeout(function () {\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon.fill-grey\").attr(\"class\", \"polygon\");\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text.fill-grey\").attr(\"class\", \"labels\");\n          if (containerResult.legendContainer) $(containerResult.legendContainer).find(\".legend-item\").removeClass(\"disabled\");\n        }, 300);\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n      });\n\n      // 矩形\n      thePolygon.append(\"polygon\").attr(\"class\", \"polygon\").style('cursor', 'pointer').attr(\"alarm-status\", function (d) {\n        return d[\"alarm0\"];\n      }).attr(\"legendId\", function (d) {\n        return d.x0;\n      }).attr(\"color\", function (d, i) {\n        // 用户配置的颜色规则的颜色\n        if (_DataFocusMethod.isPureNumber(d['y0']) && colorFormats && colorFormats.length > 0) {\n          let curColor = _DataFocusMethod.calcTheColor(d['y0'], colorFormats, {\n            rowData: d.rowData\n          });\n          if (curColor) return curColor;\n        }\n\n        // 如果用户配置了自定义颜色，需要一句当前X轴刻度在自定义图例颜色中找对应的颜色\n        if (theXLabelColorList && theXLabelColorList.length) {\n          let theMatchedXColor = theXLabelColorList.find(function (theLegend) {\n            return d.x0 && theLegend.id === d.x0;\n          });\n          if (theMatchedXColor && theMatchedXColor.color) return theMatchedXColor.color;\n        }\n\n        // 默认使用图例颜色\n        return colorFunc(i);\n      }).style(\"fill\", function () {\n        return _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr(\"color\");\n      }).attr(\"stroke\", \"none\").attr(\"points\", function (d, i) {\n        let topWidth = theItemWidthArray[i],\n          bottomWidth = theItemWidthArray[i + 1];\n        let topHeight = theItemHeightNum * i;\n        let topLeft = (funnelWidth - topWidth) / 2,\n          bottomLeft = (funnelWidth - bottomWidth) / 2;\n        let prePoints = \"\";\n        prePoints += topLeft + \",\" + topHeight;\n        prePoints += \" \" + (topLeft + topWidth) + \",\" + topHeight;\n        prePoints += \" \" + (bottomLeft + bottomWidth) + \",\" + (topHeight + theItemHeightNum * 0.01);\n        prePoints += \" \" + bottomLeft + \",\" + (topHeight + theItemHeightNum * 0.01);\n        return prePoints;\n      }).transition().duration(animateFlag ? 500 : 0).attr(\"points\", function (d, i) {\n        let topWidth = theItemWidthArray[i],\n          bottomWidth = theItemWidthArray[i + 1];\n        let topHeight = theItemHeightNum * i,\n          bottomHeight = theItemHeightNum * (i + 1) - 5;\n        let topLeft = (funnelWidth - topWidth) / 2,\n          bottomLeft = (funnelWidth - bottomWidth) / 2;\n        let points = '';\n        points += topLeft + \",\" + topHeight;\n        points += \" \" + (topLeft + topWidth) + \",\" + topHeight;\n        points += \" \" + (bottomLeft + bottomWidth) + \",\" + bottomHeight;\n        points += \" \" + bottomLeft + \",\" + bottomHeight;\n        return points;\n      });\n\n      // 增加标签\n      if (showLabelFlag) {\n        let theLabelText = thePolygon.append(\"text\").attr(\"class\", \"labels\").attr(\"legendId\", function (d) {\n          let theTranslateLabelText;\n          if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n            let theMatchedLegend = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n              return d.x0 === theLegend.id;\n            });\n            let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n            let theSuspendTextConfig = chartConfigures.label_text_regex || '';\n            if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_VALUE\";\n            theTranslateLabelText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n              type: 'label',\n              xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n              yValue: d.y0,\n              yAxis: theMatchedLegend && chartAxis.curYAxis[0],\n              conversionRate: theMatchedLegend && theMatchedLegend.rate,\n              rowData: d.rowData,\n              headers: tableData && tableData.headers\n            });\n          }\n          d.translateLabelText = theTranslateLabelText || _DataFocusMethod.formatData(d.y0, chartAxis.curYAxis && chartAxis.curYAxis[0]);\n          return d.x0;\n        }).attr(\"transform\", function (d, i) {\n          return \"translate(\" + funnelWidth / 2 + \",\" + (theItemHeightNum * i + theItemHeightNum / 2) + \")\";\n        }).style('font-size', labelFontSize + 'px').style(\"fill\", labelFontColor).style(\"font-weight\", labelFontBold).style(\"font-style\", labelFontItalic).attr(\"dy\", \"0.35em\").attr(\"text-anchor\", \"middle\");\n        theLabelText.each(function (d) {\n          let theTextDom = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this),\n            theMessageArray = (d && d.translateLabelText || '').trim().split('\\n');\n          let theMessageSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theMessageArray[0] || 'aaaa', {\n              fontSize: labelFontSize\n            }),\n            theMessageHeight = theMessageSize.height;\n          if (theMessageArray && theMessageArray.length) {\n            for (let i = 0; i < theMessageArray.length; i++) {\n              theTextDom.append(\"tspan\").style(\"dominant-baseline\", \"inherit\").attr(\"x\", 0).attr(\"y\", i * theMessageHeight - theMessageHeight / 2).text(theMessageArray[i]);\n            }\n          }\n        });\n      }\n    }, update => {\n      update.on(\"mouseover\", function (event, d) {\n        clearTimeout(conf.timer);\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon\").attr(\"class\", \"polygon fill-grey\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon[legendId='\" + d.x0 + \"']\").attr(\"class\", \"polygon\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text\").attr(\"class\", \"labels fill-grey\");\n        _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text[legendId='\" + d.x0 + \"']\").attr(\"class\", \"labels\");\n        if (containerResult.legendContainer) {\n          let theLegendDom = $(containerResult.legendContainer).find(\".legend-item[data-legend-id='\" + d.x0 + \"']\");\n          theLegendDom.removeClass(\"disabled\");\n          theLegendDom.siblings().addClass(\"disabled\");\n        }\n        let theTranslateSuspendText;\n        if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n          let theMatchedLegend = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n            return d.x0 === theLegend.id;\n          });\n          let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n          let theSuspendTextConfig = chartConfigures.suspend_text_regex || '';\n          if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_NAME : %_VALUE\";\n          theTranslateSuspendText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n            xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n            yValue: d['y0'],\n            yAxis: theMatchedLegend && chartAxis.curYAxis[0],\n            conversionRate: theMatchedLegend && theMatchedLegend.rate,\n            rowData: d.rowData,\n            headers: tableData && tableData.headers\n          });\n        }\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].positionChartPrompt(event, theTranslateSuspendText || d.x0 + ':' + d['y0']);\n      }).on(\"mouseout\", function () {\n        conf.timer = setTimeout(function () {\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon polygon.fill-grey\").attr(\"class\", \"polygon\");\n          _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(containerResult.svgJqDom).selectAll(\".funnel-chart-polygon text.fill-grey\").attr(\"class\", \"labels\");\n          if (containerResult.legendContainer) $(containerResult.legendContainer).find(\".legend-item\").removeClass(\"disabled\");\n        }, 300);\n        _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearChartPrompt();\n      });\n      update.attr(\"transform\", \"translate(\" + (legendPosition === 'right' ? funnelWidth * 0.1 + '' : legendPosition === 'left' ? '0' : funnelWidth * 0.05 + '') + \",0)\").select(\".polygon\").attr(\"legendId\", function (d) {\n        let theTranslateLabelText;\n        if (self.chartConfigureAdvanced && self.chartConfigureAdvanced.translateMacro) {\n          let theMatchedLegend = theXLabelColorList && theXLabelColorList.find(function (theLegend) {\n            return d.x0 === theLegend.id;\n          });\n          let theXLabelMapping = translateData.xLabelDistinctMapping && translateData.xLabelDistinctMapping[d.x0];\n          let theSuspendTextConfig = chartConfigures.label_text_regex || '';\n          if (!theSuspendTextConfig.trim()) theSuspendTextConfig = \"%_VALUE\";\n          theTranslateLabelText = self.chartConfigureAdvanced.translateMacro(theSuspendTextConfig, {\n            type: 'label',\n            xLabel: theXLabelMapping && theXLabelMapping.text || d.x0,\n            yValue: d.y0,\n            yAxis: theMatchedLegend && chartAxis.curYAxis[0],\n            conversionRate: theMatchedLegend && theMatchedLegend.rate,\n            rowData: d.rowData,\n            headers: tableData && tableData.headers\n          });\n        }\n        d.translateLabelText = theTranslateLabelText || _DataFocusMethod.formatData(d.y0, chartAxis.curYAxis && chartAxis.curYAxis[0]);\n        return d.x0;\n      }).attr(\"alarm-status\", function (d) {\n        return d[\"alarm0\"];\n      }).attr(\"color\", function (d, i) {\n        // 用户配置的颜色规则的颜色\n        if (_DataFocusMethod.isPureNumber(d['y0']) && colorFormats && colorFormats.length > 0) {\n          let curColor = _DataFocusMethod.calcTheColor(d['y0'], colorFormats, {\n            rowData: d.rowData\n          });\n          if (curColor) return curColor;\n        }\n\n        // 如果用户配置了自定义颜色，需要一句当前X轴刻度在自定义图例颜色中找对应的颜色\n        if (theXLabelColorList && theXLabelColorList.length) {\n          let theMatchedXColor = theXLabelColorList.find(function (theLegend) {\n            return d.x0 && theLegend.id === d.x0;\n          });\n          if (theMatchedXColor && theMatchedXColor.color) return theMatchedXColor.color;\n        }\n\n        // 默认使用图例颜色\n        return colorFunc(i);\n      }).style(\"fill\", function () {\n        return _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this).attr(\"color\");\n      }).attr(\"points\", function (d, i) {\n        let topWidth = theItemWidthArray[i],\n          bottomWidth = theItemWidthArray[i + 1];\n        let topHeight = theItemHeightNum * i,\n          bottomHeight = theItemHeightNum * (i + 1) - 5;\n        let topLeft = (funnelWidth - topWidth) / 2,\n          bottomLeft = (funnelWidth - bottomWidth) / 2;\n        let points = '';\n        points += topLeft + \",\" + topHeight;\n        points += \" \" + (topLeft + topWidth) + \",\" + topHeight;\n        points += \" \" + (bottomLeft + bottomWidth) + \",\" + bottomHeight;\n        points += \" \" + bottomLeft + \",\" + bottomHeight;\n        return points;\n      });\n\n      // 更新标签\n      if (showLabelFlag) {\n        let theLabelText = update.select(\".labels\");\n        if (theLabelText.empty()) {\n          theLabelText = update.append(\"text\").attr(\"class\", \"labels\").attr(\"legendId\", function (d) {\n            return d.x0;\n          });\n        }\n        theLabelText.attr(\"legendId\", function (d) {\n          return d.x0;\n        }).attr(\"transform\", function (d, i) {\n          return \"translate(\" + funnelWidth / 2 + \",\" + (theItemHeightNum * i + theItemHeightNum / 2) + \")\";\n        }).style('font-size', labelFontSize + 'px').style(\"fill\", labelFontColor).style(\"font-weight\", labelFontBold).style(\"font-style\", labelFontItalic).attr(\"text-anchor\", \"middle\").text(\"\");\n        theLabelText.each(function (d) {\n          let theTextDom = _pc_assets_js_d3v7Export__WEBPACK_IMPORTED_MODULE_0__[\"default\"].select(this),\n            theMessageArray = (d && d.translateLabelText || '').trim().split('\\n');\n          let theMessageSize = _pc_assets_js_charts_components_CommonComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStrSizeByCanvas('string', theMessageArray[0] || 'aaaa', {\n              fontSize: labelFontSize\n            }),\n            theMessageHeight = theMessageSize.height;\n          if (theMessageArray && theMessageArray.length) {\n            for (let i = 0; i < theMessageArray.length; i++) {\n              theTextDom.append(\"tspan\").style(\"dominant-baseline\", \"inherit\").attr(\"x\", 0).attr(\"y\", i * theMessageHeight - (theMessageArray.length > 1 ? theMessageHeight / 2 : 0)).text(theMessageArray[i]);\n            }\n          }\n        });\n      } else {\n        // 如果不显示了，则清空标签内容\n        let theLabelText = update.select(\".labels\");\n        if (!theLabelText.empty()) {\n          theLabelText.remove();\n        }\n      }\n    }, exit => exit.remove());\n\n    /* *\r\n    * 画完图需要告诉外部的配置组件，当前图形的配置：\r\n    *   属性列图例 ；\r\n    * */\n    let returnConfigureAutoValue = {};\n    returnConfigureAutoValue.xLabelColorList = theXLabelColorList;\n    returnConfigureAutoValue.defaultXLabelColorList = defaultXLabelColorList;\n    /**\r\n     * @return\r\n     *      {\r\n     *          // 当前图形自动识别的配置，主要可以用于chartConfigureList中条件判断\r\n     *          chartAutoConfigures: {}\r\n     *      }\r\n     * */\n    return {\n      chartAutoConfigures: returnConfigureAutoValue\n    };\n  },\n  // [*必填项]图表配置列表，其中的require条件不仅可以使用以下配置项的key，也可以使用drawChart中返回的chartAutoConfigures中的值\n  chartConfigureList: [\n  // 通用 ： 字体大小，动画，最小柱宽，\n  {\n    key: \"category_general\",\n    title: \"category_general\",\n    options: [\n    // 图形的颜色主题\n    {\n      key: \"chart_color_theme\",\n      title: \"option_chart_color_theme\",\n      description: \"option_chart_color_theme_desc\",\n      type: \"theme\",\n      selection: [\"option_chart_theme_eight\", \"option_chart_theme_one\", \"option_chart_theme_two\", \"option_chart_theme_three\", \"option_chart_theme_four\", \"option_chart_theme_five\", \"option_chart_theme_six\", \"option_chart_theme_seven\", \"option_chart_theme_custom\"],\n      defaultValue: \"option_chart_theme_one\"\n    },\n    //自定义主题颜色\n    {\n      key: \"chart_custom_theme\",\n      title: \"option_chart_custom_theme\",\n      description: \"option_chart_custom_theme_desc\",\n      type: \"colorList\",\n      require: \"chart_color_theme=option_chart_theme_custom\"\n    },\n    // 图形字体大小\n    {\n      key: \"font_size_label\",\n      title: \"option_font_size_label\",\n      description: \"option_font_size_label_desc\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      }\n    },\n    // 隐藏聚合方式 [ 图例的聚合方式 ]\n    {\n      key: \"hide_operator_label\",\n      title: \"option_hide_operator_label\",\n      description: \"option_hide_operator_label_desc\",\n      type: \"checkbox-prev\"\n    },\n    // 禁止图形动画\n    {\n      key: \"animation_forbidden\",\n      title: \"option_animation_forbidden\",\n      description: \"option_animation_forbidden_desc\",\n      type: \"checkbox-prev\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 颜色：各个刻度的颜色\n  {\n    key: \"category_color\",\n    title: \"category_color\",\n    options: [\n    // 自定义的各个属性值的颜色\n    {\n      key: \"chart_custom_label_color\",\n      type: \"legendList\",\n      legendConfigSet: ['color'],\n      //  当前图例可以配置的值 color: 颜色 ； shape:形状 ；dash： 虚实 ； shadow: 阴影\n      legendValueList: \"xLabelColorList\",\n      //  当前所有图例使用的配置值\n      defaultLegendList: \"defaultXLabelColorList\" //  当前所有图例的默认值\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 图例：是否隐藏，图例色块形状，图例宽度，图例间隔\n  {\n    key: \"category_legend_config\",\n    title: \"category_legend_config\",\n    options: [\n    // 隐藏图例\n    {\n      key: \"show_legend\",\n      title: \"option_map_info_show\",\n      type: \"checkbox-prev\",\n      defaultValue: true\n    },\n    // 字体样式\n    {\n      key: \"legend_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label\",\n      require: \"show_legend\"\n    },\n    // 图例形状\n    {\n      key: \"legend_shape_type\",\n      title: \"option_legend_shape_type\",\n      description: \"option_legend_shape_type_desc\",\n      type: \"select\",\n      selection: [\"option_legend_shape_type_funnel\", \"option_legend_shape_type_circle\", \"option_legend_shape_type_three\", \"option_legend_shape_type_four\", \"option_legend_shape_type_rect\", \"option_legend_shape_type_five\", \"option_legend_shape_type_diamond\", \"option_legend_shape_type_loop\"],\n      require: \"show_legend\"\n    },\n    // 图例位置\n    {\n      key: \"legend_position\",\n      title: \"option_legend_position\",\n      description: \"option_legend_position_desc\",\n      type: \"selectTile\",\n      selection: [\"option_position_left\", \"option_position_right\"],\n      defaultValue: \"option_position_left\",\n      require: \"show_legend\"\n    },\n    // 图例宽度自适应\n    {\n      key: \"legend_list_flex_flag\",\n      title: \"option_legend_list_flex_flag\",\n      type: \"checkbox-prev\",\n      require: \"show_legend\"\n    },\n    // // 开启图例宽度自适应后，配置图例离画图区域的间隔\n    // {\n    //     key: \"legend_relative_offset_with_chart\",\n    //     title: \"option_pie_relative_position_offset\",\n    //     description: \"option_pie_relative_position_offset_desc\",\n    //     type: \"input\",\n    //     withoutSlider:true,\n    //     min: 0 ,\n    //     max:100,\n    //     defaultNumber: 0,\n    //     require: \"show_legend;legend_list_flex_flag\",\n    // },\n    // 图例之间的间隔\n    {\n      key: \"legend_position_interval\",\n      title: \"option_legend_position_interval\",\n      description: \"option_legend_position_interval_desc\",\n      type: \"input\",\n      allowNullFlag: true,\n      withoutSlider: true,\n      min: 0,\n      max: 100,\n      defaultNumber: 2,\n      require: \"show_legend\"\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 数据标签格式\n  {\n    key: \"category_label\",\n    title: \"category_label\",\n    options: [\n    // 是否显示数据标签\n    {\n      key: \"label_text_visible\",\n      title: \"option_label_text_visible\",\n      description: \"option_label_text_visible_desc\",\n      type: 'checkbox-prev'\n    },\n    // 字体样式\n    {\n      key: \"label_text_font_style\",\n      title: \"option_font_style\",\n      type: \"fontStyle\",\n      defaultValue: {\n        fontColor: \"#333\",\n        fontSize: 10\n      },\n      // 没有配置该值的情况下，继承的配置值\n      defaultValueConfig: \"font_size_label-2\",\n      require: \"label_text_visible\"\n    },\n    // 数据标签的内容\n    {\n      key: \"label_text_regex\",\n      title: \"option_label_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      require: 'label_text_visible',\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  },\n  // 悬浮文本设置\n  {\n    key: \"category_suspend_text\",\n    title: \"category_suspend_text\",\n    options: [{\n      key: \"suspend_text_regex\",\n      title: \"option_suspend_text_regex\",\n      description: \"option_suspend_text_regex_desc\",\n      type: \"chartRichText\",\n      inheritFlag: false // 主要用于看板中替换模板问答时，标明该配置是不接受模板中配置的标志\n    },\n    //恢复默认配置\n    {\n      key: \"chart_config_restart\",\n      type: \"restart\"\n    }]\n  }],\n  /**\r\n   * 图形配置的辅助对象：当前图形定义的宏列表 及 宏 解析方法 ； 适配之前图形配置值的方法 ；\r\n   *\r\n   * 当前图形提供的宏列表[ 宏名的命名规则： 开头是%_ 用_连接的大写字符字符串 ]\r\n   * 供自定义数据标签 及 悬浮文本使用，可以让用户配置显示内容\r\n   * 键值对  MacroName : MacroDisplayNameKey\r\n   * */\n  chartConfigureAdvanced: {\n    // 根据宏配置列表，已足够外部组件将 %_NAME:%_VALUE 翻译成 [属性]：[值] 显示给用户\n    // 如果当前图形支持换行的宏，则输入时允许输入换行符 ； 否则编辑时也不支持换行符 ；\n    chartMacroList: [{\n      key: '%_NAME',\n      nameKey: '%_NAME',\n      descriptionKey: '%_NAME_desc'\n    }, {\n      key: '%_VALUE',\n      nameKey: '%_VALUE',\n      descriptionKey: '%_VALUE_desc'\n    }, {\n      key: '%_PERCENT_OF_PREVIOUS',\n      nameKey: '%_PERCENT_OF_PREVIOUS',\n      descriptionKey: '%_PERCENT_OF_PREVIOUS_desc'\n    }, {\n      key: '%_PERCENT_OF_TOTAL',\n      nameKey: '%_PERCENT_OF_TOTAL',\n      descriptionKey: '%_PERCENT_OF_TOTAL_desc'\n    }, {\n      key: '%_BR',\n      nameKey: '%_BR',\n      descriptionKey: '%_BR_desc'\n    }],\n    // 依据当前配置，将 %_NAME:%_VALUE 转译成真实值显示\n    /**\r\n     * @param configMacroStr    -   用户配置的带宏的内容\r\n     * @param options\r\n     *          {\r\n     *              type        -\r\n     *\r\n     *              xLabel       -   图形单元对应的属性值 用于实现%_NAME %_CATEGORY_NAME\r\n     *              xLabelIndex  -   图形单元对应的属性索引，用于实现 %_CATEGORY_NUMBER\r\n     *              xLabelTotal  -   图形单元对应的属性上所有值的总和用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              xLabelNumber -   图形单元对应的属性上所有值的个数用于实现 %_CATEGORY_TOTAL  %_CATEGORY_AVERAGE  %_PERCENT_OF_CATEGORY\r\n     *              yValue       -   图形单元对应的值 用于实现 %_VALUE\r\n     *              yAxis        -   图形单元对应的值列 用于实现 %_VALUE_NAME  %_SERIES_NAME\r\n     *              legend       -   图形单元对应的图例名(为空时说明是多Y轴) 用于实现 %_SERIES_NAME\r\n     *              legendIndex  -   图形单元对应的图例索引 用于实现 %_SERIES_NUMBER\r\n     *              legendTotal  -   图形单元对应的图例上所有值的总和,用于实现 %_PERCENT_OF_TOTAL\r\n     *              rowData -  图形单元对应的一整行数据 用于实现%_COLUMN_N的宏\r\n     *          }\r\n     * */\n    translateMacro: function (configMacroStr, options) {\n      options = options || {};\n      if (!configMacroStr) return false;\n      let macroRegex = /%(_[A-Z0-9]*){1,}/g;\n      let theMatchedTextValue = '',\n        matchedIndex = 0;\n      macroRegex.lastIndex = -1;\n      for (let i = 0, execResult; (execResult = macroRegex.exec(configMacroStr)) && i < 100; i++) {\n        if (!execResult || !execResult[0][0]) break;\n        let theMatchStr = execResult[0],\n          theMatchIndex = execResult.index;\n        theMatchedTextValue += configMacroStr.substring(matchedIndex, Math.max(theMatchIndex, matchedIndex));\n        switch (theMatchStr) {\n          case \"%_NAME\":\n            theMatchedTextValue += options.xLabel || '';\n            break;\n          case \"%_VALUE\":\n            theMatchedTextValue += _DataFocusMethod.formatData(options.yValue, options.yAxis) || '';\n            break;\n          case \"%_PERCENT_OF_PREVIOUS\":\n            theMatchedTextValue += options.conversionRate || '';\n            break;\n          case \"%_PERCENT_OF_TOTAL\":\n            let theTPercent = options.yValue / (options.legendTotal || 1);\n            if (!isNaN(theTPercent)) {\n              theMatchedTextValue += _DataFocusMethod.getValidNum(theTPercent * 100, 2) + '%';\n            }\n            break;\n          case \"%_BR\":\n            theMatchedTextValue += options.type === 'label' ? '\\n' : '<br/>';\n            break;\n          default:\n            if (theMatchStr.startsWith(\"%_COLUMN_\")) {\n              let theColumnN = parseInt(theMatchStr.substring(9));\n              const matchedHeader = options.headers[theColumnN - 1];\n              if (!isNaN(theColumnN) && options.rowData && theColumnN > 0 && theColumnN <= options.rowData.length) {\n                theMatchedTextValue += _DataFocusMethod.formatData(options.rowData[theColumnN - 1], matchedHeader) || '';\n              }\n            }\n            break;\n        }\n        matchedIndex = theMatchIndex + theMatchStr.length;\n      }\n      if (matchedIndex < configMacroStr.length) {\n        theMatchedTextValue += configMacroStr.substring(matchedIndex);\n      }\n      return theMatchedTextValue;\n    },\n    // 如果当前图形配置在上线后需要更新配置，需要兼容行为，则在此处处理[ 不同图形兼容方法不一样 ]\n    compatibleHistoryConfigure: function (chartConfigure, options) {\n      if (!options) return false;\n      options = options || {};\n      // 图形字体大小修改了值结构\n      if (_DataFocusMethod.isPureNumber(chartConfigure.font_size_label)) {\n        let theFontSize = parseInt(chartConfigure.font_size_label);\n        chartConfigure.font_size_label = {\n          fontSize: theFontSize\n        };\n      }\n    }\n  },\n  // [*必填项]图轴及图表自定义的中英文\n  i18nObj: {\n    chinese: {\n      \"category_color\": \"颜色\",\n      \"option_font_style\": \"字体\",\n      \"option_font_alignment\": \"对齐方式\",\n      \"option_legend_shape_type_funnel\": \"漏斗\",\n      \"option_legend_list_flex_flag\": \"宽度自适应\",\n      \"option_legend_relative_offset_with_chart\": \"图例与图形的距离\",\n      \"option_suspend_text_regex_desc\": \"要显示的文本。有以下替换宏可用：<br /> \" + \"<span class='mr3'>[值]</span> - 对应的Y轴的数值 <br />\" + \"<span class='mr3'>[属性]</span> - 显示的数值标签为对应的X轴的值<br /> \" + \"<span class='mr3'>[类别百分比]</span> - X轴的刻度上Y值占所有Y值总和的百分比 <br />\" + \"<span class='mr3'>[转化率]</span> - Y值占前一个Y值的百分比 <br /> \" + \"<span class='mr3'>[(列N)]</span> - 第N列的数值 <br /> \" + \"<span class='mr3'>[换行]</span> - 换行符\",\n      \"%_NAME\": \"属性\",\n      \"%_NAME_desc\": \"对应的X轴的刻度值\",\n      \"%_VALUE\": \"值\",\n      \"%_VALUE_desc\": \"对应的Y轴的数值\",\n      \"%_PERCENT_OF_TOTAL\": \"类别百分比\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"X轴的刻度上Y值占所有Y值总和的百分比\",\n      \"%_PERCENT_OF_PREVIOUS\": \"转化率\",\n      \"%_PERCENT_OF_PREVIOUS_desc\": \"当前刻度Y值占前一个Y值的百分比\",\n      \"%_BR\": \"换行\"\n    },\n    english: {\n      \"category_color\": \"Color\",\n      \"option_font_style\": \"Font\",\n      \"option_font_alignment\": \"Alignment\",\n      \"option_legend_shape_type_funnel\": \"Funnel\",\n      \"option_legend_list_flex_flag\": \"Width adaptive\",\n      \"option_legend_relative_offset_with_chart\": \"Distance between legend and graphics\",\n      \"option_suspend_text_regex_desc\": \"The text to be displayed. The following replacement macros are available：<br /> \" + \"<span class='mr3'>[Value]</span> - The corresponding value of the Y-axis <br />\" + \"<span class='mr3'>[Attribute]</span> - The displayed numerical labels are the corresponding X-axis values<br /> \" + \"<span class='mr3'>[Label Percentage]</span> - The percentage of Y values on the scale of the X-axis to the total of all Y values on that scale <br /> \" + \"<span class='mr3'>[Conversion rate]</span> - Percentage of Y value to the previous Y value <br /> \" + \"<span class='mr3'>[(Column N)]</span> - Value in column N  <br /> \" + \"<span class='mr3'>[Wrap]</span> - Line break\",\n      \"%_NAME\": \"Attribute\",\n      \"%_NAME_desc\": \"The displayed numerical labels are the corresponding X-axis values\",\n      \"%_VALUE\": \"Value\",\n      \"%_VALUE_desc\": \"The corresponding value of the Y-axis\",\n      \"%_PERCENT_OF_TOTAL\": \"Series Percentage\",\n      \"%_PERCENT_OF_TOTAL_desc\": \"The percentage of Y value on the X-axis scale to the total sum of all Y values\",\n      \"%_PERCENT_OF_PREVIOUS\": \"Conversion rate\",\n      \"%_PERCENT_OF_PREVIOUS_desc\": \"Percentage of Y value to the previous Y value\",\n      \"%_BR\": \"Wrap\"\n    }\n  },\n  // [*必填项]生成当前图表类型的模板数据\n  getTemplateData: function () {}\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///../src-v5/assets/js/charts.system.basic/funnel/systemFunnelChart.js?");

/***/ })

}]);